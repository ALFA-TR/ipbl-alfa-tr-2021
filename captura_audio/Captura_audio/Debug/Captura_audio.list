
Captura_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000788c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d58  08007d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d60  08007d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000228c  2000000c  08007d74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002298  08007d74  00022298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b80  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b75  00000000  00000000  00036bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  0003abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002293d  00000000  00000000  0003bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188c6  00000000  00000000  0005e8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9ba3  00000000  00000000  00077193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d8  00000000  00000000  00150d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007a00 	.word	0x08007a00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08007a00 	.word	0x08007a00

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	6078      	str	r0, [r7, #4]
	if( hadc->Instance == hadc1.Instance )
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <HAL_ADC_ConvCpltCallback+0x30>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d108      	bne.n	80004ea <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)&amostras[2048], 2048, DAC_ALIGN_12B_R);
 80004d8:	2300      	movs	r3, #0
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80004e2:	2110      	movs	r1, #16
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <HAL_ADC_ConvCpltCallback+0x38>)
 80004e6:	f002 fd7d 	bl	8002fe4 <HAL_DAC_Start_DMA>
	}
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000003c 	.word	0x2000003c
 80004f8:	200011c4 	.word	0x200011c4
 80004fc:	20000028 	.word	0x20000028

08000500 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8
 8000506:	6078      	str	r0, [r7, #4]
	if( hadc->Instance == hadc1.Instance )
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	429a      	cmp	r2, r3
 8000512:	d108      	bne.n	8000526 <HAL_ADC_ConvHalfCpltCallback+0x26>
	{
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)&amostras[0], 2048, DAC_ALIGN_12B_R);
 8000514:	2300      	movs	r3, #0
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800051e:	2110      	movs	r1, #16
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000522:	f002 fd5f 	bl	8002fe4 <HAL_DAC_Start_DMA>
	}
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	2000003c 	.word	0x2000003c
 8000534:	200001c4 	.word	0x200001c4
 8000538:	20000028 	.word	0x20000028

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fd51 	bl	8000fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f82e 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fa2a 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 f9ee 	bl	800092c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000550:	f000 f9bc 	bl	80008cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000554:	f000 f888 	bl	8000668 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000558:	f000 f8ec 	bl	8000734 <MX_DAC1_Init>
  MX_TIM2_Init();
 800055c:	f000 f934 	bl	80007c8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000560:	f000 f97e 	bl	8000860 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x54>)
 8000566:	f005 fd3f 	bl	8005fe8 <HAL_TIM_Base_Start>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0x58>)
 800056e:	f002 fce1 	bl	8002f34 <HAL_DAC_Start>

  HAL_TIM_Base_Start(&htim6);
 8000572:	4809      	ldr	r0, [pc, #36]	; (8000598 <main+0x5c>)
 8000574:	f005 fd38 	bl	8005fe8 <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000578:	217f      	movs	r1, #127	; 0x7f
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <main+0x60>)
 800057c:	f002 faf0 	bl	8002b60 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)amostras, 4096);
 8000580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000584:	4906      	ldr	r1, [pc, #24]	; (80005a0 <main+0x64>)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <main+0x60>)
 8000588:	f001 fb0c 	bl	8001ba4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800058c:	bf30      	wfi
 800058e:	e7fd      	b.n	800058c <main+0x50>
 8000590:	200021c4 	.word	0x200021c4
 8000594:	20000028 	.word	0x20000028
 8000598:	20000130 	.word	0x20000130
 800059c:	2000003c 	.word	0x2000003c
 80005a0:	200001c4 	.word	0x200001c4

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f007 fa1c 	bl	80079f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f003 fedd 	bl	8004388 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 fa62 	bl	8000a9c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f003 feb8 	bl	800434c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <SystemClock_Config+0xc0>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <SystemClock_Config+0xc0>)
 80005e4:	f023 0318 	bic.w	r3, r3, #24
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005ec:	2314      	movs	r3, #20
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000604:	2301      	movs	r3, #1
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800060c:	2310      	movs	r3, #16
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000610:	2307      	movs	r3, #7
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4618      	mov	r0, r3
 8000622:	f003 ff13 	bl	800444c <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800062c:	f000 fa36 	bl	8000a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f004 fc75 	bl	8004f38 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000654:	f000 fa22 	bl	8000a9c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000658:	f005 fa78 	bl	8005b4c <HAL_RCCEx_EnableMSIPLLMode>
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	; 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_ADC1_Init+0xc0>)
 8000680:	4a2a      	ldr	r2, [pc, #168]	; (800072c <MX_ADC1_Init+0xc4>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_ADC1_Init+0xc0>)
 8000686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800068a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_ADC1_Init+0xc0>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_ADC1_Init+0xc0>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_ADC1_Init+0xc0>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006c0:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <MX_ADC1_Init+0xc0>)
 80006e6:	f000 ff13 	bl	8001510 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80006f0:	f000 f9d4 	bl	8000a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_ADC1_Init+0xc8>)
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	2306      	movs	r3, #6
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80006fc:	2303      	movs	r3, #3
 80006fe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000700:	237f      	movs	r3, #127	; 0x7f
 8000702:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000704:	2304      	movs	r3, #4
 8000706:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_ADC1_Init+0xc0>)
 8000712:	f001 fae3 	bl	8001cdc <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800071c:	f000 f9be 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000003c 	.word	0x2000003c
 800072c:	50040000 	.word	0x50040000
 8000730:	3ef08000 	.word	0x3ef08000

08000734 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2224      	movs	r2, #36	; 0x24
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f007 f955 	bl	80079f0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_DAC1_Init+0x8c>)
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <MX_DAC1_Init+0x90>)
 800074a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800074c:	481c      	ldr	r0, [pc, #112]	; (80007c0 <MX_DAC1_Init+0x8c>)
 800074e:	f002 fbc1 	bl	8002ed4 <HAL_DAC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000758:	f000 f9a0 	bl	8000a9c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000760:	2324      	movs	r3, #36	; 0x24
 8000762:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	4619      	mov	r1, r3
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_DAC1_Init+0x8c>)
 8000778:	f002 fd38 	bl	80031ec <HAL_DAC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f98b 	bl	8000a9c <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8000786:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800078a:	2100      	movs	r1, #0
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_DAC1_Init+0x8c>)
 800078e:	f002 ff0b 	bl	80035a8 <HAL_DACEx_TriangleWaveGenerate>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000798:	f000 f980 	bl	8000a9c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800079c:	2304      	movs	r3, #4
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2210      	movs	r2, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_DAC1_Init+0x8c>)
 80007a8:	f002 fd20 	bl	80031ec <HAL_DAC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80007b2:	f000 f973 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3728      	adds	r7, #40	; 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028
 80007c4:	40007400 	.word	0x40007400

080007c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_TIM2_Init+0x94>)
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_TIM2_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_TIM2_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_TIM2_Init+0x94>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_TIM2_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM2_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <MX_TIM2_Init+0x94>)
 800080e:	f005 fb2b 	bl	8005e68 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000818:	f000 f940 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_TIM2_Init+0x94>)
 800082a:	f005 fc53 	bl	80060d4 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 f932 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000838:	2320      	movs	r3, #32
 800083a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_TIM2_Init+0x94>)
 8000846:	f005 ffd5 	bl	80067f4 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000850:	f000 f924 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200021c4 	.word	0x200021c4

08000860 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_TIM6_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_TIM6_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000884:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000888:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_TIM6_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000892:	f005 fae9 	bl	8005e68 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800089c:	f000 f8fe 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008a0:	2320      	movs	r3, #32
 80008a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_TIM6_Init+0x64>)
 80008ae:	f005 ffa1 	bl	80067f4 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 f8f0 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000130 	.word	0x20000130
 80008c8:	40001000 	.word	0x40001000

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART2_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000910:	f006 f884 	bl	8006a1c <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 f8bf 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20002210 	.word	0x20002210
 8000928:	40004400 	.word	0x40004400

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_DMA_Init+0x70>)
 8000934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <MX_DMA_Init+0x70>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6493      	str	r3, [r2, #72]	; 0x48
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_DMA_Init+0x70>)
 8000940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_DMA_Init+0x70>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <MX_DMA_Init+0x70>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6493      	str	r3, [r2, #72]	; 0x48
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_DMA_Init+0x70>)
 8000958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	200e      	movs	r0, #14
 8000968:	f002 fa64 	bl	8002e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800096c:	200e      	movs	r0, #14
 800096e:	f002 fa8d 	bl	8002e8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2011      	movs	r0, #17
 8000978:	f002 fa5c 	bl	8002e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800097c:	2011      	movs	r0, #17
 800097e:	f002 fa85 	bl	8002e8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	203a      	movs	r0, #58	; 0x3a
 8000988:	f002 fa54 	bl	8002e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800098c:	203a      	movs	r0, #58	; 0x3a
 800098e:	f002 fa7d 	bl	8002e8c <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a35      	ldr	r2, [pc, #212]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_GPIO_Init+0xf0>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_GPIO_Init+0xf0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_GPIO_Init+0xf0>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_GPIO_Init+0xf0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2118      	movs	r1, #24
 8000a1a:	481e      	ldr	r0, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a1c:	f003 fc66 	bl	80042ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 8000a20:	f641 73ca 	movw	r3, #8138	; 0x1fca
 8000a24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f003 fa32 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a3c:	23e2      	movs	r3, #226	; 0xe2
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a40:	2303      	movs	r3, #3
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a50:	f003 fa26 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 8000a54:	2318      	movs	r3, #24
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a6c:	f003 fa18 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a70:	2308      	movs	r3, #8
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a74:	2303      	movs	r3, #3
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0xf8>)
 8000a84:	f003 fa0c 	bl	8003ea0 <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400
 8000a98:	48001c00 	.word	0x48001c00

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>

08000aa6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09e      	sub	sp, #120	; 0x78
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2254      	movs	r2, #84	; 0x54
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f006 ff63 	bl	80079f0 <memset>
  if(hadc->Instance==ADC1)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d15e      	bne.n	8000bf2 <HAL_ADC_MspInit+0xee>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000b3e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 fc9d 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b50:	f7ff ffa4 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000b5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b84:	2301      	movs	r3, #1
 8000b86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b88:	230b      	movs	r3, #11
 8000b8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b94:	4619      	mov	r1, r3
 8000b96:	481b      	ldr	r0, [pc, #108]	; (8000c04 <HAL_ADC_MspInit+0x100>)
 8000b98:	f003 f982 	bl	8003ea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_ADC_MspInit+0x108>)
 8000ba0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bcc:	2220      	movs	r2, #32
 8000bce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bd8:	f002 fdde 	bl	8003798 <HAL_DMA_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000be2:	f7ff ff5b 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bea:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_ADC_MspInit+0x104>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3778      	adds	r7, #120	; 0x78
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	50040000 	.word	0x50040000
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	200000e8 	.word	0x200000e8
 8000c0c:	40020430 	.word	0x40020430

08000c10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	; (8000cdc <HAL_DAC_MspInit+0xcc>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d14f      	bne.n	8000cd2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <HAL_DAC_MspInit+0xd0>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a2a      	ldr	r2, [pc, #168]	; (8000ce0 <HAL_DAC_MspInit+0xd0>)
 8000c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <HAL_DAC_MspInit+0xd0>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <HAL_DAC_MspInit+0xd0>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_DAC_MspInit+0xd0>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_DAC_MspInit+0xd0>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c62:	2330      	movs	r3, #48	; 0x30
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f003 f912 	bl	8003ea0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000c7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_DAC_MspInit+0xd8>)
 8000c80:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000c84:	2205      	movs	r2, #5
 8000c86:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000c8a:	2210      	movs	r2, #16
 8000c8c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000cb8:	f002 fd6e 	bl	8003798 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000cc2:	f7ff feeb 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <HAL_DAC_MspInit+0xd4>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40007400 	.word	0x40007400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	2000017c 	.word	0x2000017c
 8000ce8:	40020044 	.word	0x40020044

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d10c      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_TIM_Base_MspInit+0x5c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <HAL_TIM_Base_MspInit+0x5c>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_TIM_Base_MspInit+0x5c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d16:	e010      	b.n	8000d3a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_TIM_Base_MspInit+0x60>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10b      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_TIM_Base_MspInit+0x5c>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_TIM_Base_MspInit+0x5c>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_TIM_Base_MspInit+0x5c>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40001000 	.word	0x40001000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09e      	sub	sp, #120	; 0x78
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2254      	movs	r2, #84	; 0x54
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f006 fe3d 	bl	80079f0 <memset>
  if(huart->Instance==USART2)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a40      	ldr	r2, [pc, #256]	; (8000e7c <HAL_UART_MspInit+0x12c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d179      	bne.n	8000e74 <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fb79 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d98:	f7ff fe80 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9c:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <HAL_UART_MspInit+0x130>)
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da0:	4a37      	ldr	r2, [pc, #220]	; (8000e80 <HAL_UART_MspInit+0x130>)
 8000da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da6:	6593      	str	r3, [r2, #88]	; 0x58
 8000da8:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <HAL_UART_MspInit+0x130>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <HAL_UART_MspInit+0x130>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <HAL_UART_MspInit+0x130>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_UART_MspInit+0x130>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f003 f859 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e00:	2303      	movs	r3, #3
 8000e02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f003 f847 	bl	8003ea0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_UART_MspInit+0x138>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e20:	2210      	movs	r2, #16
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e4a:	f002 fca5 	bl	8003798 <HAL_DMA_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000e54:	f7ff fe22 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_UART_MspInit+0x134>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2026      	movs	r0, #38	; 0x26
 8000e6a:	f001 ffe3 	bl	8002e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6e:	2026      	movs	r0, #38	; 0x26
 8000e70:	f002 f80c 	bl	8002e8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3778      	adds	r7, #120	; 0x78
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	40021000 	.word	0x40021000
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	40020080 	.word	0x40020080

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f8da 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <DMA1_Channel4_IRQHandler+0x10>)
 8000ee6:	f002 fefc 	bl	8003ce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000017c 	.word	0x2000017c

08000ef4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <DMA1_Channel7_IRQHandler+0x10>)
 8000efa:	f002 fef2 	bl	8003ce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000a0 	.word	0x200000a0

08000f08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <USART2_IRQHandler+0x10>)
 8000f0e:	f005 fe09 	bl	8006b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20002210 	.word	0x20002210

08000f1c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <DMA2_Channel3_IRQHandler+0x10>)
 8000f22:	f002 fede 	bl	8003ce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000e8 	.word	0x200000e8

08000f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <SystemInit+0x5c>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <SystemInit+0x5c>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <SystemInit+0x60>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <SystemInit+0x60>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <SystemInit+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <SystemInit+0x60>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <SystemInit+0x60>)
 8000f5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <SystemInit+0x60>)
 8000f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <SystemInit+0x60>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <SystemInit+0x60>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SystemInit+0x60>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	40021000 	.word	0x40021000

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff ffca 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <LoopForever+0x16>)
	cmp	r2, r3
 8000fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f006 fcf1 	bl	80079a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff fab9 	bl	800053c <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000fd0:	08007d68 	.word	0x08007d68
	ldr	r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fd8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000fdc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000fe0:	20002298 	.word	0x20002298

08000fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>

08000fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f001 feff 	bl	8002df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f80e 	bl	8001018 <HAL_InitTick>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e001      	b.n	800100c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001008:	f7ff fd58 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100c:	79fb      	ldrb	r3, [r7, #7]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_InitTick+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d023      	beq.n	8001074 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_InitTick+0x70>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_InitTick+0x6c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f001 ff3a 	bl	8002ebc <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10f      	bne.n	800106e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d809      	bhi.n	8001068 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f001 feea 	bl	8002e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001060:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_InitTick+0x74>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e007      	b.n	8001078 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e004      	b.n	8001078 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e001      	b.n	8001078 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000000 	.word	0x20000000
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20002294 	.word	0x20002294

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20002294 	.word	0x20002294

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	609a      	str	r2, [r3, #8]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0318 	and.w	r3, r3, #24
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3360      	adds	r3, #96	; 0x60
 80011ae:	461a      	mov	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <LL_ADC_SetOffset+0x44>)
 80011be:	4013      	ands	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	4313      	orrs	r3, r2
 80011cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	03fff000 	.word	0x03fff000

080011e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3360      	adds	r3, #96	; 0x60
 80011f2:	461a      	mov	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3360      	adds	r3, #96	; 0x60
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	431a      	orrs	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800123a:	bf00      	nop
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3330      	adds	r3, #48	; 0x30
 800127c:	461a      	mov	r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	4413      	add	r3, r2
 800128a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	211f      	movs	r1, #31
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0e9b      	lsrs	r3, r3, #26
 80012a4:	f003 011f 	and.w	r1, r3, #31
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	431a      	orrs	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3314      	adds	r3, #20
 80012d4:	461a      	mov	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	0e5b      	lsrs	r3, r3, #25
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	0d1b      	lsrs	r3, r3, #20
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	2107      	movs	r1, #7
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	0d1b      	lsrs	r3, r3, #20
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	431a      	orrs	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0318 	and.w	r3, r3, #24
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001340:	40d9      	lsrs	r1, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	400b      	ands	r3, r1
 8001346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	0007ffff 	.word	0x0007ffff

08001364 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6093      	str	r3, [r2, #8]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800139c:	d101      	bne.n	80013a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013ec:	d101      	bne.n	80013f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001414:	f043 0201 	orr.w	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <LL_ADC_IsEnabled+0x18>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <LL_ADC_IsEnabled+0x1a>
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b02      	cmp	r3, #2
 8001488:	d101      	bne.n	800148e <LL_ADC_IsDisableOngoing+0x18>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_ADC_IsDisableOngoing+0x1a>
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b0:	f043 0204 	orr.w	r2, r3, #4
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d101      	bne.n	80014dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d101      	bne.n	8001502 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e330      	b.n	8001b8c <HAL_ADC_Init+0x67c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a9e      	ldr	r2, [pc, #632]	; (80017a8 <HAL_ADC_Init+0x298>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d004      	beq.n	800153e <HAL_ADC_Init+0x2e>
 8001534:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001538:	489c      	ldr	r0, [pc, #624]	; (80017ac <HAL_ADC_Init+0x29c>)
 800153a:	f7ff fab4 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001546:	d049      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001550:	d044      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800155a:	d03f      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03b      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800156c:	d036      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001576:	d031      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001580:	d02c      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800158a:	d027      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001594:	d022      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800159e:	d01d      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80015a8:	d018      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015b2:	d013      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80015bc:	d00e      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80015c6:	d009      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80015d0:	d004      	beq.n	80015dc <HAL_ADC_Init+0xcc>
 80015d2:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80015d6:	4875      	ldr	r0, [pc, #468]	; (80017ac <HAL_ADC_Init+0x29c>)
 80015d8:	f7ff fa65 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d010      	beq.n	8001606 <HAL_ADC_Init+0xf6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d00c      	beq.n	8001606 <HAL_ADC_Init+0xf6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b10      	cmp	r3, #16
 80015f2:	d008      	beq.n	8001606 <HAL_ADC_Init+0xf6>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b18      	cmp	r3, #24
 80015fa:	d004      	beq.n	8001606 <HAL_ADC_Init+0xf6>
 80015fc:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001600:	486a      	ldr	r0, [pc, #424]	; (80017ac <HAL_ADC_Init+0x29c>)
 8001602:	f7ff fa50 	bl	8000aa6 <assert_failed>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
#endif
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_ADC_Init+0x110>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b20      	cmp	r3, #32
 8001614:	d004      	beq.n	8001620 <HAL_ADC_Init+0x110>
 8001616:	f240 11a7 	movw	r1, #423	; 0x1a7
 800161a:	4864      	ldr	r0, [pc, #400]	; (80017ac <HAL_ADC_Init+0x29c>)
 800161c:	f7ff fa43 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_ADC_Init+0x12a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d004      	beq.n	800163a <HAL_ADC_Init+0x12a>
 8001630:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001634:	485d      	ldr	r0, [pc, #372]	; (80017ac <HAL_ADC_Init+0x29c>)
 8001636:	f7ff fa36 	bl	8000aa6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e5b      	ldrb	r3, [r3, #25]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_ADC_Init+0x144>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e5b      	ldrb	r3, [r3, #25]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d004      	beq.n	8001654 <HAL_ADC_Init+0x144>
 800164a:	f240 11a9 	movw	r1, #425	; 0x1a9
 800164e:	4857      	ldr	r0, [pc, #348]	; (80017ac <HAL_ADC_Init+0x29c>)
 8001650:	f7ff fa29 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_ADC_Init+0x174>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001664:	d00e      	beq.n	8001684 <HAL_ADC_Init+0x174>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800166e:	d009      	beq.n	8001684 <HAL_ADC_Init+0x174>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001678:	d004      	beq.n	8001684 <HAL_ADC_Init+0x174>
 800167a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800167e:	484b      	ldr	r0, [pc, #300]	; (80017ac <HAL_ADC_Init+0x29c>)
 8001680:	f7ff fa11 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168c:	d053      	beq.n	8001736 <HAL_ADC_Init+0x226>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8001696:	d04e      	beq.n	8001736 <HAL_ADC_Init+0x226>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80016a0:	d049      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 80016aa:	d044      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80016b4:	d03f      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 80016be:	d03a      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80016c8:	d035      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 80016d2:	d030      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80016dc:	d02b      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80016e6:	d026      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80016f0:	d021      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 80016fa:	d01c      	beq.n	8001736 <HAL_ADC_Init+0x226>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001704:	d017      	beq.n	8001736 <HAL_ADC_Init+0x226>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 800170e:	d012      	beq.n	8001736 <HAL_ADC_Init+0x226>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8001718:	d00d      	beq.n	8001736 <HAL_ADC_Init+0x226>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8001722:	d008      	beq.n	8001736 <HAL_ADC_Init+0x226>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_ADC_Init+0x226>
 800172c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001730:	481e      	ldr	r0, [pc, #120]	; (80017ac <HAL_ADC_Init+0x29c>)
 8001732:	f7ff f9b8 	bl	8000aa6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <HAL_ADC_Init+0x244>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001746:	2b01      	cmp	r3, #1
 8001748:	d004      	beq.n	8001754 <HAL_ADC_Init+0x244>
 800174a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800174e:	4817      	ldr	r0, [pc, #92]	; (80017ac <HAL_ADC_Init+0x29c>)
 8001750:	f7ff f9a9 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d008      	beq.n	800176e <HAL_ADC_Init+0x25e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d004      	beq.n	800176e <HAL_ADC_Init+0x25e>
 8001764:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001768:	4810      	ldr	r0, [pc, #64]	; (80017ac <HAL_ADC_Init+0x29c>)
 800176a:	f7ff f99c 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_ADC_Init+0x27a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177e:	d004      	beq.n	800178a <HAL_ADC_Init+0x27a>
 8001780:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001784:	4809      	ldr	r0, [pc, #36]	; (80017ac <HAL_ADC_Init+0x29c>)
 8001786:	f7ff f98e 	bl	8000aa6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7e1b      	ldrb	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00e      	beq.n	80017b0 <HAL_ADC_Init+0x2a0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7e1b      	ldrb	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d00a      	beq.n	80017b0 <HAL_ADC_Init+0x2a0>
 800179a:	f240 11af 	movw	r1, #431	; 0x1af
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <HAL_ADC_Init+0x29c>)
 80017a0:	f7ff f981 	bl	8000aa6 <assert_failed>
 80017a4:	e004      	b.n	80017b0 <HAL_ADC_Init+0x2a0>
 80017a6:	bf00      	nop
 80017a8:	50040000 	.word	0x50040000
 80017ac:	08007a18 	.word	0x08007a18
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_ADC_Init+0x2be>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d004      	beq.n	80017ce <HAL_ADC_Init+0x2be>
 80017c4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80017c8:	483a      	ldr	r0, [pc, #232]	; (80018b4 <HAL_ADC_Init+0x3a4>)
 80017ca:	f7ff f96c 	bl	8000aa6 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d02d      	beq.n	8001832 <HAL_ADC_Init+0x322>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_ADC_Init+0x2d6>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d904      	bls.n	80017f0 <HAL_ADC_Init+0x2e0>
 80017e6:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80017ea:	4832      	ldr	r0, [pc, #200]	; (80018b4 <HAL_ADC_Init+0x3a4>)
 80017ec:	f7ff f95b 	bl	8000aa6 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_ADC_Init+0x2fe>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d004      	beq.n	800180e <HAL_ADC_Init+0x2fe>
 8001804:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001808:	482a      	ldr	r0, [pc, #168]	; (80018b4 <HAL_ADC_Init+0x3a4>)
 800180a:	f7ff f94c 	bl	8000aa6 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10c      	bne.n	8001832 <HAL_ADC_Init+0x322>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_ADC_Init+0x318>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2b08      	cmp	r3, #8
 8001826:	d904      	bls.n	8001832 <HAL_ADC_Init+0x322>
 8001828:	f240 11b9 	movw	r1, #441	; 0x1b9
 800182c:	4821      	ldr	r0, [pc, #132]	; (80018b4 <HAL_ADC_Init+0x3a4>)
 800182e:	f7ff f93a 	bl	8000aa6 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d108      	bne.n	800184e <HAL_ADC_Init+0x33e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e5b      	ldrb	r3, [r3, #25]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d104      	bne.n	800184e <HAL_ADC_Init+0x33e>
 8001844:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001848:	481a      	ldr	r0, [pc, #104]	; (80018b4 <HAL_ADC_Init+0x3a4>)
 800184a:	f7ff f92c 	bl	8000aa6 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_ADC_Init+0x35a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff f954 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd8a 	bl	8001388 <LL_ADC_IsDeepPowerDownEnabled>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_ADC_Init+0x374>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fd70 	bl	8001364 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fda5 	bl	80013d8 <LL_ADC_IsInternalRegulatorEnabled>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11b      	bne.n	80018cc <HAL_ADC_Init+0x3bc>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd89 	bl	80013b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_ADC_Init+0x3a8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_ADC_Init+0x3ac>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	3301      	adds	r3, #1
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018b2:	e008      	b.n	80018c6 <HAL_ADC_Init+0x3b6>
 80018b4:	08007a18 	.word	0x08007a18
 80018b8:	20000000 	.word	0x20000000
 80018bc:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f9      	bne.n	80018c0 <HAL_ADC_Init+0x3b0>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd81 	bl	80013d8 <LL_ADC_IsInternalRegulatorEnabled>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_ADC_Init+0x3e8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f043 0210 	orr.w	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fde1 	bl	80014c4 <LL_ADC_REG_IsConversionOngoing>
 8001902:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8134 	bne.w	8001b7a <HAL_ADC_Init+0x66a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 8130 	bne.w	8001b7a <HAL_ADC_Init+0x66a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001922:	f043 0202 	orr.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fd8e 	bl	8001450 <LL_ADC_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <HAL_ADC_Init+0x442>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800193a:	4896      	ldr	r0, [pc, #600]	; (8001b94 <HAL_ADC_Init+0x684>)
 800193c:	f7ff fd88 	bl	8001450 <LL_ADC_IsEnabled>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <HAL_ADC_Init+0x442>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	4892      	ldr	r0, [pc, #584]	; (8001b98 <HAL_ADC_Init+0x688>)
 800194e:	f7ff fbe3 	bl	8001118 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7e5b      	ldrb	r3, [r3, #25]
 8001956:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800195c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001962:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001968:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001970:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_ADC_Init+0x47e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	3b01      	subs	r3, #1
 8001986:	045b      	lsls	r3, r3, #17
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_ADC_Init+0x49a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_ADC_Init+0x68c>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	69b9      	ldr	r1, [r7, #24]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fd7e 	bl	80014c4 <LL_ADC_REG_IsConversionOngoing>
 80019c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fd8b 	bl	80014ea <LL_ADC_INJ_IsConversionOngoing>
 80019d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 80ac 	bne.w	8001b36 <HAL_ADC_Init+0x626>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 80a8 	bne.w	8001b36 <HAL_ADC_Init+0x626>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a02:	f023 0302 	bic.w	r3, r3, #2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f040 8085 	bne.w	8001b26 <HAL_ADC_Init+0x616>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d01c      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d018      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d014      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d010      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	2b14      	cmp	r3, #20
 8001a4a:	d00c      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	2b18      	cmp	r3, #24
 8001a52:	d008      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	2b1c      	cmp	r3, #28
 8001a5a:	d004      	beq.n	8001a66 <HAL_ADC_Init+0x556>
 8001a5c:	f240 216f 	movw	r1, #623	; 0x26f
 8001a60:	484f      	ldr	r0, [pc, #316]	; (8001ba0 <HAL_ADC_Init+0x690>)
 8001a62:	f7ff f820 	bl	8000aa6 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d025      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d021      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d01d      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2b60      	cmp	r3, #96	; 0x60
 8001a84:	d019      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	2b80      	cmp	r3, #128	; 0x80
 8001a8c:	d015      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2ba0      	cmp	r3, #160	; 0xa0
 8001a94:	d011      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8001a9c:	d00d      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2be0      	cmp	r3, #224	; 0xe0
 8001aa4:	d009      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x5aa>
 8001ab0:	f44f 711c 	mov.w	r1, #624	; 0x270
 8001ab4:	483a      	ldr	r0, [pc, #232]	; (8001ba0 <HAL_ADC_Init+0x690>)
 8001ab6:	f7fe fff6 	bl	8000aa6 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_ADC_Init+0x5c6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d004      	beq.n	8001ad6 <HAL_ADC_Init+0x5c6>
 8001acc:	f240 2171 	movw	r1, #625	; 0x271
 8001ad0:	4833      	ldr	r0, [pc, #204]	; (8001ba0 <HAL_ADC_Init+0x690>)
 8001ad2:	f7fe ffe8 	bl	8000aa6 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d00a      	beq.n	8001af4 <HAL_ADC_Init+0x5e4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae2:	f240 4201 	movw	r2, #1025	; 0x401
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_Init+0x5e4>
 8001aea:	f240 2172 	movw	r1, #626	; 0x272
 8001aee:	482c      	ldr	r0, [pc, #176]	; (8001ba0 <HAL_ADC_Init+0x690>)
 8001af0:	f7fe ffd9 	bl	8000aa6 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b16:	430a      	orrs	r2, r1
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	e007      	b.n	8001b36 <HAL_ADC_Init+0x626>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10c      	bne.n	8001b58 <HAL_ADC_Init+0x648>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f023 010f 	bic.w	r1, r3, #15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
 8001b56:	e007      	b.n	8001b68 <HAL_ADC_Init+0x658>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 020f 	bic.w	r2, r2, #15
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f023 0303 	bic.w	r3, r3, #3
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
 8001b78:	e007      	b.n	8001b8a <HAL_ADC_Init+0x67a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0210 	orr.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	50040000 	.word	0x50040000
 8001b98:	50040300 	.word	0x50040300
 8001b9c:	fff0c007 	.word	0xfff0c007
 8001ba0:	08007a18 	.word	0x08007a18

08001ba4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3f      	ldr	r2, [pc, #252]	; (8001cb4 <HAL_ADC_Start_DMA+0x110>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_Start_DMA+0x20>
 8001bba:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001bbe:	483e      	ldr	r0, [pc, #248]	; (8001cb8 <HAL_ADC_Start_DMA+0x114>)
 8001bc0:	f7fe ff71 	bl	8000aa6 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fc7b 	bl	80014c4 <LL_ADC_REG_IsConversionOngoing>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d167      	bne.n	8001ca4 <HAL_ADC_Start_DMA+0x100>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_Start_DMA+0x3e>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e063      	b.n	8001caa <HAL_ADC_Start_DMA+0x106>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fe36 	bl	800285c <ADC_Enable>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d14f      	bne.n	8001c9a <HAL_ADC_Start_DMA+0xf6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_ADC_Start_DMA+0x84>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f023 0206 	bic.w	r2, r3, #6
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	659a      	str	r2, [r3, #88]	; 0x58
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_Start_DMA+0x8a>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_ADC_Start_DMA+0x118>)
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_ADC_Start_DMA+0x11c>)
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_ADC_Start_DMA+0x120>)
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	221c      	movs	r2, #28
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0210 	orr.w	r2, r2, #16
 8001c64:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3340      	adds	r3, #64	; 0x40
 8001c80:	4619      	mov	r1, r3
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f001 ff3f 	bl	8003b08 <HAL_DMA_Start_IT>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc02 	bl	800149c <LL_ADC_REG_StartConversion>
 8001c98:	e006      	b.n	8001ca8 <HAL_ADC_Start_DMA+0x104>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ca2:	e001      	b.n	8001ca8 <HAL_ADC_Start_DMA+0x104>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	50040000 	.word	0x50040000
 8001cb8:	08007a18 	.word	0x08007a18
 8001cbc:	080029df 	.word	0x080029df
 8001cc0:	08002ab7 	.word	0x08002ab7
 8001cc4:	08002ad3 	.word	0x08002ad3

08001cc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b0b7      	sub	sp, #220	; 0xdc
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4aa4      	ldr	r2, [pc, #656]	; (8001f88 <HAL_ADC_ConfigChannel+0x2ac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_ConfigChannel+0x28>
 8001cfa:	f640 219c 	movw	r1, #2716	; 0xa9c
 8001cfe:	48a3      	ldr	r0, [pc, #652]	; (8001f8c <HAL_ADC_ConfigChannel+0x2b0>)
 8001d00:	f7fe fed1 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d04f      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d04b      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b12      	cmp	r3, #18
 8001d1a:	d047      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b18      	cmp	r3, #24
 8001d22:	d043      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2c:	d03e      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001d36:	d039      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001d40:	d034      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8001d4a:	d02f      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001d54:	d02a      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d5e:	d025      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f240 2206 	movw	r2, #518	; 0x206
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d01f      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001d74:	d01a      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f240 2212 	movw	r2, #530	; 0x212
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d014      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8001d8a:	d00f      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d94:	d00a      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f240 3206 	movw	r2, #774	; 0x306
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xd0>
 8001da2:	f640 219d 	movw	r1, #2717	; 0xa9d
 8001da6:	4879      	ldr	r0, [pc, #484]	; (8001f8c <HAL_ADC_ConfigChannel+0x2b0>)
 8001da8:	f7fe fe7d 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d01c      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d018      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d014      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d010      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d00c      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b06      	cmp	r3, #6
 8001de2:	d008      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b07      	cmp	r3, #7
 8001dea:	d004      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x11a>
 8001dec:	f640 219e 	movw	r1, #2718	; 0xa9e
 8001df0:	4866      	ldr	r0, [pc, #408]	; (8001f8c <HAL_ADC_ConfigChannel+0x2b0>)
 8001df2:	f7fe fe58 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001dfc:	d009      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x136>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4a63      	ldr	r2, [pc, #396]	; (8001f90 <HAL_ADC_ConfigChannel+0x2b4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x136>
 8001e08:	f640 219f 	movw	r1, #2719	; 0xa9f
 8001e0c:	485f      	ldr	r0, [pc, #380]	; (8001f8c <HAL_ADC_ConfigChannel+0x2b0>)
 8001e0e:	f7fe fe4a 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d014      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x168>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x168>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d00c      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x168>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d008      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x168>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d004      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x168>
 8001e3a:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8001e3e:	4853      	ldr	r0, [pc, #332]	; (8001f8c <HAL_ADC_ConfigChannel+0x2b0>)
 8001e40:	f7fe fe31 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	695c      	ldr	r4, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f997 	bl	8001180 <LL_ADC_GetResolution>
 8001e52:	4603      	mov	r3, r0
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	429c      	cmp	r4, r3
 8001e60:	d904      	bls.n	8001e6c <HAL_ADC_ConfigChannel+0x190>
 8001e62:	f640 21a1 	movw	r1, #2721	; 0xaa1
 8001e66:	4849      	ldr	r0, [pc, #292]	; (8001f8c <HAL_ADC_ConfigChannel+0x2b0>)
 8001e68:	f7fe fe1d 	bl	8000aa6 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d009      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0x1ac>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d104      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1ac>
 8001e7e:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8001e82:	4842      	ldr	r0, [pc, #264]	; (8001f8c <HAL_ADC_ConfigChannel+0x2b0>)
 8001e84:	f7fe fe0f 	bl	8000aa6 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a40      	ldr	r2, [pc, #256]	; (8001f90 <HAL_ADC_ConfigChannel+0x2b4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	f000 80c0 	beq.w	8002014 <HAL_ADC_ConfigChannel+0x338>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <HAL_ADC_ConfigChannel+0x2ac>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f040 80b4 	bne.w	8002008 <HAL_ADC_ConfigChannel+0x32c>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <HAL_ADC_ConfigChannel+0x2b8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f000 8104 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a39      	ldr	r2, [pc, #228]	; (8001f98 <HAL_ADC_ConfigChannel+0x2bc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	f000 80fe 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a37      	ldr	r2, [pc, #220]	; (8001f9c <HAL_ADC_ConfigChannel+0x2c0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	f000 80f8 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a35      	ldr	r2, [pc, #212]	; (8001fa0 <HAL_ADC_ConfigChannel+0x2c4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f000 80f2 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <HAL_ADC_ConfigChannel+0x2c8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	f000 80ec 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a31      	ldr	r2, [pc, #196]	; (8001fa8 <HAL_ADC_ConfigChannel+0x2cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	f000 80e6 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <HAL_ADC_ConfigChannel+0x2d0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f000 80e0 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <HAL_ADC_ConfigChannel+0x2d4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	f000 80da 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2d8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f000 80d4 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_ADC_ConfigChannel+0x2dc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	f000 80ce 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_ADC_ConfigChannel+0x2e0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	f000 80c8 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <HAL_ADC_ConfigChannel+0x2e4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f000 80c2 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <HAL_ADC_ConfigChannel+0x2e8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	f000 80bc 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f000 80b6 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <HAL_ADC_ConfigChannel+0x2f0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	f000 80b0 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <HAL_ADC_ConfigChannel+0x2f4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f000 80aa 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_ADC_ConfigChannel+0x2f8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	f000 80a4 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_ADC_ConfigChannel+0x2fc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f000 809e 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_ADC_ConfigChannel+0x300>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f000 8098 	beq.w	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001f84:	e02c      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x304>
 8001f86:	bf00      	nop
 8001f88:	50040000 	.word	0x50040000
 8001f8c:	08007a18 	.word	0x08007a18
 8001f90:	407f0000 	.word	0x407f0000
 8001f94:	04300002 	.word	0x04300002
 8001f98:	08600004 	.word	0x08600004
 8001f9c:	0c900008 	.word	0x0c900008
 8001fa0:	10c00010 	.word	0x10c00010
 8001fa4:	14f00020 	.word	0x14f00020
 8001fa8:	19200040 	.word	0x19200040
 8001fac:	1d500080 	.word	0x1d500080
 8001fb0:	21800100 	.word	0x21800100
 8001fb4:	25b00200 	.word	0x25b00200
 8001fb8:	2a000400 	.word	0x2a000400
 8001fbc:	2e300800 	.word	0x2e300800
 8001fc0:	32601000 	.word	0x32601000
 8001fc4:	36902000 	.word	0x36902000
 8001fc8:	3ac04000 	.word	0x3ac04000
 8001fcc:	3ef08000 	.word	0x3ef08000
 8001fd0:	43210000 	.word	0x43210000
 8001fd4:	47520000 	.word	0x47520000
 8001fd8:	4b840000 	.word	0x4b840000
 8001fdc:	80000001 	.word	0x80000001
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4aa9      	ldr	r2, [pc, #676]	; (800228c <HAL_ADC_ConfigChannel+0x5b0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d064      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4aa8      	ldr	r2, [pc, #672]	; (8002290 <HAL_ADC_ConfigChannel+0x5b4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d05f      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4aa6      	ldr	r2, [pc, #664]	; (8002294 <HAL_ADC_ConfigChannel+0x5b8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d05a      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4aa5      	ldr	r2, [pc, #660]	; (8002298 <HAL_ADC_ConfigChannel+0x5bc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d055      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002008:	f640 21aa 	movw	r1, #2730	; 0xaaa
 800200c:	48a3      	ldr	r0, [pc, #652]	; (800229c <HAL_ADC_ConfigChannel+0x5c0>)
 800200e:	f7fe fd4a 	bl	8000aa6 <assert_failed>
 8002012:	e04f      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4aa1      	ldr	r2, [pc, #644]	; (80022a0 <HAL_ADC_ConfigChannel+0x5c4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d04a      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4aa0      	ldr	r2, [pc, #640]	; (80022a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d045      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a9e      	ldr	r2, [pc, #632]	; (80022a8 <HAL_ADC_ConfigChannel+0x5cc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d040      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a9d      	ldr	r2, [pc, #628]	; (80022ac <HAL_ADC_ConfigChannel+0x5d0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d03b      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a9b      	ldr	r2, [pc, #620]	; (80022b0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d036      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a9a      	ldr	r2, [pc, #616]	; (80022b4 <HAL_ADC_ConfigChannel+0x5d8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d031      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a98      	ldr	r2, [pc, #608]	; (80022b8 <HAL_ADC_ConfigChannel+0x5dc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02c      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a97      	ldr	r2, [pc, #604]	; (80022bc <HAL_ADC_ConfigChannel+0x5e0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d027      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a95      	ldr	r2, [pc, #596]	; (80022c0 <HAL_ADC_ConfigChannel+0x5e4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d022      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a94      	ldr	r2, [pc, #592]	; (80022c4 <HAL_ADC_ConfigChannel+0x5e8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01d      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a92      	ldr	r2, [pc, #584]	; (80022c8 <HAL_ADC_ConfigChannel+0x5ec>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a91      	ldr	r2, [pc, #580]	; (80022cc <HAL_ADC_ConfigChannel+0x5f0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a8f      	ldr	r2, [pc, #572]	; (80022d0 <HAL_ADC_ConfigChannel+0x5f4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a8e      	ldr	r2, [pc, #568]	; (80022d4 <HAL_ADC_ConfigChannel+0x5f8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a8c      	ldr	r2, [pc, #560]	; (80022d8 <HAL_ADC_ConfigChannel+0x5fc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x3d8>
 80020aa:	f640 21ae 	movw	r1, #2734	; 0xaae
 80020ae:	487b      	ldr	r0, [pc, #492]	; (800229c <HAL_ADC_ConfigChannel+0x5c0>)
 80020b0:	f7fe fcf9 	bl	8000aa6 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x3e6>
 80020be:	2302      	movs	r3, #2
 80020c0:	e3b7      	b.n	8002832 <HAL_ADC_ConfigChannel+0xb56>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f9f8 	bl	80014c4 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 839c 	bne.w	8002814 <HAL_ADC_ConfigChannel+0xb38>
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f7ff f8bf 	bl	800126c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f9e6 	bl	80014c4 <LL_ADC_REG_IsConversionOngoing>
 80020f8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f9f2 	bl	80014ea <LL_ADC_INJ_IsConversionOngoing>
 8002106:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 81ce 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x7d4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 81c9 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x7d4>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	461a      	mov	r2, r3
 800212c:	f7ff f8ca 	bl	80012c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d00a      	beq.n	8002168 <HAL_ADC_ConfigChannel+0x48c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6919      	ldr	r1, [r3, #16]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002162:	f7ff f81b 	bl	800119c <LL_ADC_SetOffset>
 8002166:	e1a3      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x7d4>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f838 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10a      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x4b8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f82d 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	f003 021f 	and.w	r2, r3, #31
 8002192:	e01e      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x4f6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f822 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x4ea>
  {
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e004      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x4f4>
  }
  return __builtin_clz(value);
 80021c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x50e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	e018      	b.n	800221c <HAL_ADC_ConfigChannel+0x540>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x536>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e004      	b.n	800221c <HAL_ADC_ConfigChannel+0x540>
  return __builtin_clz(value);
 8002212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800221c:	429a      	cmp	r2, r3
 800221e:	d106      	bne.n	800222e <HAL_ADC_ConfigChannel+0x552>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fff1 	bl	8001210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe ffd5 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <HAL_ADC_ConfigChannel+0x57e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ffca 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	e046      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x60c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe ffbf 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800227c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d129      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x600>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e02c      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x60a>
 800228c:	c7520000 	.word	0xc7520000
 8002290:	cb840000 	.word	0xcb840000
 8002294:	c75a0000 	.word	0xc75a0000
 8002298:	cb8c0000 	.word	0xcb8c0000
 800229c:	08007a18 	.word	0x08007a18
 80022a0:	04300002 	.word	0x04300002
 80022a4:	08600004 	.word	0x08600004
 80022a8:	0c900008 	.word	0x0c900008
 80022ac:	10c00010 	.word	0x10c00010
 80022b0:	14f00020 	.word	0x14f00020
 80022b4:	19200040 	.word	0x19200040
 80022b8:	1d500080 	.word	0x1d500080
 80022bc:	21800100 	.word	0x21800100
 80022c0:	25b00200 	.word	0x25b00200
 80022c4:	2a000400 	.word	0x2a000400
 80022c8:	2e300800 	.word	0x2e300800
 80022cc:	32601000 	.word	0x32601000
 80022d0:	36902000 	.word	0x36902000
 80022d4:	3ac04000 	.word	0x3ac04000
 80022d8:	3ef08000 	.word	0x3ef08000
  return __builtin_clz(value);
 80022dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x624>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	e018      	b.n	8002332 <HAL_ADC_ConfigChannel+0x656>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800231c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e004      	b.n	8002332 <HAL_ADC_ConfigChannel+0x656>
  return __builtin_clz(value);
 8002328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002332:	429a      	cmp	r2, r3
 8002334:	d106      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x668>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe ff66 	bl	8001210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2102      	movs	r1, #2
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe ff4a 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x694>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff3f 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	e01e      	b.n	80023ae <HAL_ADC_ConfigChannel+0x6d2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe ff34 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800238e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x6c6>
    return 32U;
 800239e:	2320      	movs	r3, #32
 80023a0:	e004      	b.n	80023ac <HAL_ADC_ConfigChannel+0x6d0>
  return __builtin_clz(value);
 80023a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x6ea>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	e016      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x718>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x70e>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e004      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x718>
  return __builtin_clz(value);
 80023ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x72a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe ff05 	bl	8001210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2103      	movs	r1, #3
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fee9 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x756>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2103      	movs	r1, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fede 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e017      	b.n	8002462 <HAL_ADC_ConfigChannel+0x786>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2103      	movs	r1, #3
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fed3 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800244a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800244e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x77c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x784>
  return __builtin_clz(value);
 8002458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ADC_ConfigChannel+0x79e>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	e011      	b.n	800249e <HAL_ADC_ConfigChannel+0x7c2>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x7ba>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x7c2>
  return __builtin_clz(value);
 8002496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x7d4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe feb0 	bl	8001210 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe ffcb 	bl	8001450 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 813f 	bne.w	8002740 <HAL_ADC_ConfigChannel+0xa64>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7fe ff24 	bl	800131c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a8e      	ldr	r2, [pc, #568]	; (8002714 <HAL_ADC_ConfigChannel+0xa38>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 8130 	bne.w	8002740 <HAL_ADC_ConfigChannel+0xa64>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x82c>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e019      	b.n	800253c <HAL_ADC_ConfigChannel+0x860>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x848>
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e003      	b.n	800252c <HAL_ADC_ConfigChannel+0x850>
  return __builtin_clz(value);
 8002524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b09      	cmp	r3, #9
 8002534:	bf94      	ite	ls
 8002536:	2301      	movls	r3, #1
 8002538:	2300      	movhi	r3, #0
 800253a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253c:	2b00      	cmp	r3, #0
 800253e:	d079      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x958>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x880>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	069b      	lsls	r3, r3, #26
 8002556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255a:	e015      	b.n	8002588 <HAL_ADC_ConfigChannel+0x8ac>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800256a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800256e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x89c>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x8a4>
  return __builtin_clz(value);
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x8cc>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	e017      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x8fc>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x8e8>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 80025c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x922>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	051b      	lsls	r3, r3, #20
 80025fc:	e018      	b.n	8002630 <HAL_ADC_ConfigChannel+0x954>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x93e>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e003      	b.n	8002622 <HAL_ADC_ConfigChannel+0x946>
  return __builtin_clz(value);
 800261a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002630:	430b      	orrs	r3, r1
 8002632:	e080      	b.n	8002736 <HAL_ADC_ConfigChannel+0xa5a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x974>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	069b      	lsls	r3, r3, #26
 800264a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264e:	e015      	b.n	800267c <HAL_ADC_ConfigChannel+0x9a0>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x990>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <HAL_ADC_ConfigChannel+0x998>
  return __builtin_clz(value);
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	069b      	lsls	r3, r3, #26
 8002678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_ConfigChannel+0x9c0>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	e017      	b.n	80026cc <HAL_ADC_ConfigChannel+0x9f0>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	61fb      	str	r3, [r7, #28]
  return result;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x9dc>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x9e4>
  return __builtin_clz(value);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2101      	movs	r1, #1
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	ea42 0103 	orr.w	r1, r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0xa1c>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	3b1e      	subs	r3, #30
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f6:	e01d      	b.n	8002734 <HAL_ADC_ConfigChannel+0xa58>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	613b      	str	r3, [r7, #16]
  return result;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <HAL_ADC_ConfigChannel+0xa3c>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e005      	b.n	8002720 <HAL_ADC_ConfigChannel+0xa44>
 8002714:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	3b1e      	subs	r3, #30
 800272e:	051b      	lsls	r3, r3, #20
 8002730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002734:	430b      	orrs	r3, r1
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	6892      	ldr	r2, [r2, #8]
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fdc2 	bl	80012c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_ADC_ConfigChannel+0xb60>)
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d06c      	beq.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800274c:	483c      	ldr	r0, [pc, #240]	; (8002840 <HAL_ADC_ConfigChannel+0xb64>)
 800274e:	f7fe fd09 	bl	8001164 <LL_ADC_GetCommonPathInternalCh>
 8002752:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <HAL_ADC_ConfigChannel+0xb68>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d127      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0xad4>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d121      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0xad4>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a35      	ldr	r2, [pc, #212]	; (8002848 <HAL_ADC_ConfigChannel+0xb6c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d157      	bne.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800277a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800277e:	4619      	mov	r1, r3
 8002780:	482f      	ldr	r0, [pc, #188]	; (8002840 <HAL_ADC_ConfigChannel+0xb64>)
 8002782:	f7fe fcdc 	bl	800113e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_ADC_ConfigChannel+0xb70>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	4a30      	ldr	r2, [pc, #192]	; (8002850 <HAL_ADC_ConfigChannel+0xb74>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_ConfigChannel+0xacc>
          {
            wait_loop_index--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0xac6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ae:	e03a      	b.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_ADC_ConfigChannel+0xb78>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d113      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0xb06>
 80027ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0xb06>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_ADC_ConfigChannel+0xb6c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d12a      	bne.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d8:	4619      	mov	r1, r3
 80027da:	4819      	ldr	r0, [pc, #100]	; (8002840 <HAL_ADC_ConfigChannel+0xb64>)
 80027dc:	f7fe fcaf 	bl	800113e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e0:	e021      	b.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_ADC_ConfigChannel+0xb7c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d11c      	bne.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d116      	bne.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_ADC_ConfigChannel+0xb6c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d111      	bne.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280a:	4619      	mov	r1, r3
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <HAL_ADC_ConfigChannel+0xb64>)
 800280e:	f7fe fc96 	bl	800113e <LL_ADC_SetCommonPathInternalCh>
 8002812:	e008      	b.n	8002826 <HAL_ADC_ConfigChannel+0xb4a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800282e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002832:	4618      	mov	r0, r3
 8002834:	37dc      	adds	r7, #220	; 0xdc
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	80080000 	.word	0x80080000
 8002840:	50040300 	.word	0x50040300
 8002844:	c7520000 	.word	0xc7520000
 8002848:	50040000 	.word	0x50040000
 800284c:	20000000 	.word	0x20000000
 8002850:	053e2d63 	.word	0x053e2d63
 8002854:	cb840000 	.word	0xcb840000
 8002858:	80000001 	.word	0x80000001

0800285c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fdf1 	bl	8001450 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d14d      	bne.n	8002910 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <ADC_Enable+0xc0>)
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	f043 0210 	orr.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e039      	b.n	8002912 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fdac 	bl	8001400 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fc06 	bl	80010b8 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ae:	e028      	b.n	8002902 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fdcb 	bl	8001450 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fd9b 	bl	8001400 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ca:	f7fe fbf5 	bl	80010b8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d914      	bls.n	8002902 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d00d      	beq.n	8002902 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e007      	b.n	8002912 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d1cf      	bne.n	80028b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	8000003f 	.word	0x8000003f

08002920 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fda2 	bl	8001476 <LL_ADC_IsDisableOngoing>
 8002932:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fd89 	bl	8001450 <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d047      	beq.n	80029d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d144      	bne.n	80029d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030d 	and.w	r3, r3, #13
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10c      	bne.n	8002972 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fd63 	bl	8001428 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2203      	movs	r2, #3
 8002968:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800296a:	f7fe fba5 	bl	80010b8 <HAL_GetTick>
 800296e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002970:	e029      	b.n	80029c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e023      	b.n	80029d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800298e:	f7fe fb93 	bl	80010b8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d914      	bls.n	80029c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f043 0210 	orr.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e007      	b.n	80029d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1dc      	bne.n	800298e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d14b      	bne.n	8002a90 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d021      	beq.n	8002a56 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fc15 	bl	8001246 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d12b      	bne.n	8002a88 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d11f      	bne.n	8002a88 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
 8002a54:	e018      	b.n	8002a88 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7fd fd1b 	bl	80004c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a8e:	e00e      	b.n	8002aae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff f913 	bl	8001cc8 <HAL_ADC_ErrorCallback>
}
 8002aa2:	e004      	b.n	8002aae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7fd fd1b 	bl	8000500 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff f8e5 	bl	8001cc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <LL_ADC_StartCalibration>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b4c:	d101      	bne.n	8002b52 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <HAL_ADCEx_Calibration_Start+0xe8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <HAL_ADCEx_Calibration_Start+0x20>
 8002b78:	2186      	movs	r1, #134	; 0x86
 8002b7a:	4834      	ldr	r0, [pc, #208]	; (8002c4c <HAL_ADCEx_Calibration_Start+0xec>)
 8002b7c:	f7fd ff93 	bl	8000aa6 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b7f      	cmp	r3, #127	; 0x7f
 8002b84:	d007      	beq.n	8002b96 <HAL_ADCEx_Calibration_Start+0x36>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <HAL_ADCEx_Calibration_Start+0xf0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <HAL_ADCEx_Calibration_Start+0x36>
 8002b8e:	2187      	movs	r1, #135	; 0x87
 8002b90:	482e      	ldr	r0, [pc, #184]	; (8002c4c <HAL_ADCEx_Calibration_Start+0xec>)
 8002b92:	f7fd ff88 	bl	8000aa6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADCEx_Calibration_Start+0x44>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e04d      	b.n	8002c40 <HAL_ADCEx_Calibration_Start+0xe0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff feb7 	bl	8002920 <ADC_Disable>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d136      	bne.n	8002c2a <HAL_ADCEx_Calibration_Start+0xca>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc4:	f023 0302 	bic.w	r3, r3, #2
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff95 	bl	8002b06 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bdc:	e014      	b.n	8002c08 <HAL_ADCEx_Calibration_Start+0xa8>
    {
      wait_loop_index++;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3301      	adds	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002bea:	d30d      	bcc.n	8002c08 <HAL_ADCEx_Calibration_Start+0xa8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	f023 0312 	bic.w	r3, r3, #18
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e01b      	b.n	8002c40 <HAL_ADCEx_Calibration_Start+0xe0>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff93 	bl	8002b38 <LL_ADC_IsCalibrationOnGoing>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e2      	bne.n	8002bde <HAL_ADCEx_Calibration_Start+0x7e>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
 8002c28:	e005      	b.n	8002c36 <HAL_ADCEx_Calibration_Start+0xd6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	50040000 	.word	0x50040000
 8002c4c:	08007a50 	.word	0x08007a50
 8002c50:	407f0000 	.word	0x407f0000

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db0a      	blt.n	8002d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	490c      	ldr	r1, [pc, #48]	; (8002d40 <__NVIC_SetPriority+0x4c>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d1c:	e00a      	b.n	8002d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4908      	ldr	r1, [pc, #32]	; (8002d44 <__NVIC_SetPriority+0x50>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	761a      	strb	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	bf28      	it	cs
 8002d66:	2304      	movcs	r3, #4
 8002d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d902      	bls.n	8002d78 <NVIC_EncodePriority+0x30>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b03      	subs	r3, #3
 8002d76:	e000      	b.n	8002d7a <NVIC_EncodePriority+0x32>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43d9      	mvns	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	4313      	orrs	r3, r2
         );
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc0:	d301      	bcc.n	8002dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00f      	b.n	8002de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <SysTick_Config+0x40>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dce:	210f      	movs	r1, #15
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f7ff ff8e 	bl	8002cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <SysTick_Config+0x40>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <SysTick_Config+0x40>)
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010

08002df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b07      	cmp	r3, #7
 8002e00:	d00f      	beq.n	8002e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d00c      	beq.n	8002e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d009      	beq.n	8002e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d006      	beq.n	8002e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d003      	beq.n	8002e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e1a:	21a7      	movs	r1, #167	; 0xa7
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002e1e:	f7fd fe42 	bl	8000aa6 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff16 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	08007a8c 	.word	0x08007a8c

08002e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d903      	bls.n	8002e54 <HAL_NVIC_SetPriority+0x20>
 8002e4c:	21bf      	movs	r1, #191	; 0xbf
 8002e4e:	480e      	ldr	r0, [pc, #56]	; (8002e88 <HAL_NVIC_SetPriority+0x54>)
 8002e50:	f7fd fe29 	bl	8000aa6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d903      	bls.n	8002e62 <HAL_NVIC_SetPriority+0x2e>
 8002e5a:	21c0      	movs	r1, #192	; 0xc0
 8002e5c:	480a      	ldr	r0, [pc, #40]	; (8002e88 <HAL_NVIC_SetPriority+0x54>)
 8002e5e:	f7fd fe22 	bl	8000aa6 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e62:	f7ff ff1b 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002e66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	6978      	ldr	r0, [r7, #20]
 8002e6e:	f7ff ff6b 	bl	8002d48 <NVIC_EncodePriority>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff3a 	bl	8002cf4 <__NVIC_SetPriority>
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	08007a8c 	.word	0x08007a8c

08002e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	da03      	bge.n	8002ea6 <HAL_NVIC_EnableIRQ+0x1a>
 8002e9e:	21d3      	movs	r1, #211	; 0xd3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <HAL_NVIC_EnableIRQ+0x2c>)
 8002ea2:	f7fd fe00 	bl	8000aa6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff04 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	08007a8c 	.word	0x08007a8c

08002ebc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff73 	bl	8002db0 <SysTick_Config>
 8002eca:	4603      	mov	r3, r0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01e      	b.n	8002f24 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HAL_DAC_Init+0x58>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_DAC_Init+0x26>
 8002ef0:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <HAL_DAC_Init+0x5c>)
 8002ef6:	f7fd fdd6 	bl	8000aa6 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd fe80 	bl	8000c10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40007400 	.word	0x40007400
 8002f30:	08007ac8 	.word	0x08007ac8

08002f34 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_DAC_Start+0x20>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d004      	beq.n	8002f54 <HAL_DAC_Start+0x20>
 8002f4a:	f240 2129 	movw	r1, #553	; 0x229
 8002f4e:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <HAL_DAC_Start+0xac>)
 8002f50:	f7fd fda9 	bl	8000aa6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	795b      	ldrb	r3, [r3, #5]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_DAC_Start+0x2c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e03b      	b.n	8002fd8 <HAL_DAC_Start+0xa4>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <HAL_DAC_Start+0x76>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d118      	bne.n	8002fca <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	e00f      	b.n	8002fca <HAL_DAC_Start+0x96>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb8:	d107      	bne.n	8002fca <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0202 	orr.w	r2, r2, #2
 8002fc8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	08007ac8 	.word	0x08007ac8

08002fe4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_DAC_Start_DMA+0x28>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d004      	beq.n	800300c <HAL_DAC_Start_DMA+0x28>
 8003002:	f240 3103 	movw	r1, #771	; 0x303
 8003006:	4863      	ldr	r0, [pc, #396]	; (8003194 <HAL_DAC_Start_DMA+0x1b0>)
 8003008:	f7fd fd4d 	bl	8000aa6 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_DAC_Start_DMA+0x44>
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d007      	beq.n	8003028 <HAL_DAC_Start_DMA+0x44>
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d004      	beq.n	8003028 <HAL_DAC_Start_DMA+0x44>
 800301e:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003022:	485c      	ldr	r0, [pc, #368]	; (8003194 <HAL_DAC_Start_DMA+0x1b0>)
 8003024:	f7fd fd3f 	bl	8000aa6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	795b      	ldrb	r3, [r3, #5]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_DAC_Start_DMA+0x50>
 8003030:	2302      	movs	r3, #2
 8003032:	e0ab      	b.n	800318c <HAL_DAC_Start_DMA+0x1a8>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2202      	movs	r2, #2
 800303e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12f      	bne.n	80030a6 <HAL_DAC_Start_DMA+0xc2>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4a53      	ldr	r2, [pc, #332]	; (8003198 <HAL_DAC_Start_DMA+0x1b4>)
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	4a52      	ldr	r2, [pc, #328]	; (800319c <HAL_DAC_Start_DMA+0x1b8>)
 8003054:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4a51      	ldr	r2, [pc, #324]	; (80031a0 <HAL_DAC_Start_DMA+0x1bc>)
 800305c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800306c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d013      	beq.n	800309c <HAL_DAC_Start_DMA+0xb8>
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	2b08      	cmp	r3, #8
 8003078:	d845      	bhi.n	8003106 <HAL_DAC_Start_DMA+0x122>
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_DAC_Start_DMA+0xa4>
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d005      	beq.n	8003092 <HAL_DAC_Start_DMA+0xae>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003086:	e03e      	b.n	8003106 <HAL_DAC_Start_DMA+0x122>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	613b      	str	r3, [r7, #16]
        break;
 8003090:	e03c      	b.n	800310c <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	330c      	adds	r3, #12
 8003098:	613b      	str	r3, [r7, #16]
        break;
 800309a:	e037      	b.n	800310c <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3310      	adds	r3, #16
 80030a2:	613b      	str	r3, [r7, #16]
        break;
 80030a4:	e032      	b.n	800310c <HAL_DAC_Start_DMA+0x128>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4a3e      	ldr	r2, [pc, #248]	; (80031a4 <HAL_DAC_Start_DMA+0x1c0>)
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a3d      	ldr	r2, [pc, #244]	; (80031a8 <HAL_DAC_Start_DMA+0x1c4>)
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <HAL_DAC_Start_DMA+0x1c8>)
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030cc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d013      	beq.n	80030fc <HAL_DAC_Start_DMA+0x118>
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d817      	bhi.n	800310a <HAL_DAC_Start_DMA+0x126>
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_DAC_Start_DMA+0x104>
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d005      	beq.n	80030f2 <HAL_DAC_Start_DMA+0x10e>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80030e6:	e010      	b.n	800310a <HAL_DAC_Start_DMA+0x126>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3314      	adds	r3, #20
 80030ee:	613b      	str	r3, [r7, #16]
        break;
 80030f0:	e00c      	b.n	800310c <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3318      	adds	r3, #24
 80030f8:	613b      	str	r3, [r7, #16]
        break;
 80030fa:	e007      	b.n	800310c <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	331c      	adds	r3, #28
 8003102:	613b      	str	r3, [r7, #16]
        break;
 8003104:	e002      	b.n	800310c <HAL_DAC_Start_DMA+0x128>
        break;
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <HAL_DAC_Start_DMA+0x128>
        break;
 800310a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d111      	bne.n	8003136 <HAL_DAC_Start_DMA+0x152>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003120:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6898      	ldr	r0, [r3, #8]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	f000 fcec 	bl	8003b08 <HAL_DMA_Start_IT>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]
 8003134:	e010      	b.n	8003158 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003144:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	68d8      	ldr	r0, [r3, #12]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	f000 fcda 	bl	8003b08 <HAL_DMA_Start_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10c      	bne.n	800317e <HAL_DAC_Start_DMA+0x19a>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e005      	b.n	800318a <HAL_DAC_Start_DMA+0x1a6>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800318a:	7dfb      	ldrb	r3, [r7, #23]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	08007ac8 	.word	0x08007ac8
 8003198:	0800353d 	.word	0x0800353d
 800319c:	0800355f 	.word	0x0800355f
 80031a0:	0800357b 	.word	0x0800357b
 80031a4:	0800372d 	.word	0x0800372d
 80031a8:	0800374f 	.word	0x0800374f
 80031ac:	0800376b 	.word	0x0800376b

080031b0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]

  /* Check the DAC parameters */
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d018      	beq.n	8003236 <HAL_DAC_ConfigChannel+0x4a>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b24      	cmp	r3, #36	; 0x24
 800320a:	d014      	beq.n	8003236 <HAL_DAC_ConfigChannel+0x4a>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d010      	beq.n	8003236 <HAL_DAC_ConfigChannel+0x4a>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b14      	cmp	r3, #20
 800321a:	d00c      	beq.n	8003236 <HAL_DAC_ConfigChannel+0x4a>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b34      	cmp	r3, #52	; 0x34
 8003222:	d008      	beq.n	8003236 <HAL_DAC_ConfigChannel+0x4a>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b3c      	cmp	r3, #60	; 0x3c
 800322a:	d004      	beq.n	8003236 <HAL_DAC_ConfigChannel+0x4a>
 800322c:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8003230:	485d      	ldr	r0, [pc, #372]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 8003232:	f7fd fc38 	bl	8000aa6 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_DAC_ConfigChannel+0x64>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d004      	beq.n	8003250 <HAL_DAC_ConfigChannel+0x64>
 8003246:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 800324a:	4857      	ldr	r0, [pc, #348]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 800324c:	f7fd fc2b 	bl	8000aa6 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_DAC_ConfigChannel+0x7e>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d004      	beq.n	800326a <HAL_DAC_ConfigChannel+0x7e>
 8003260:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8003264:	4850      	ldr	r0, [pc, #320]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 8003266:	f7fd fc1e 	bl	8000aa6 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_DAC_ConfigChannel+0x98>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d004      	beq.n	8003284 <HAL_DAC_ConfigChannel+0x98>
 800327a:	f240 41c2 	movw	r1, #1218	; 0x4c2
 800327e:	484a      	ldr	r0, [pc, #296]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 8003280:	f7fd fc11 	bl	8000aa6 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <HAL_DAC_ConfigChannel+0xb2>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	2b1f      	cmp	r3, #31
 8003292:	d904      	bls.n	800329e <HAL_DAC_ConfigChannel+0xb2>
 8003294:	f240 41c5 	movw	r1, #1221	; 0x4c5
 8003298:	4843      	ldr	r0, [pc, #268]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 800329a:	f7fd fc04 	bl	8000aa6 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_DAC_ConfigChannel+0xcc>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d004      	beq.n	80032b8 <HAL_DAC_ConfigChannel+0xcc>
 80032ae:	f240 41c7 	movw	r1, #1223	; 0x4c7
 80032b2:	483d      	ldr	r0, [pc, #244]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 80032b4:	f7fd fbf7 	bl	8000aa6 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d11c      	bne.n	80032fa <HAL_DAC_ConfigChannel+0x10e>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c8:	d304      	bcc.n	80032d4 <HAL_DAC_ConfigChannel+0xe8>
 80032ca:	f240 41ca 	movw	r1, #1226	; 0x4ca
 80032ce:	4836      	ldr	r0, [pc, #216]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 80032d0:	f7fd fbe9 	bl	8000aa6 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d304      	bcc.n	80032e8 <HAL_DAC_ConfigChannel+0xfc>
 80032de:	f240 41cb 	movw	r1, #1227	; 0x4cb
 80032e2:	4831      	ldr	r0, [pc, #196]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 80032e4:	f7fd fbdf 	bl	8000aa6 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	2bff      	cmp	r3, #255	; 0xff
 80032ee:	d904      	bls.n	80032fa <HAL_DAC_ConfigChannel+0x10e>
 80032f0:	f240 41cc 	movw	r1, #1228	; 0x4cc
 80032f4:	482c      	ldr	r0, [pc, #176]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 80032f6:	f7fd fbd6 	bl	8000aa6 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_DAC_ConfigChannel+0x124>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d004      	beq.n	8003310 <HAL_DAC_ConfigChannel+0x124>
 8003306:	f240 41ce 	movw	r1, #1230	; 0x4ce
 800330a:	4827      	ldr	r0, [pc, #156]	; (80033a8 <HAL_DAC_ConfigChannel+0x1bc>)
 800330c:	f7fd fbcb 	bl	8000aa6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	795b      	ldrb	r3, [r3, #5]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_DAC_ConfigChannel+0x130>
 8003318:	2302      	movs	r3, #2
 800331a:	e10a      	b.n	8003532 <HAL_DAC_ConfigChannel+0x346>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2202      	movs	r2, #2
 8003326:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d177      	bne.n	8003420 <HAL_DAC_ConfigChannel+0x234>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003330:	f7fd fec2 	bl	80010b8 <HAL_GetTick>
 8003334:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d137      	bne.n	80033ac <HAL_DAC_ConfigChannel+0x1c0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800333c:	e011      	b.n	8003362 <HAL_DAC_ConfigChannel+0x176>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800333e:	f7fd febb 	bl	80010b8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d90a      	bls.n	8003362 <HAL_DAC_ConfigChannel+0x176>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f043 0208 	orr.w	r2, r3, #8
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2203      	movs	r2, #3
 800335c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0e7      	b.n	8003532 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e6      	bne.n	800333e <HAL_DAC_ConfigChannel+0x152>
        }
      }
      HAL_Delay(1);
 8003370:	2001      	movs	r0, #1
 8003372:	f7fd fead 	bl	80010d0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	6992      	ldr	r2, [r2, #24]
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
 8003380:	e021      	b.n	80033c6 <HAL_DAC_ConfigChannel+0x1da>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003382:	f7fd fe99 	bl	80010b8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d90d      	bls.n	80033ac <HAL_DAC_ConfigChannel+0x1c0>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f043 0208 	orr.w	r2, r3, #8
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2203      	movs	r2, #3
 80033a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0c5      	b.n	8003532 <HAL_DAC_ConfigChannel+0x346>
 80033a6:	bf00      	nop
 80033a8:	08007ac8 	.word	0x08007ac8
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dbe5      	blt.n	8003382 <HAL_DAC_ConfigChannel+0x196>
        }
      }
      HAL_Delay(1U);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7fd fe8a 	bl	80010d0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	6992      	ldr	r2, [r2, #24]
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	ea02 0103 	and.w	r1, r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	21ff      	movs	r1, #255	; 0xff
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	ea02 0103 	and.w	r1, r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d11d      	bne.n	8003464 <HAL_DAC_ConfigChannel+0x278>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	221f      	movs	r2, #31
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2207      	movs	r2, #7
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	431a      	orrs	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	400a      	ands	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	f640 72fc 	movw	r2, #4092	; 0xffc
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	22c0      	movs	r2, #192	; 0xc0
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop

0800353c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff fe30 	bl	80031b0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	711a      	strb	r2, [r3, #4]
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fe29 	bl	80031c4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f043 0204 	orr.w	r2, r3, #4
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff fe1f 	bl	80031d8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	711a      	strb	r2, [r3, #4]
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_DACEx_TriangleWaveGenerate+0x20>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d003      	beq.n	80035c8 <HAL_DACEx_TriangleWaveGenerate+0x20>
 80035c0:	217a      	movs	r1, #122	; 0x7a
 80035c2:	484a      	ldr	r0, [pc, #296]	; (80036ec <HAL_DACEx_TriangleWaveGenerate+0x144>)
 80035c4:	f7fd fa6f 	bl	8000aa6 <assert_failed>
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d05e      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d4:	d05a      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d056      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035e4:	d052      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ec:	d04e      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80035f4:	d04a      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035fc:	d046      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003604:	d042      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360c:	d03e      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8003614:	d03a      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800361c:	d036      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8003624:	d032      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02f      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d02b      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363a:	d027      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003642:	d023      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d01f      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003652:	d01b      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800365a:	d017      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003662:	d013      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366a:	d00f      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8003672:	d00b      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800367a:	d007      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8003682:	d003      	beq.n	800368c <HAL_DACEx_TriangleWaveGenerate+0xe4>
 8003684:	217b      	movs	r1, #123	; 0x7b
 8003686:	4819      	ldr	r0, [pc, #100]	; (80036ec <HAL_DACEx_TriangleWaveGenerate+0x144>)
 8003688:	f7fd fa0d 	bl	8000aa6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	795b      	ldrb	r3, [r3, #5]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_DACEx_TriangleWaveGenerate+0xf0>
 8003694:	2302      	movs	r3, #2
 8003696:	e024      	b.n	80036e2 <HAL_DACEx_TriangleWaveGenerate+0x13a>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2202      	movs	r2, #2
 80036a2:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	ea02 0103 	and.w	r1, r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	409a      	lsls	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	08007b00 	.word	0x08007b00

080036f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff ffd8 	bl	80036f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	711a      	strb	r2, [r3, #4]
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff ffd1 	bl	8003704 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f043 0204 	orr.w	r2, r3, #4
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff ffc7 	bl	8003718 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	711a      	strb	r2, [r3, #4]
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e19d      	b.n	8003ae6 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a79      	ldr	r2, [pc, #484]	; (8003994 <HAL_DMA_Init+0x1fc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d044      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a77      	ldr	r2, [pc, #476]	; (8003998 <HAL_DMA_Init+0x200>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03f      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a76      	ldr	r2, [pc, #472]	; (800399c <HAL_DMA_Init+0x204>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03a      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a74      	ldr	r2, [pc, #464]	; (80039a0 <HAL_DMA_Init+0x208>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d035      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a73      	ldr	r2, [pc, #460]	; (80039a4 <HAL_DMA_Init+0x20c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d030      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a71      	ldr	r2, [pc, #452]	; (80039a8 <HAL_DMA_Init+0x210>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02b      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a70      	ldr	r2, [pc, #448]	; (80039ac <HAL_DMA_Init+0x214>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d026      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6e      	ldr	r2, [pc, #440]	; (80039b0 <HAL_DMA_Init+0x218>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d021      	beq.n	800383e <HAL_DMA_Init+0xa6>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6d      	ldr	r2, [pc, #436]	; (80039b4 <HAL_DMA_Init+0x21c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01c      	beq.n	800383e <HAL_DMA_Init+0xa6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6b      	ldr	r2, [pc, #428]	; (80039b8 <HAL_DMA_Init+0x220>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d017      	beq.n	800383e <HAL_DMA_Init+0xa6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a6a      	ldr	r2, [pc, #424]	; (80039bc <HAL_DMA_Init+0x224>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d012      	beq.n	800383e <HAL_DMA_Init+0xa6>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a68      	ldr	r2, [pc, #416]	; (80039c0 <HAL_DMA_Init+0x228>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00d      	beq.n	800383e <HAL_DMA_Init+0xa6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a67      	ldr	r2, [pc, #412]	; (80039c4 <HAL_DMA_Init+0x22c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d008      	beq.n	800383e <HAL_DMA_Init+0xa6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_DMA_Init+0x230>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <HAL_DMA_Init+0xa6>
 8003836:	21a4      	movs	r1, #164	; 0xa4
 8003838:	4864      	ldr	r0, [pc, #400]	; (80039cc <HAL_DMA_Init+0x234>)
 800383a:	f7fd f934 	bl	8000aa6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00c      	beq.n	8003860 <HAL_DMA_Init+0xc8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b10      	cmp	r3, #16
 800384c:	d008      	beq.n	8003860 <HAL_DMA_Init+0xc8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003856:	d003      	beq.n	8003860 <HAL_DMA_Init+0xc8>
 8003858:	21a5      	movs	r1, #165	; 0xa5
 800385a:	485c      	ldr	r0, [pc, #368]	; (80039cc <HAL_DMA_Init+0x234>)
 800385c:	f7fd f923 	bl	8000aa6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d007      	beq.n	8003878 <HAL_DMA_Init+0xe0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_DMA_Init+0xe0>
 8003870:	21a6      	movs	r1, #166	; 0xa6
 8003872:	4856      	ldr	r0, [pc, #344]	; (80039cc <HAL_DMA_Init+0x234>)
 8003874:	f7fd f917 	bl	8000aa6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d007      	beq.n	8003890 <HAL_DMA_Init+0xf8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_DMA_Init+0xf8>
 8003888:	21a7      	movs	r1, #167	; 0xa7
 800388a:	4850      	ldr	r0, [pc, #320]	; (80039cc <HAL_DMA_Init+0x234>)
 800388c:	f7fd f90b 	bl	8000aa6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <HAL_DMA_Init+0x11c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a0:	d008      	beq.n	80038b4 <HAL_DMA_Init+0x11c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA_Init+0x11c>
 80038ac:	21a8      	movs	r1, #168	; 0xa8
 80038ae:	4847      	ldr	r0, [pc, #284]	; (80039cc <HAL_DMA_Init+0x234>)
 80038b0:	f7fd f8f9 	bl	8000aa6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <HAL_DMA_Init+0x140>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c4:	d008      	beq.n	80038d8 <HAL_DMA_Init+0x140>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ce:	d003      	beq.n	80038d8 <HAL_DMA_Init+0x140>
 80038d0:	21a9      	movs	r1, #169	; 0xa9
 80038d2:	483e      	ldr	r0, [pc, #248]	; (80039cc <HAL_DMA_Init+0x234>)
 80038d4:	f7fd f8e7 	bl	8000aa6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_DMA_Init+0x158>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d003      	beq.n	80038f0 <HAL_DMA_Init+0x158>
 80038e8:	21aa      	movs	r1, #170	; 0xaa
 80038ea:	4838      	ldr	r0, [pc, #224]	; (80039cc <HAL_DMA_Init+0x234>)
 80038ec:	f7fd f8db 	bl	8000aa6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <HAL_DMA_Init+0x186>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d00d      	beq.n	800391e <HAL_DMA_Init+0x186>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390a:	d008      	beq.n	800391e <HAL_DMA_Init+0x186>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003914:	d003      	beq.n	800391e <HAL_DMA_Init+0x186>
 8003916:	21ab      	movs	r1, #171	; 0xab
 8003918:	482c      	ldr	r0, [pc, #176]	; (80039cc <HAL_DMA_Init+0x234>)
 800391a:	f7fd f8c4 	bl	8000aa6 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01f      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d01b      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d017      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d013      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d00f      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b05      	cmp	r3, #5
 800394c:	d00b      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d007      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b07      	cmp	r3, #7
 800395c:	d003      	beq.n	8003966 <HAL_DMA_Init+0x1ce>
 800395e:	21ad      	movs	r1, #173	; 0xad
 8003960:	481a      	ldr	r0, [pc, #104]	; (80039cc <HAL_DMA_Init+0x234>)
 8003962:	f7fd f8a0 	bl	8000aa6 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_DMA_Init+0x238>)
 800396e:	429a      	cmp	r2, r3
 8003970:	d836      	bhi.n	80039e0 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_DMA_Init+0x23c>)
 800397a:	4413      	add	r3, r2
 800397c:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_DMA_Init+0x240>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	009a      	lsls	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <HAL_DMA_Init+0x244>)
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
 8003990:	e035      	b.n	80039fe <HAL_DMA_Init+0x266>
 8003992:	bf00      	nop
 8003994:	40020008 	.word	0x40020008
 8003998:	4002001c 	.word	0x4002001c
 800399c:	40020030 	.word	0x40020030
 80039a0:	40020044 	.word	0x40020044
 80039a4:	40020058 	.word	0x40020058
 80039a8:	4002006c 	.word	0x4002006c
 80039ac:	40020080 	.word	0x40020080
 80039b0:	40020408 	.word	0x40020408
 80039b4:	4002041c 	.word	0x4002041c
 80039b8:	40020430 	.word	0x40020430
 80039bc:	40020444 	.word	0x40020444
 80039c0:	40020458 	.word	0x40020458
 80039c4:	4002046c 	.word	0x4002046c
 80039c8:	40020480 	.word	0x40020480
 80039cc:	08007b3c 	.word	0x08007b3c
 80039d0:	40020407 	.word	0x40020407
 80039d4:	bffdfff8 	.word	0xbffdfff8
 80039d8:	cccccccd 	.word	0xcccccccd
 80039dc:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_DMA_Init+0x358>)
 80039e8:	4413      	add	r3, r2
 80039ea:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_DMA_Init+0x35c>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a3f      	ldr	r2, [pc, #252]	; (8003af8 <HAL_DMA_Init+0x360>)
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a58:	d039      	beq.n	8003ace <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a27      	ldr	r2, [pc, #156]	; (8003afc <HAL_DMA_Init+0x364>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d11a      	bne.n	8003a9a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a64:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <HAL_DMA_Init+0x368>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f003 031c 	and.w	r3, r3, #28
 8003a70:	210f      	movs	r1, #15
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	4921      	ldr	r1, [pc, #132]	; (8003b00 <HAL_DMA_Init+0x368>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_DMA_Init+0x368>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f003 031c 	and.w	r3, r3, #28
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	491b      	ldr	r1, [pc, #108]	; (8003b00 <HAL_DMA_Init+0x368>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]
 8003a98:	e019      	b.n	8003ace <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_DMA_Init+0x36c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 031c 	and.w	r3, r3, #28
 8003aa6:	210f      	movs	r1, #15
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	4915      	ldr	r1, [pc, #84]	; (8003b04 <HAL_DMA_Init+0x36c>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_DMA_Init+0x36c>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac0:	f003 031c 	and.w	r3, r3, #28
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	490e      	ldr	r1, [pc, #56]	; (8003b04 <HAL_DMA_Init+0x36c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	bffdfbf8 	.word	0xbffdfbf8
 8003af4:	cccccccd 	.word	0xcccccccd
 8003af8:	40020400 	.word	0x40020400
 8003afc:	40020000 	.word	0x40020000
 8003b00:	400200a8 	.word	0x400200a8
 8003b04:	400204a8 	.word	0x400204a8

08003b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_Start_IT+0x20>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b26:	d304      	bcc.n	8003b32 <HAL_DMA_Start_IT+0x2a>
 8003b28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003b2c:	482c      	ldr	r0, [pc, #176]	; (8003be0 <HAL_DMA_Start_IT+0xd8>)
 8003b2e:	f7fc ffba 	bl	8000aa6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA_Start_IT+0x38>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e04b      	b.n	8003bd8 <HAL_DMA_Start_IT+0xd0>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d13a      	bne.n	8003bca <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f961 	bl	8003e40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 020e 	orr.w	r2, r2, #14
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e00f      	b.n	8003bb8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0204 	bic.w	r2, r2, #4
 8003ba6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 020a 	orr.w	r2, r2, #10
 8003bb6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e005      	b.n	8003bd6 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	08007b3c 	.word	0x08007b3c

08003be4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d008      	beq.n	8003c0e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e022      	b.n	8003c54 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 020e 	bic.w	r2, r2, #14
 8003c1c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f003 021c 	and.w	r2, r3, #28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d005      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	e029      	b.n	8003cd8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 020e 	bic.w	r2, r2, #14
 8003c92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	f003 021c 	and.w	r2, r3, #28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
    }
  }
  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f003 031c 	and.w	r3, r3, #28
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d026      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x7a>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d021      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0204 	bic.w	r2, r2, #4
 8003d34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f003 021c 	and.w	r2, r3, #28
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2104      	movs	r1, #4
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d071      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d5a:	e06c      	b.n	8003e36 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f003 031c 	and.w	r3, r3, #28
 8003d64:	2202      	movs	r2, #2
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02e      	beq.n	8003dce <HAL_DMA_IRQHandler+0xec>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d029      	beq.n	8003dce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 020a 	bic.w	r2, r2, #10
 8003d96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f003 021c 	and.w	r2, r3, #28
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	2102      	movs	r1, #2
 8003dae:	fa01 f202 	lsl.w	r2, r1, r2
 8003db2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d038      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dcc:	e033      	b.n	8003e36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 031c 	and.w	r3, r3, #28
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02a      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x156>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d025      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 020e 	bic.w	r2, r2, #14
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f003 021c 	and.w	r2, r3, #28
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
}
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f003 021c 	and.w	r2, r3, #28
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d108      	bne.n	8003e84 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e82:	e007      	b.n	8003e94 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eb4:	d00f      	beq.n	8003ed6 <HAL_GPIO_Init+0x36>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a37      	ldr	r2, [pc, #220]	; (8003f98 <HAL_GPIO_Init+0xf8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_GPIO_Init+0x36>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a36      	ldr	r2, [pc, #216]	; (8003f9c <HAL_GPIO_Init+0xfc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <HAL_GPIO_Init+0x36>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <HAL_GPIO_Init+0x100>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x36>
 8003ece:	21b3      	movs	r1, #179	; 0xb3
 8003ed0:	4834      	ldr	r0, [pc, #208]	; (8003fa4 <HAL_GPIO_Init+0x104>)
 8003ed2:	f7fc fde8 	bl	8000aa6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_GPIO_Init+0x4c>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x54>
 8003eec:	21b4      	movs	r1, #180	; 0xb4
 8003eee:	482d      	ldr	r0, [pc, #180]	; (8003fa4 <HAL_GPIO_Init+0x104>)
 8003ef0:	f7fc fdd9 	bl	8000aa6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d039      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d035      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b11      	cmp	r3, #17
 8003f0a:	d031      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d02d      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b12      	cmp	r3, #18
 8003f1a:	d029      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <HAL_GPIO_Init+0x108>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d024      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_GPIO_Init+0x10c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01f      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_GPIO_Init+0x110>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01a      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_GPIO_Init+0x114>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d015      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_GPIO_Init+0x118>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d010      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_GPIO_Init+0x11c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d007      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b0b      	cmp	r3, #11
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0xd0>
 8003f68:	21b5      	movs	r1, #181	; 0xb5
 8003f6a:	480e      	ldr	r0, [pc, #56]	; (8003fa4 <HAL_GPIO_Init+0x104>)
 8003f6c:	f7fc fd9b 	bl	8000aa6 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 81a8 	beq.w	80042ca <HAL_GPIO_Init+0x42a>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	f000 81a3 	beq.w	80042ca <HAL_GPIO_Init+0x42a>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	f000 819e 	beq.w	80042ca <HAL_GPIO_Init+0x42a>
 8003f8e:	21b6      	movs	r1, #182	; 0xb6
 8003f90:	4804      	ldr	r0, [pc, #16]	; (8003fa4 <HAL_GPIO_Init+0x104>)
 8003f92:	f7fc fd88 	bl	8000aa6 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f96:	e198      	b.n	80042ca <HAL_GPIO_Init+0x42a>
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	48000800 	.word	0x48000800
 8003fa0:	48001c00 	.word	0x48001c00
 8003fa4:	08007b74 	.word	0x08007b74
 8003fa8:	10110000 	.word	0x10110000
 8003fac:	10210000 	.word	0x10210000
 8003fb0:	10310000 	.word	0x10310000
 8003fb4:	10120000 	.word	0x10120000
 8003fb8:	10220000 	.word	0x10220000
 8003fbc:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8176 	beq.w	80042c4 <HAL_GPIO_Init+0x424>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d00b      	beq.n	8003ff8 <HAL_GPIO_Init+0x158>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d007      	beq.n	8003ff8 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fec:	2b11      	cmp	r3, #17
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b12      	cmp	r3, #18
 8003ff6:	d144      	bne.n	8004082 <HAL_GPIO_Init+0x1e2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00f      	beq.n	8004020 <HAL_GPIO_Init+0x180>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d00b      	beq.n	8004020 <HAL_GPIO_Init+0x180>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d007      	beq.n	8004020 <HAL_GPIO_Init+0x180>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x180>
 8004018:	21c6      	movs	r1, #198	; 0xc6
 800401a:	4872      	ldr	r0, [pc, #456]	; (80041e4 <HAL_GPIO_Init+0x344>)
 800401c:	f7fc fd43 	bl	8000aa6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004056:	2201      	movs	r2, #1
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 0201 	and.w	r2, r3, #1
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x222>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b12      	cmp	r3, #18
 80040c0:	d13f      	bne.n	8004142 <HAL_GPIO_Init+0x2a2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040c8:	d00f      	beq.n	80040ea <HAL_GPIO_Init+0x24a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <HAL_GPIO_Init+0x348>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00b      	beq.n	80040ea <HAL_GPIO_Init+0x24a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a45      	ldr	r2, [pc, #276]	; (80041ec <HAL_GPIO_Init+0x34c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <HAL_GPIO_Init+0x24a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a44      	ldr	r2, [pc, #272]	; (80041f0 <HAL_GPIO_Init+0x350>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x24a>
 80040e2:	21ec      	movs	r1, #236	; 0xec
 80040e4:	483f      	ldr	r0, [pc, #252]	; (80041e4 <HAL_GPIO_Init+0x344>)
 80040e6:	f7fc fcde 	bl	8000aa6 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d903      	bls.n	80040fa <HAL_GPIO_Init+0x25a>
 80040f2:	21ed      	movs	r1, #237	; 0xed
 80040f4:	483b      	ldr	r0, [pc, #236]	; (80041e4 <HAL_GPIO_Init+0x344>)
 80040f6:	f7fc fcd6 	bl	8000aa6 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	220f      	movs	r2, #15
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	08da      	lsrs	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3208      	adds	r2, #8
 800413c:	6939      	ldr	r1, [r7, #16]
 800413e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2203      	movs	r2, #3
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0203 	and.w	r2, r3, #3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80a0 	beq.w	80042c4 <HAL_GPIO_Init+0x424>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_GPIO_Init+0x354>)
 8004186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004188:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <HAL_GPIO_Init+0x354>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6613      	str	r3, [r2, #96]	; 0x60
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <HAL_GPIO_Init+0x354>)
 8004192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800419c:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_GPIO_Init+0x358>)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	3302      	adds	r3, #2
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	220f      	movs	r2, #15
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041c6:	d019      	beq.n	80041fc <HAL_GPIO_Init+0x35c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <HAL_GPIO_Init+0x348>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <HAL_GPIO_Init+0x340>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a06      	ldr	r2, [pc, #24]	; (80041ec <HAL_GPIO_Init+0x34c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_GPIO_Init+0x33c>
 80041d8:	2302      	movs	r3, #2
 80041da:	e010      	b.n	80041fe <HAL_GPIO_Init+0x35e>
 80041dc:	2307      	movs	r3, #7
 80041de:	e00e      	b.n	80041fe <HAL_GPIO_Init+0x35e>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e00c      	b.n	80041fe <HAL_GPIO_Init+0x35e>
 80041e4:	08007b74 	.word	0x08007b74
 80041e8:	48000400 	.word	0x48000400
 80041ec:	48000800 	.word	0x48000800
 80041f0:	48001c00 	.word	0x48001c00
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40010000 	.word	0x40010000
 80041fc:	2300      	movs	r3, #0
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	f002 0203 	and.w	r2, r2, #3
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	4093      	lsls	r3, r2
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800420e:	4935      	ldr	r1, [pc, #212]	; (80042e4 <HAL_GPIO_Init+0x444>)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3302      	adds	r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <HAL_GPIO_Init+0x448>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x3a0>
        {
          temp |= iocurrent;
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004240:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <HAL_GPIO_Init+0x448>)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004246:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <HAL_GPIO_Init+0x448>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x3ca>
        {
          temp |= iocurrent;
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800426a:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <HAL_GPIO_Init+0x448>)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_GPIO_Init+0x448>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004294:	4a14      	ldr	r2, [pc, #80]	; (80042e8 <HAL_GPIO_Init+0x448>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_GPIO_Init+0x448>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x41e>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <HAL_GPIO_Init+0x448>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f ae73 	bne.w	8003fc0 <HAL_GPIO_Init+0x120>
  }
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400

080042ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
 80042f8:	4613      	mov	r3, r2
 80042fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80042fc:	887b      	ldrh	r3, [r7, #2]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <HAL_GPIO_WritePin+0x20>
 8004302:	887b      	ldrh	r3, [r7, #2]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_GPIO_WritePin+0x2a>
 800430c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <HAL_GPIO_WritePin+0x5c>)
 8004312:	f7fc fbc8 	bl	8000aa6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004316:	787b      	ldrb	r3, [r7, #1]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_GPIO_WritePin+0x40>
 800431c:	787b      	ldrb	r3, [r7, #1]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d004      	beq.n	800432c <HAL_GPIO_WritePin+0x40>
 8004322:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004326:	4808      	ldr	r0, [pc, #32]	; (8004348 <HAL_GPIO_WritePin+0x5c>)
 8004328:	f7fc fbbd 	bl	8000aa6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800432c:	787b      	ldrb	r3, [r7, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004338:	e002      	b.n	8004340 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	08007b74 	.word	0x08007b74

0800434c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40007000 	.word	0x40007000

0800436c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <HAL_PWREx_GetVoltageRange+0x18>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40007000 	.word	0x40007000

08004388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004396:	d007      	beq.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x20>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d003      	beq.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x20>
 80043a0:	21a8      	movs	r1, #168	; 0xa8
 80043a2:	4826      	ldr	r0, [pc, #152]	; (800443c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80043a4:	f7fc fb7f 	bl	8000aa6 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ae:	d130      	bne.n	8004412 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043bc:	d038      	beq.n	8004430 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043be:	4b20      	ldr	r3, [pc, #128]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80043c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2232      	movs	r2, #50	; 0x32
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	0c9b      	lsrs	r3, r3, #18
 80043e0:	3301      	adds	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e4:	e002      	b.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f8:	d102      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x78>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f2      	bne.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440c:	d110      	bne.n	8004430 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e00f      	b.n	8004432 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441e:	d007      	beq.n	8004430 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004428:	4a05      	ldr	r2, [pc, #20]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800442a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800442e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	08007bb0 	.word	0x08007bb0
 8004440:	40007000 	.word	0x40007000
 8004444:	20000000 	.word	0x20000000
 8004448:	431bde83 	.word	0x431bde83

0800444c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f000 bd65 	b.w	8004f2a <HAL_RCC_OscConfig+0xade>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d028      	beq.n	80044ba <HAL_RCC_OscConfig+0x6e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d122      	bne.n	80044ba <HAL_RCC_OscConfig+0x6e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11c      	bne.n	80044ba <HAL_RCC_OscConfig+0x6e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <HAL_RCC_OscConfig+0x6e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d110      	bne.n	80044ba <HAL_RCC_OscConfig+0x6e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <HAL_RCC_OscConfig+0x6e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_RCC_OscConfig+0x6e>
 80044b0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80044b4:	48a3      	ldr	r0, [pc, #652]	; (8004744 <HAL_RCC_OscConfig+0x2f8>)
 80044b6:	f7fc faf6 	bl	8000aa6 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ba:	4ba3      	ldr	r3, [pc, #652]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c4:	4ba0      	ldr	r3, [pc, #640]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 813f 	beq.w	800475a <HAL_RCC_OscConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_OscConfig+0xaa>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d004      	beq.n	80044f6 <HAL_RCC_OscConfig+0xaa>
 80044ec:	f240 11ab 	movw	r1, #427	; 0x1ab
 80044f0:	4894      	ldr	r0, [pc, #592]	; (8004744 <HAL_RCC_OscConfig+0x2f8>)
 80044f2:	f7fc fad8 	bl	8000aa6 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2bff      	cmp	r3, #255	; 0xff
 80044fc:	d904      	bls.n	8004508 <HAL_RCC_OscConfig+0xbc>
 80044fe:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004502:	4890      	ldr	r0, [pc, #576]	; (8004744 <HAL_RCC_OscConfig+0x2f8>)
 8004504:	f7fc facf 	bl	8000aa6 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d030      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	2b10      	cmp	r3, #16
 8004516:	d02c      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	2b20      	cmp	r3, #32
 800451e:	d028      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	2b30      	cmp	r3, #48	; 0x30
 8004526:	d024      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d020      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	2b50      	cmp	r3, #80	; 0x50
 8004536:	d01c      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	2b60      	cmp	r3, #96	; 0x60
 800453e:	d018      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	2b70      	cmp	r3, #112	; 0x70
 8004546:	d014      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d010      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	2b90      	cmp	r3, #144	; 0x90
 8004556:	d00c      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2ba0      	cmp	r3, #160	; 0xa0
 800455e:	d008      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	2bb0      	cmp	r3, #176	; 0xb0
 8004566:	d004      	beq.n	8004572 <HAL_RCC_OscConfig+0x126>
 8004568:	f240 11ad 	movw	r1, #429	; 0x1ad
 800456c:	4875      	ldr	r0, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x2f8>)
 800456e:	f7fc fa9a 	bl	8000aa6 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_RCC_OscConfig+0x13c>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	f040 808f 	bne.w	800469e <HAL_RCC_OscConfig+0x252>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b01      	cmp	r3, #1
 8004584:	f040 808b 	bne.w	800469e <HAL_RCC_OscConfig+0x252>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004588:	4b6f      	ldr	r3, [pc, #444]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <HAL_RCC_OscConfig+0x156>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f000 bcc4 	b.w	8004f2a <HAL_RCC_OscConfig+0xade>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <HAL_RCC_OscConfig+0x170>
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ba:	e005      	b.n	80045c8 <HAL_RCC_OscConfig+0x17c>
 80045bc:	4b62      	ldr	r3, [pc, #392]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80045be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d224      	bcs.n	8004616 <HAL_RCC_OscConfig+0x1ca>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fef7 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f000 bca4 	b.w	8004f2a <HAL_RCC_OscConfig+0xade>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e2:	4b59      	ldr	r3, [pc, #356]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a58      	ldr	r2, [pc, #352]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80045e8:	f043 0308 	orr.w	r3, r3, #8
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b56      	ldr	r3, [pc, #344]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4953      	ldr	r1, [pc, #332]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004600:	4b51      	ldr	r3, [pc, #324]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	494e      	ldr	r1, [pc, #312]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
 8004614:	e026      	b.n	8004664 <HAL_RCC_OscConfig+0x218>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004616:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a4b      	ldr	r2, [pc, #300]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 800461c:	f043 0308 	orr.w	r3, r3, #8
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b49      	ldr	r3, [pc, #292]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4946      	ldr	r1, [pc, #280]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004634:	4b44      	ldr	r3, [pc, #272]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	4941      	ldr	r1, [pc, #260]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <HAL_RCC_OscConfig+0x218>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 feb6 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_RCC_OscConfig+0x218>
            {
              return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f000 bc63 	b.w	8004f2a <HAL_RCC_OscConfig+0xade>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004664:	f000 fdea 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b37      	ldr	r3, [pc, #220]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	4935      	ldr	r1, [pc, #212]	; (800474c <HAL_RCC_OscConfig+0x300>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	4a33      	ldr	r2, [pc, #204]	; (8004750 <HAL_RCC_OscConfig+0x304>)
 8004682:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004684:	4b33      	ldr	r3, [pc, #204]	; (8004754 <HAL_RCC_OscConfig+0x308>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fc fcc5 	bl	8001018 <HAL_InitTick>
 800468e:	4603      	mov	r3, r0
 8004690:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05f      	beq.n	8004758 <HAL_RCC_OscConfig+0x30c>
        {
          return status;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	f000 bc46 	b.w	8004f2a <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d033      	beq.n	800470e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046a6:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a27      	ldr	r2, [pc, #156]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046b2:	f7fc fd01 	bl	80010b8 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046b8:	e009      	b.n	80046ce <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ba:	f7fc fcfd 	bl	80010b8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d902      	bls.n	80046ce <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	f000 bc2e 	b.w	8004f2a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046ce:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ef      	beq.n	80046ba <HAL_RCC_OscConfig+0x26e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046e0:	f043 0308 	orr.w	r3, r3, #8
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4915      	ldr	r1, [pc, #84]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	4910      	ldr	r1, [pc, #64]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	604b      	str	r3, [r1, #4]
 800470c:	e025      	b.n	800475a <HAL_RCC_OscConfig+0x30e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800471a:	f7fc fccd 	bl	80010b8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x2e8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004722:	f7fc fcc9 	bl	80010b8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e3fa      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <HAL_RCC_OscConfig+0x2fc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x2d6>
 8004740:	e00b      	b.n	800475a <HAL_RCC_OscConfig+0x30e>
 8004742:	bf00      	nop
 8004744:	08007bec 	.word	0x08007bec
 8004748:	40021000 	.word	0x40021000
 800474c:	08007d10 	.word	0x08007d10
 8004750:	20000000 	.word	0x20000000
 8004754:	20000004 	.word	0x20000004
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d07e      	beq.n	8004864 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00e      	beq.n	800478c <HAL_RCC_OscConfig+0x340>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004776:	d009      	beq.n	800478c <HAL_RCC_OscConfig+0x340>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004780:	d004      	beq.n	800478c <HAL_RCC_OscConfig+0x340>
 8004782:	f240 2119 	movw	r1, #537	; 0x219
 8004786:	489b      	ldr	r0, [pc, #620]	; (80049f4 <HAL_RCC_OscConfig+0x5a8>)
 8004788:	f7fc f98d 	bl	8000aa6 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x352>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d10e      	bne.n	80047b6 <HAL_RCC_OscConfig+0x36a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d10b      	bne.n	80047b6 <HAL_RCC_OscConfig+0x36a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479e:	4b96      	ldr	r3, [pc, #600]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d05b      	beq.n	8004862 <HAL_RCC_OscConfig+0x416>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d157      	bne.n	8004862 <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e3b9      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x382>
 80047c0:	4b8d      	ldr	r3, [pc, #564]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a8c      	ldr	r2, [pc, #560]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e01d      	b.n	800480a <HAL_RCC_OscConfig+0x3be>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d6:	d10c      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3a6>
 80047d8:	4b87      	ldr	r3, [pc, #540]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a86      	ldr	r2, [pc, #536]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b84      	ldr	r3, [pc, #528]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a83      	ldr	r2, [pc, #524]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e00b      	b.n	800480a <HAL_RCC_OscConfig+0x3be>
 80047f2:	4b81      	ldr	r3, [pc, #516]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a80      	ldr	r2, [pc, #512]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b7e      	ldr	r3, [pc, #504]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a7d      	ldr	r2, [pc, #500]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d013      	beq.n	800483a <HAL_RCC_OscConfig+0x3ee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fc fc51 	bl	80010b8 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481a:	f7fc fc4d 	bl	80010b8 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x3e0>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e37e      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800482c:	4b72      	ldr	r3, [pc, #456]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x3ce>
 8004838:	e014      	b.n	8004864 <HAL_RCC_OscConfig+0x418>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fc fc3d 	bl	80010b8 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004842:	f7fc fc39 	bl	80010b8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b64      	cmp	r3, #100	; 0x64
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e36a      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004854:	4b68      	ldr	r3, [pc, #416]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x3f6>
 8004860:	e000      	b.n	8004864 <HAL_RCC_OscConfig+0x418>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004862:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d077      	beq.n	8004960 <HAL_RCC_OscConfig+0x514>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_RCC_OscConfig+0x440>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004880:	d004      	beq.n	800488c <HAL_RCC_OscConfig+0x440>
 8004882:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8004886:	485b      	ldr	r0, [pc, #364]	; (80049f4 <HAL_RCC_OscConfig+0x5a8>)
 8004888:	f7fc f90d 	bl	8000aa6 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b1f      	cmp	r3, #31
 8004892:	d904      	bls.n	800489e <HAL_RCC_OscConfig+0x452>
 8004894:	f240 214d 	movw	r1, #589	; 0x24d
 8004898:	4856      	ldr	r0, [pc, #344]	; (80049f4 <HAL_RCC_OscConfig+0x5a8>)
 800489a:	f7fc f904 	bl	8000aa6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_OscConfig+0x464>
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b0c      	cmp	r3, #12
 80048a8:	d119      	bne.n	80048de <HAL_RCC_OscConfig+0x492>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d116      	bne.n	80048de <HAL_RCC_OscConfig+0x492>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b0:	4b51      	ldr	r3, [pc, #324]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_OscConfig+0x47c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e330      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	4948      	ldr	r1, [pc, #288]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048dc:	e040      	b.n	8004960 <HAL_RCC_OscConfig+0x514>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d023      	beq.n	800492e <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e6:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a43      	ldr	r2, [pc, #268]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fc fbe1 	bl	80010b8 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fa:	f7fc fbdd 	bl	80010b8 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e30e      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490c:	4b3a      	ldr	r3, [pc, #232]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x4ae>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004918:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	4934      	ldr	r1, [pc, #208]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
 800492c:	e018      	b.n	8004960 <HAL_RCC_OscConfig+0x514>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a31      	ldr	r2, [pc, #196]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fc fbbd 	bl	80010b8 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004942:	f7fc fbb9 	bl	80010b8 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e2ea      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d04e      	beq.n	8004a0a <HAL_RCC_OscConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCC_OscConfig+0x53a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d004      	beq.n	8004986 <HAL_RCC_OscConfig+0x53a>
 800497c:	f240 218d 	movw	r1, #653	; 0x28d
 8004980:	481c      	ldr	r0, [pc, #112]	; (80049f4 <HAL_RCC_OscConfig+0x5a8>)
 8004982:	f7fc f890 	bl	8000aa6 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x57c>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800498e:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499e:	f7fc fb8b 	bl	80010b8 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fc fb87 	bl	80010b8 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e2b8      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ef      	beq.n	80049a6 <HAL_RCC_OscConfig+0x55a>
 80049c6:	e020      	b.n	8004a0a <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <HAL_RCC_OscConfig+0x5ac>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fc fb6e 	bl	80010b8 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049de:	e00d      	b.n	80049fc <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e0:	f7fc fb6a 	bl	80010b8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d906      	bls.n	80049fc <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e29b      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
 80049f2:	bf00      	nop
 80049f4:	08007bec 	.word	0x08007bec
 80049f8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049fc:	4b84      	ldr	r3, [pc, #528]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1ea      	bne.n	80049e0 <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80b2 	beq.w	8004b7c <HAL_RCC_OscConfig+0x730>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x5f2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_OscConfig+0x5f2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d004      	beq.n	8004a3e <HAL_RCC_OscConfig+0x5f2>
 8004a34:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8004a38:	4876      	ldr	r0, [pc, #472]	; (8004c14 <HAL_RCC_OscConfig+0x7c8>)
 8004a3a:	f7fc f834 	bl	8000aa6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a3e:	4b74      	ldr	r3, [pc, #464]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_RCC_OscConfig+0x61a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	4b71      	ldr	r3, [pc, #452]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	4a70      	ldr	r2, [pc, #448]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6593      	str	r3, [r2, #88]	; 0x58
 8004a56:	4b6e      	ldr	r3, [pc, #440]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a62:	2301      	movs	r3, #1
 8004a64:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a66:	4b6c      	ldr	r3, [pc, #432]	; (8004c18 <HAL_RCC_OscConfig+0x7cc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d118      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x658>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a72:	4b69      	ldr	r3, [pc, #420]	; (8004c18 <HAL_RCC_OscConfig+0x7cc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a68      	ldr	r2, [pc, #416]	; (8004c18 <HAL_RCC_OscConfig+0x7cc>)
 8004a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a7e:	f7fc fb1b 	bl	80010b8 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a86:	f7fc fb17 	bl	80010b8 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e248      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a98:	4b5f      	ldr	r3, [pc, #380]	; (8004c18 <HAL_RCC_OscConfig+0x7cc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x63a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d108      	bne.n	8004abe <HAL_RCC_OscConfig+0x672>
 8004aac:	4b58      	ldr	r3, [pc, #352]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	4a57      	ldr	r2, [pc, #348]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004abc:	e024      	b.n	8004b08 <HAL_RCC_OscConfig+0x6bc>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d110      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x69c>
 8004ac6:	4b52      	ldr	r3, [pc, #328]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	4a50      	ldr	r2, [pc, #320]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	4a4c      	ldr	r2, [pc, #304]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae6:	e00f      	b.n	8004b08 <HAL_RCC_OscConfig+0x6bc>
 8004ae8:	4b49      	ldr	r3, [pc, #292]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	4a48      	ldr	r2, [pc, #288]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af8:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	4a44      	ldr	r2, [pc, #272]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d016      	beq.n	8004b3e <HAL_RCC_OscConfig+0x6f2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fc fad2 	bl	80010b8 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x6e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fc face 	bl	80010b8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1fd      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ed      	beq.n	8004b18 <HAL_RCC_OscConfig+0x6cc>
 8004b3c:	e015      	b.n	8004b6a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fc fabb 	bl	80010b8 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fc fab7 	bl	80010b8 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1e6      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1ed      	bne.n	8004b46 <HAL_RCC_OscConfig+0x6fa>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b6a:	7ffb      	ldrb	r3, [r7, #31]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCC_OscConfig+0x730>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	4a26      	ldr	r2, [pc, #152]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d050      	beq.n	8004c2a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x756>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d004      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x756>
 8004b98:	f240 3145 	movw	r1, #837	; 0x345
 8004b9c:	481d      	ldr	r0, [pc, #116]	; (8004c14 <HAL_RCC_OscConfig+0x7c8>)
 8004b9e:	f7fb ff82 	bl	8000aa6 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb0:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bba:	f7fc fa7d 	bl	80010b8 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x788>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc2:	f7fc fa79 	bl	80010b8 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e1aa      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ef      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x776>
 8004be2:	e022      	b.n	8004c2a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bea:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <HAL_RCC_OscConfig+0x7c4>)
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fc fa60 	bl	80010b8 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bfa:	e00f      	b.n	8004c1c <HAL_RCC_OscConfig+0x7d0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bfc:	f7fc fa5c 	bl	80010b8 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d908      	bls.n	8004c1c <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e18d      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	08007bec 	.word	0x08007bec
 8004c18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c1c:	4ba2      	ldr	r3, [pc, #648]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e8      	bne.n	8004bfc <HAL_RCC_OscConfig+0x7b0>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x800>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d008      	beq.n	8004c4c <HAL_RCC_OscConfig+0x800>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d004      	beq.n	8004c4c <HAL_RCC_OscConfig+0x800>
 8004c42:	f240 316e 	movw	r1, #878	; 0x36e
 8004c46:	4899      	ldr	r0, [pc, #612]	; (8004eac <HAL_RCC_OscConfig+0xa60>)
 8004c48:	f7fb ff2d 	bl	8000aa6 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8169 	beq.w	8004f28 <HAL_RCC_OscConfig+0xadc>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	f040 8131 	bne.w	8004ec2 <HAL_RCC_OscConfig+0xa76>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_OscConfig+0x83e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d00c      	beq.n	8004c8a <HAL_RCC_OscConfig+0x83e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_OscConfig+0x83e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d004      	beq.n	8004c8a <HAL_RCC_OscConfig+0x83e>
 8004c80:	f240 3176 	movw	r1, #886	; 0x376
 8004c84:	4889      	ldr	r0, [pc, #548]	; (8004eac <HAL_RCC_OscConfig+0xa60>)
 8004c86:	f7fb ff0e 	bl	8000aa6 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_OscConfig+0x84e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d904      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x858>
 8004c9a:	f240 3177 	movw	r1, #887	; 0x377
 8004c9e:	4883      	ldr	r0, [pc, #524]	; (8004eac <HAL_RCC_OscConfig+0xa60>)
 8004ca0:	f7fb ff01 	bl	8000aa6 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	2b07      	cmp	r3, #7
 8004caa:	d903      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x868>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	2b56      	cmp	r3, #86	; 0x56
 8004cb2:	d904      	bls.n	8004cbe <HAL_RCC_OscConfig+0x872>
 8004cb4:	f44f 715e 	mov.w	r1, #888	; 0x378
 8004cb8:	487c      	ldr	r0, [pc, #496]	; (8004eac <HAL_RCC_OscConfig+0xa60>)
 8004cba:	f7fb fef4 	bl	8000aa6 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d903      	bls.n	8004cce <HAL_RCC_OscConfig+0x882>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	2b1f      	cmp	r3, #31
 8004ccc:	d904      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x88c>
 8004cce:	f240 317a 	movw	r1, #890	; 0x37a
 8004cd2:	4876      	ldr	r0, [pc, #472]	; (8004eac <HAL_RCC_OscConfig+0xa60>)
 8004cd4:	f7fb fee7 	bl	8000aa6 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d010      	beq.n	8004d02 <HAL_RCC_OscConfig+0x8b6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d00c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x8b6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d008      	beq.n	8004d02 <HAL_RCC_OscConfig+0x8b6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d004      	beq.n	8004d02 <HAL_RCC_OscConfig+0x8b6>
 8004cf8:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8004cfc:	486b      	ldr	r0, [pc, #428]	; (8004eac <HAL_RCC_OscConfig+0xa60>)
 8004cfe:	f7fb fed2 	bl	8000aa6 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d010      	beq.n	8004d2c <HAL_RCC_OscConfig+0x8e0>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d00c      	beq.n	8004d2c <HAL_RCC_OscConfig+0x8e0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d008      	beq.n	8004d2c <HAL_RCC_OscConfig+0x8e0>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d004      	beq.n	8004d2c <HAL_RCC_OscConfig+0x8e0>
 8004d22:	f240 317d 	movw	r1, #893	; 0x37d
 8004d26:	4861      	ldr	r0, [pc, #388]	; (8004eac <HAL_RCC_OscConfig+0xa60>)
 8004d28:	f7fb febd 	bl	8000aa6 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d2c:	4b5e      	ldr	r3, [pc, #376]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 0203 	and.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d12c      	bne.n	8004d9a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d123      	bne.n	8004d9a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d11b      	bne.n	8004d9a <HAL_RCC_OscConfig+0x94e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d113      	bne.n	8004d9a <HAL_RCC_OscConfig+0x94e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d067      	beq.n	8004e6a <HAL_RCC_OscConfig+0xa1e>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d062      	beq.n	8004e66 <HAL_RCC_OscConfig+0xa1a>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004da0:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_OscConfig+0x964>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0bc      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004db0:	4b3d      	ldr	r3, [pc, #244]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a3c      	ldr	r2, [pc, #240]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dbc:	f7fc f97c 	bl	80010b8 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x98a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fc f978 	bl	80010b8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x98a>
              {
                return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0a9      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd6:	4b34      	ldr	r3, [pc, #208]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x978>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de2:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <HAL_RCC_OscConfig+0xa64>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004df2:	3a01      	subs	r2, #1
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	4311      	orrs	r1, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfc:	0212      	lsls	r2, r2, #8
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e04:	0852      	lsrs	r2, r2, #1
 8004e06:	3a01      	subs	r2, #1
 8004e08:	0552      	lsls	r2, r2, #21
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e10:	0852      	lsrs	r2, r2, #1
 8004e12:	3a01      	subs	r2, #1
 8004e14:	0652      	lsls	r2, r2, #25
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e1c:	06d2      	lsls	r2, r2, #27
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	4921      	ldr	r1, [pc, #132]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e26:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e30:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e32:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e3e:	f7fc f93b 	bl	80010b8 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0xa0c>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e46:	f7fc f937 	bl	80010b8 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0xa0c>
              {
                return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e068      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x9fa>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e64:	e060      	b.n	8004f28 <HAL_RCC_OscConfig+0xadc>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e05f      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d158      	bne.n	8004f28 <HAL_RCC_OscConfig+0xadc>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e80:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <HAL_RCC_OscConfig+0xa5c>)
 8004e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e8c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e8e:	f7fc f913 	bl	80010b8 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e94:	e00e      	b.n	8004eb4 <HAL_RCC_OscConfig+0xa68>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fc f90f 	bl	80010b8 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d907      	bls.n	8004eb4 <HAL_RCC_OscConfig+0xa68>
            {
              return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e040      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	08007bec 	.word	0x08007bec
 8004eb0:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0ea      	beq.n	8004e96 <HAL_RCC_OscConfig+0xa4a>
 8004ec0:	e032      	b.n	8004f28 <HAL_RCC_OscConfig+0xadc>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	d02d      	beq.n	8004f24 <HAL_RCC_OscConfig+0xad8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ed4:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <HAL_RCC_OscConfig+0xaa0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ee0:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a13      	ldr	r2, [pc, #76]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a10      	ldr	r2, [pc, #64]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004ef2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fc f8dc 	bl	80010b8 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xaca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fc f8d8 	bl	80010b8 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xaca>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e009      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <HAL_RCC_OscConfig+0xae8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0xab8>
 8004f22:	e001      	b.n	8004f28 <HAL_RCC_OscConfig+0xadc>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0xade>
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000

08004f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e168      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x24>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b0f      	cmp	r3, #15
 8004f5a:	d904      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x2e>
 8004f5c:	f240 4162 	movw	r1, #1122	; 0x462
 8004f60:	4873      	ldr	r0, [pc, #460]	; (8005130 <HAL_RCC_ClockConfig+0x1f8>)
 8004f62:	f7fb fda0 	bl	8000aa6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x56>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d00d      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x56>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x56>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d007      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x56>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d004      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x56>
 8004f84:	f240 4163 	movw	r1, #1123	; 0x463
 8004f88:	4869      	ldr	r0, [pc, #420]	; (8005130 <HAL_RCC_ClockConfig+0x1f8>)
 8004f8a:	f7fb fd8c 	bl	8000aa6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f8e:	4b69      	ldr	r3, [pc, #420]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d910      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9c:	4b65      	ldr	r3, [pc, #404]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 0207 	bic.w	r2, r3, #7
 8004fa4:	4963      	ldr	r1, [pc, #396]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fac:	4b61      	ldr	r3, [pc, #388]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e12f      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d061      	beq.n	800508e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0xbc>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0xbc>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d008      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0xbc>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d004      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0xbc>
 8004fea:	f240 417a 	movw	r1, #1146	; 0x47a
 8004fee:	4850      	ldr	r0, [pc, #320]	; (8005130 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff0:	f7fb fd59 	bl	8000aa6 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ffc:	4b4e      	ldr	r3, [pc, #312]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d121      	bne.n	800504c <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e108      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d107      	bne.n	8005024 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005014:	4b48      	ldr	r3, [pc, #288]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0fc      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800502c:	4b42      	ldr	r3, [pc, #264]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d109      	bne.n	800504c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0f0      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800503c:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0e8      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800504c:	4b3a      	ldr	r3, [pc, #232]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 0203 	bic.w	r2, r3, #3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4937      	ldr	r1, [pc, #220]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505e:	f7fc f82b 	bl	80010b8 <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005064:	e00a      	b.n	800507c <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005066:	f7fc f827 	bl	80010b8 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	; 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e0d0      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507c:	4b2e      	ldr	r3, [pc, #184]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 020c 	and.w	r2, r3, #12
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	429a      	cmp	r2, r3
 800508c:	d1eb      	bne.n	8005066 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d031      	beq.n	80050fe <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d024      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d020      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b90      	cmp	r3, #144	; 0x90
 80050b0:	d01c      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2ba0      	cmp	r3, #160	; 0xa0
 80050b8:	d018      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2bb0      	cmp	r3, #176	; 0xb0
 80050c0:	d014      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2bc0      	cmp	r3, #192	; 0xc0
 80050c8:	d010      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2bd0      	cmp	r3, #208	; 0xd0
 80050d0:	d00c      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2be0      	cmp	r3, #224	; 0xe0
 80050d8:	d008      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2bf0      	cmp	r3, #240	; 0xf0
 80050e0:	d004      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
 80050e2:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 80050e6:	4812      	ldr	r0, [pc, #72]	; (8005130 <HAL_RCC_ClockConfig+0x1f8>)
 80050e8:	f7fb fcdd 	bl	8000aa6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	490f      	ldr	r1, [pc, #60]	; (8005138 <HAL_RCC_ClockConfig+0x200>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050fe:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d217      	bcs.n	800513c <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 0207 	bic.w	r2, r3, #7
 8005114:	4907      	ldr	r1, [pc, #28]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d008      	beq.n	800513c <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e077      	b.n	800521e <HAL_RCC_ClockConfig+0x2e6>
 800512e:	bf00      	nop
 8005130:	08007bec 	.word	0x08007bec
 8005134:	40022000 	.word	0x40022000
 8005138:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d025      	beq.n	8005194 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d018      	beq.n	8005182 <HAL_RCC_ClockConfig+0x24a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005158:	d013      	beq.n	8005182 <HAL_RCC_ClockConfig+0x24a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005162:	d00e      	beq.n	8005182 <HAL_RCC_ClockConfig+0x24a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x24a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005176:	d004      	beq.n	8005182 <HAL_RCC_ClockConfig+0x24a>
 8005178:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 800517c:	482a      	ldr	r0, [pc, #168]	; (8005228 <HAL_RCC_ClockConfig+0x2f0>)
 800517e:	f7fb fc92 	bl	8000aa6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <HAL_RCC_ClockConfig+0x2f4>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4927      	ldr	r1, [pc, #156]	; (800522c <HAL_RCC_ClockConfig+0x2f4>)
 8005190:	4313      	orrs	r3, r2
 8005192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d026      	beq.n	80051ee <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d018      	beq.n	80051da <HAL_RCC_ClockConfig+0x2a2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b0:	d013      	beq.n	80051da <HAL_RCC_ClockConfig+0x2a2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80051ba:	d00e      	beq.n	80051da <HAL_RCC_ClockConfig+0x2a2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051c4:	d009      	beq.n	80051da <HAL_RCC_ClockConfig+0x2a2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051ce:	d004      	beq.n	80051da <HAL_RCC_ClockConfig+0x2a2>
 80051d0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80051d4:	4814      	ldr	r0, [pc, #80]	; (8005228 <HAL_RCC_ClockConfig+0x2f0>)
 80051d6:	f7fb fc66 	bl	8000aa6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <HAL_RCC_ClockConfig+0x2f4>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4910      	ldr	r1, [pc, #64]	; (800522c <HAL_RCC_ClockConfig+0x2f4>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ee:	f000 f825 	bl	800523c <HAL_RCC_GetSysClockFreq>
 80051f2:	4602      	mov	r2, r0
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <HAL_RCC_ClockConfig+0x2f4>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	490c      	ldr	r1, [pc, #48]	; (8005230 <HAL_RCC_ClockConfig+0x2f8>)
 8005200:	5ccb      	ldrb	r3, [r1, r3]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	fa22 f303 	lsr.w	r3, r2, r3
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <HAL_RCC_ClockConfig+0x2fc>)
 800520c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_RCC_ClockConfig+0x300>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fb ff00 	bl	8001018 <HAL_InitTick>
 8005218:	4603      	mov	r3, r0
 800521a:	72fb      	strb	r3, [r7, #11]

  return status;
 800521c:	7afb      	ldrb	r3, [r7, #11]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	08007bec 	.word	0x08007bec
 800522c:	40021000 	.word	0x40021000
 8005230:	08007d10 	.word	0x08007d10
 8005234:	20000000 	.word	0x20000000
 8005238:	20000004 	.word	0x20000004

0800523c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	2300      	movs	r3, #0
 8005248:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524a:	4b3e      	ldr	r3, [pc, #248]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005254:	4b3b      	ldr	r3, [pc, #236]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x34>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b0c      	cmp	r3, #12
 8005268:	d121      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d11e      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005270:	4b34      	ldr	r3, [pc, #208]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800527c:	4b31      	ldr	r3, [pc, #196]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800527e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e005      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <HAL_RCC_GetSysClockFreq+0x10c>)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <HAL_RCC_GetSysClockFreq+0x110>)
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e004      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052c0:	4b23      	ldr	r3, [pc, #140]	; (8005350 <HAL_RCC_GetSysClockFreq+0x114>)
 80052c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d134      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ca:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d003      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0xac>
 80052e0:	e005      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052e2:	4b1a      	ldr	r3, [pc, #104]	; (800534c <HAL_RCC_GetSysClockFreq+0x110>)
 80052e4:	617b      	str	r3, [r7, #20]
      break;
 80052e6:	e005      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_GetSysClockFreq+0x114>)
 80052ea:	617b      	str	r3, [r7, #20]
      break;
 80052ec:	e002      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	617b      	str	r3, [r7, #20]
      break;
 80052f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	3301      	adds	r3, #1
 8005300:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	fb02 f203 	mul.w	r2, r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	0e5b      	lsrs	r3, r3, #25
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	3301      	adds	r3, #1
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005334:	69bb      	ldr	r3, [r7, #24]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	08007d28 	.word	0x08007d28
 800534c:	00f42400 	.word	0x00f42400
 8005350:	007a1200 	.word	0x007a1200

08005354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000000 	.word	0x20000000

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005370:	f7ff fff0 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800538c:	4618      	mov	r0, r3
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	08007d20 	.word	0x08007d20

08005398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800539c:	f7ff ffda 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	0adb      	lsrs	r3, r3, #11
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000
 80053c0:	08007d20 	.word	0x08007d20

080053c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053d0:	4b2a      	ldr	r3, [pc, #168]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053dc:	f7fe ffc6 	bl	800436c <HAL_PWREx_GetVoltageRange>
 80053e0:	6178      	str	r0, [r7, #20]
 80053e2:	e014      	b.n	800540e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	4a24      	ldr	r2, [pc, #144]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ee:	6593      	str	r3, [r2, #88]	; 0x58
 80053f0:	4b22      	ldr	r3, [pc, #136]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053fc:	f7fe ffb6 	bl	800436c <HAL_PWREx_GetVoltageRange>
 8005400:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d10b      	bne.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d919      	bls.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2ba0      	cmp	r3, #160	; 0xa0
 8005420:	d902      	bls.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005422:	2302      	movs	r3, #2
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	e013      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005428:	2301      	movs	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e010      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d902      	bls.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005434:	2303      	movs	r3, #3
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e00a      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d102      	bne.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005440:	2302      	movs	r3, #2
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e004      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b70      	cmp	r3, #112	; 0x70
 800544a:	d101      	bne.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800544c:	2301      	movs	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 0207 	bic.w	r2, r3, #7
 8005458:	4909      	ldr	r1, [pc, #36]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d001      	beq.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000
 8005480:	40022000 	.word	0x40022000

08005484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800548c:	2300      	movs	r3, #0
 800548e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005490:	2300      	movs	r3, #0
 8005492:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d14b      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d145      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d13f      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d139      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d133      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d12d      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d127      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d121      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11b      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d115      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005530:	21cb      	movs	r1, #203	; 0xcb
 8005532:	487d      	ldr	r0, [pc, #500]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005534:	f7fb fab7 	bl	8000aa6 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	2b00      	cmp	r3, #0
 8005542:	d043      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005554:	d008      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800555e:	d003      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8005560:	21d3      	movs	r1, #211	; 0xd3
 8005562:	4871      	ldr	r0, [pc, #452]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005564:	f7fb fa9f 	bl	8000aa6 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005570:	d01a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005572:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005576:	d814      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800557c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005580:	d10f      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005582:	4b6a      	ldr	r3, [pc, #424]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	4a69      	ldr	r2, [pc, #420]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800558e:	e00c      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x126>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fae8 	bl	8005b6c <RCCEx_PLLSAI1_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x126>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	74fb      	strb	r3, [r7, #19]
      break;
 80055a6:	e000      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x126>
      break;
 80055a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b0:	4b5e      	ldr	r3, [pc, #376]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	495b      	ldr	r1, [pc, #364]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055c6:	e001      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	7cfb      	ldrb	r3, [r7, #19]
 80055ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80b8 	beq.w	800574a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055da:	2300      	movs	r3, #0
 80055dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d013      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d00e      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f8:	d009      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005602:	d004      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005604:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005608:	4847      	ldr	r0, [pc, #284]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800560a:	f7fb fa4c 	bl	8000aa6 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800560e:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005624:	4b41      	ldr	r3, [pc, #260]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	4a40      	ldr	r2, [pc, #256]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800562a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562e:	6593      	str	r3, [r2, #88]	; 0x58
 8005630:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800563c:	2301      	movs	r3, #1
 800563e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005640:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a3a      	ldr	r2, [pc, #232]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800564c:	f7fb fd34 	bl	80010b8 <HAL_GetTick>
 8005650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005652:	e009      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005654:	f7fb fd30 	bl	80010b8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d902      	bls.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        ret = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	74fb      	strb	r3, [r7, #19]
        break;
 8005666:	e005      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005668:	4b31      	ldr	r3, [pc, #196]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ef      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      }
    }

    if(ret == HAL_OK)
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d15c      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800567a:	4b2c      	ldr	r3, [pc, #176]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01e      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x246>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	429a      	cmp	r2, r3
 8005694:	d019      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x246>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005696:	4b25      	ldr	r3, [pc, #148]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	4a20      	ldr	r2, [pc, #128]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056b2:	4b1e      	ldr	r3, [pc, #120]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056c2:	4a1a      	ldr	r2, [pc, #104]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d016      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fb fcf0 	bl	80010b8 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056da:	e00b      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fb fcec 	bl	80010b8 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d902      	bls.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
          {
            ret = HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	74fb      	strb	r3, [r7, #19]
            break;
 80056f2:	e006      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ec      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>
          }
        }
      }

      if(ret == HAL_OK)
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005708:	4b08      	ldr	r3, [pc, #32]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	4905      	ldr	r1, [pc, #20]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800571e:	e00b      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	74bb      	strb	r3, [r7, #18]
 8005724:	e008      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005726:	bf00      	nop
 8005728:	08007c24 	.word	0x08007c24
 800572c:	40021000 	.word	0x40021000
 8005730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005738:	7c7b      	ldrb	r3, [r7, #17]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800573e:	4ba5      	ldr	r3, [pc, #660]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005742:	4aa4      	ldr	r2, [pc, #656]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01f      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d00c      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d008      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d004      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005776:	f240 119b 	movw	r1, #411	; 0x19b
 800577a:	4897      	ldr	r0, [pc, #604]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800577c:	f7fb f993 	bl	8000aa6 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005780:	4b94      	ldr	r3, [pc, #592]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	f023 0203 	bic.w	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	4991      	ldr	r1, [pc, #580]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d010      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d00c      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b0c      	cmp	r3, #12
 80057b8:	d008      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d004      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80057c2:	f240 11a5 	movw	r1, #421	; 0x1a5
 80057c6:	4884      	ldr	r0, [pc, #528]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80057c8:	f7fb f96d 	bl	8000aa6 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057cc:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f023 020c 	bic.w	r2, r3, #12
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	497e      	ldr	r1, [pc, #504]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d022      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d013      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d00e      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005808:	d009      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005812:	d004      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005814:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005818:	486f      	ldr	r0, [pc, #444]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800581a:	f7fb f944 	bl	8000aa6 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800581e:	4b6d      	ldr	r3, [pc, #436]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	4969      	ldr	r1, [pc, #420]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800583c:	2b00      	cmp	r3, #0
 800583e:	d022      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x402>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005850:	d00e      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800585a:	d009      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005864:	d004      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005866:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800586a:	485b      	ldr	r0, [pc, #364]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800586c:	f7fb f91b 	bl	8000aa6 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005870:	4b58      	ldr	r3, [pc, #352]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	4955      	ldr	r1, [pc, #340]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588e:	2b00      	cmp	r3, #0
 8005890:	d022      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d013      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d00e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ac:	d009      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058b6:	d004      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80058b8:	f240 11e9 	movw	r1, #489	; 0x1e9
 80058bc:	4846      	ldr	r0, [pc, #280]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80058be:	f7fb f8f2 	bl	8000aa6 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058c2:	4b44      	ldr	r3, [pc, #272]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	4940      	ldr	r1, [pc, #256]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01d      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00e      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f4:	d009      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fe:	d004      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005900:	f240 11f1 	movw	r1, #497	; 0x1f1
 8005904:	4834      	ldr	r0, [pc, #208]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8005906:	f7fb f8ce 	bl	8000aa6 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800590a:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	492e      	ldr	r1, [pc, #184]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01d      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593c:	d009      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005946:	d004      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005948:	f240 2109 	movw	r1, #521	; 0x209
 800594c:	4822      	ldr	r0, [pc, #136]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800594e:	f7fb f8aa 	bl	8000aa6 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005952:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	491c      	ldr	r1, [pc, #112]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d045      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005984:	d00e      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800598e:	d009      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005998:	d004      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800599a:	f240 2122 	movw	r1, #546	; 0x222
 800599e:	480e      	ldr	r0, [pc, #56]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80059a0:	f7fb f881 	bl	8000aa6 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	4908      	ldr	r1, [pc, #32]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c2:	d10b      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x558>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4a02      	ldr	r2, [pc, #8]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80059ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ce:	60d3      	str	r3, [r2, #12]
 80059d0:	e016      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000
 80059d8:	08007c24 	.word	0x08007c24
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f8bd 	bl	8005b6c <RCCEx_PLLSAI1_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059f6:	7cfb      	ldrb	r3, [r7, #19]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
        {
          /* set overall return value */
          status = ret;
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d040      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d013      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a1c:	d00e      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a26:	d009      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a30:	d004      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005a32:	f44f 711a 	mov.w	r1, #616	; 0x268
 8005a36:	4843      	ldr	r0, [pc, #268]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8005a38:	f7fb f835 	bl	8000aa6 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a3c:	4b42      	ldr	r3, [pc, #264]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4a:	493f      	ldr	r1, [pc, #252]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a5c:	4b3a      	ldr	r3, [pc, #232]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a39      	ldr	r2, [pc, #228]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a66:	60d3      	str	r3, [r2, #12]
 8005a68:	e011      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x60a>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a72:	d10c      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f876 	bl	8005b6c <RCCEx_PLLSAI1_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      {
        /* set overall return value */
        status = ret;
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02f      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00e      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aaa:	d009      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ab4:	d004      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005ab6:	f44f 7122 	mov.w	r1, #648	; 0x288
 8005aba:	4822      	ldr	r0, [pc, #136]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8005abc:	f7fa fff3 	bl	8000aa6 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ac0:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	491e      	ldr	r1, [pc, #120]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ade:	d10c      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	2102      	movs	r1, #2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f840 	bl	8005b6c <RCCEx_PLLSAI1_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005af6:	7cfb      	ldrb	r3, [r7, #19]
 8005af8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b16:	d004      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8005b18:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005b1c:	4809      	ldr	r0, [pc, #36]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8005b1e:	f7fa ffc2 	bl	8000aa6 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b30:	4905      	ldr	r1, [pc, #20]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b38:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	08007c24 	.word	0x08007c24
 8005b48:	40021000 	.word	0x40021000

08005b4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	6013      	str	r3, [r2, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40021000 	.word	0x40021000

08005b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d010      	beq.n	8005ba4 <RCCEx_PLLSAI1_Config+0x38>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d00c      	beq.n	8005ba4 <RCCEx_PLLSAI1_Config+0x38>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d008      	beq.n	8005ba4 <RCCEx_PLLSAI1_Config+0x38>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d004      	beq.n	8005ba4 <RCCEx_PLLSAI1_Config+0x38>
 8005b9a:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8005b9e:	48a4      	ldr	r0, [pc, #656]	; (8005e30 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005ba0:	f7fa ff81 	bl	8000aa6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <RCCEx_PLLSAI1_Config+0x48>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d904      	bls.n	8005bbe <RCCEx_PLLSAI1_Config+0x52>
 8005bb4:	f640 3161 	movw	r1, #2913	; 0xb61
 8005bb8:	489d      	ldr	r0, [pc, #628]	; (8005e30 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005bba:	f7fa ff74 	bl	8000aa6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b07      	cmp	r3, #7
 8005bc4:	d903      	bls.n	8005bce <RCCEx_PLLSAI1_Config+0x62>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b56      	cmp	r3, #86	; 0x56
 8005bcc:	d904      	bls.n	8005bd8 <RCCEx_PLLSAI1_Config+0x6c>
 8005bce:	f640 3162 	movw	r1, #2914	; 0xb62
 8005bd2:	4897      	ldr	r0, [pc, #604]	; (8005e30 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005bd4:	f7fa ff67 	bl	8000aa6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <RCCEx_PLLSAI1_Config+0x90>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <RCCEx_PLLSAI1_Config+0x90>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <RCCEx_PLLSAI1_Config+0xa0>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <RCCEx_PLLSAI1_Config+0xaa>
 8005c0c:	f640 3163 	movw	r1, #2915	; 0xb63
 8005c10:	4887      	ldr	r0, [pc, #540]	; (8005e30 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005c12:	f7fa ff48 	bl	8000aa6 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c16:	4b87      	ldr	r3, [pc, #540]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d018      	beq.n	8005c54 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c22:	4b84      	ldr	r3, [pc, #528]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0203 	and.w	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d10d      	bne.n	8005c4e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
       ||
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c3a:	4b7e      	ldr	r3, [pc, #504]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
       ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d047      	beq.n	8005cde <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	e044      	b.n	8005cde <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d018      	beq.n	8005c8e <RCCEx_PLLSAI1_Config+0x122>
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d825      	bhi.n	8005cac <RCCEx_PLLSAI1_Config+0x140>
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d002      	beq.n	8005c6a <RCCEx_PLLSAI1_Config+0xfe>
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d009      	beq.n	8005c7c <RCCEx_PLLSAI1_Config+0x110>
 8005c68:	e020      	b.n	8005cac <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c6a:	4b72      	ldr	r3, [pc, #456]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11d      	bne.n	8005cb2 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c7a:	e01a      	b.n	8005cb2 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c7c:	4b6d      	ldr	r3, [pc, #436]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d116      	bne.n	8005cb6 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c8c:	e013      	b.n	8005cb6 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c8e:	4b69      	ldr	r3, [pc, #420]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10f      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c9a:	4b66      	ldr	r3, [pc, #408]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005caa:	e006      	b.n	8005cba <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb0:	e004      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10d      	bne.n	8005cde <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cc2:	4b5c      	ldr	r3, [pc, #368]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	4956      	ldr	r1, [pc, #344]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 80b9 	bne.w	8005e58 <RCCEx_PLLSAI1_Config+0x2ec>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ce6:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a52      	ldr	r2, [pc, #328]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005cec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf2:	f7fb f9e1 	bl	80010b8 <HAL_GetTick>
 8005cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cf8:	e009      	b.n	8005d0e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cfa:	f7fb f9dd 	bl	80010b8 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d902      	bls.n	8005d0e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	73fb      	strb	r3, [r7, #15]
        break;
 8005d0c:	e005      	b.n	8005d1a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d0e:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1ef      	bne.n	8005cfa <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 809b 	bne.w	8005e58 <RCCEx_PLLSAI1_Config+0x2ec>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d11d      	bne.n	8005d64 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d903      	bls.n	8005d38 <RCCEx_PLLSAI1_Config+0x1cc>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b1f      	cmp	r3, #31
 8005d36:	d904      	bls.n	8005d42 <RCCEx_PLLSAI1_Config+0x1d6>
 8005d38:	f640 31b6 	movw	r1, #2998	; 0xbb6
 8005d3c:	483c      	ldr	r0, [pc, #240]	; (8005e30 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005d3e:	f7fa feb2 	bl	8000aa6 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d42:	4b3c      	ldr	r3, [pc, #240]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6892      	ldr	r2, [r2, #8]
 8005d52:	0211      	lsls	r1, r2, #8
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68d2      	ldr	r2, [r2, #12]
 8005d58:	06d2      	lsls	r2, r2, #27
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	4935      	ldr	r1, [pc, #212]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]
 8005d62:	e051      	b.n	8005e08 <RCCEx_PLLSAI1_Config+0x29c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d127      	bne.n	8005dba <RCCEx_PLLSAI1_Config+0x24e>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d010      	beq.n	8005d94 <RCCEx_PLLSAI1_Config+0x228>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d00c      	beq.n	8005d94 <RCCEx_PLLSAI1_Config+0x228>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d008      	beq.n	8005d94 <RCCEx_PLLSAI1_Config+0x228>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d004      	beq.n	8005d94 <RCCEx_PLLSAI1_Config+0x228>
 8005d8a:	f640 31da 	movw	r1, #3034	; 0xbda
 8005d8e:	4828      	ldr	r0, [pc, #160]	; (8005e30 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005d90:	f7fa fe89 	bl	8000aa6 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d94:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6892      	ldr	r2, [r2, #8]
 8005da4:	0211      	lsls	r1, r2, #8
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6912      	ldr	r2, [r2, #16]
 8005daa:	0852      	lsrs	r2, r2, #1
 8005dac:	3a01      	subs	r2, #1
 8005dae:	0552      	lsls	r2, r2, #21
 8005db0:	430a      	orrs	r2, r1
 8005db2:	4920      	ldr	r1, [pc, #128]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	610b      	str	r3, [r1, #16]
 8005db8:	e026      	b.n	8005e08 <RCCEx_PLLSAI1_Config+0x29c>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d010      	beq.n	8005de4 <RCCEx_PLLSAI1_Config+0x278>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d00c      	beq.n	8005de4 <RCCEx_PLLSAI1_Config+0x278>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	2b06      	cmp	r3, #6
 8005dd0:	d008      	beq.n	8005de4 <RCCEx_PLLSAI1_Config+0x278>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d004      	beq.n	8005de4 <RCCEx_PLLSAI1_Config+0x278>
 8005dda:	f640 31ec 	movw	r1, #3052	; 0xbec
 8005dde:	4814      	ldr	r0, [pc, #80]	; (8005e30 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005de0:	f7fa fe61 	bl	8000aa6 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005de4:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6892      	ldr	r2, [r2, #8]
 8005df4:	0211      	lsls	r1, r2, #8
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6952      	ldr	r2, [r2, #20]
 8005dfa:	0852      	lsrs	r2, r2, #1
 8005dfc:	3a01      	subs	r2, #1
 8005dfe:	0652      	lsls	r2, r2, #25
 8005e00:	430a      	orrs	r2, r1
 8005e02:	490c      	ldr	r1, [pc, #48]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e14:	f7fb f950 	bl	80010b8 <HAL_GetTick>
 8005e18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e1a:	e00d      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e1c:	f7fb f94c 	bl	80010b8 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d906      	bls.n	8005e38 <RCCEx_PLLSAI1_Config+0x2cc>
        {
          status = HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	73fb      	strb	r3, [r7, #15]
          break;
 8005e2e:	e009      	b.n	8005e44 <RCCEx_PLLSAI1_Config+0x2d8>
 8005e30:	08007c24 	.word	0x08007c24
 8005e34:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <RCCEx_PLLSAI1_Config+0x2f8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0eb      	beq.n	8005e1c <RCCEx_PLLSAI1_Config+0x2b0>
        }
      }

      if(status == HAL_OK)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <RCCEx_PLLSAI1_Config+0x2ec>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <RCCEx_PLLSAI1_Config+0x2f8>)
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	4904      	ldr	r1, [pc, #16]	; (8005e64 <RCCEx_PLLSAI1_Config+0x2f8>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000

08005e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e0a5      	b.n	8005fc6 <HAL_TIM_Base_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a54      	ldr	r2, [pc, #336]	; (8005fd0 <HAL_TIM_Base_Init+0x168>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d01d      	beq.n	8005ec0 <HAL_TIM_Base_Init+0x58>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d018      	beq.n	8005ec0 <HAL_TIM_Base_Init+0x58>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a50      	ldr	r2, [pc, #320]	; (8005fd4 <HAL_TIM_Base_Init+0x16c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <HAL_TIM_Base_Init+0x58>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a4e      	ldr	r2, [pc, #312]	; (8005fd8 <HAL_TIM_Base_Init+0x170>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00e      	beq.n	8005ec0 <HAL_TIM_Base_Init+0x58>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a4d      	ldr	r2, [pc, #308]	; (8005fdc <HAL_TIM_Base_Init+0x174>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d009      	beq.n	8005ec0 <HAL_TIM_Base_Init+0x58>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a4b      	ldr	r2, [pc, #300]	; (8005fe0 <HAL_TIM_Base_Init+0x178>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_TIM_Base_Init+0x58>
 8005eb6:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005eba:	484a      	ldr	r0, [pc, #296]	; (8005fe4 <HAL_TIM_Base_Init+0x17c>)
 8005ebc:	f7fa fdf3 	bl	8000aa6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d014      	beq.n	8005ef2 <HAL_TIM_Base_Init+0x8a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d010      	beq.n	8005ef2 <HAL_TIM_Base_Init+0x8a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d00c      	beq.n	8005ef2 <HAL_TIM_Base_Init+0x8a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d008      	beq.n	8005ef2 <HAL_TIM_Base_Init+0x8a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b60      	cmp	r3, #96	; 0x60
 8005ee6:	d004      	beq.n	8005ef2 <HAL_TIM_Base_Init+0x8a>
 8005ee8:	f240 1117 	movw	r1, #279	; 0x117
 8005eec:	483d      	ldr	r0, [pc, #244]	; (8005fe4 <HAL_TIM_Base_Init+0x17c>)
 8005eee:	f7fa fdda 	bl	8000aa6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIM_Base_Init+0xb0>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f02:	d009      	beq.n	8005f18 <HAL_TIM_Base_Init+0xb0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIM_Base_Init+0xb0>
 8005f0e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8005f12:	4834      	ldr	r0, [pc, #208]	; (8005fe4 <HAL_TIM_Base_Init+0x17c>)
 8005f14:	f7fa fdc7 	bl	8000aa6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <HAL_TIM_Base_Init+0xca>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b80      	cmp	r3, #128	; 0x80
 8005f26:	d004      	beq.n	8005f32 <HAL_TIM_Base_Init+0xca>
 8005f28:	f240 1119 	movw	r1, #281	; 0x119
 8005f2c:	482d      	ldr	r0, [pc, #180]	; (8005fe4 <HAL_TIM_Base_Init+0x17c>)
 8005f2e:	f7fa fdba 	bl	8000aa6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fa fed0 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f000 fb4a 	bl	80065f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40001000 	.word	0x40001000
 8005fd8:	40001400 	.word	0x40001400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	08007c60 	.word	0x08007c60

08005fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a30      	ldr	r2, [pc, #192]	; (80060b8 <HAL_TIM_Base_Start+0xd0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01d      	beq.n	8006036 <HAL_TIM_Base_Start+0x4e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d018      	beq.n	8006036 <HAL_TIM_Base_Start+0x4e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2c      	ldr	r2, [pc, #176]	; (80060bc <HAL_TIM_Base_Start+0xd4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <HAL_TIM_Base_Start+0x4e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2b      	ldr	r2, [pc, #172]	; (80060c0 <HAL_TIM_Base_Start+0xd8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00e      	beq.n	8006036 <HAL_TIM_Base_Start+0x4e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <HAL_TIM_Base_Start+0xdc>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d009      	beq.n	8006036 <HAL_TIM_Base_Start+0x4e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <HAL_TIM_Base_Start+0xe0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d004      	beq.n	8006036 <HAL_TIM_Base_Start+0x4e>
 800602c:	f240 1197 	movw	r1, #407	; 0x197
 8006030:	4826      	ldr	r0, [pc, #152]	; (80060cc <HAL_TIM_Base_Start+0xe4>)
 8006032:	f7fa fd38 	bl	8000aa6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b01      	cmp	r3, #1
 8006040:	d001      	beq.n	8006046 <HAL_TIM_Base_Start+0x5e>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e033      	b.n	80060ae <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <HAL_TIM_Base_Start+0xd0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIM_Base_Start+0x84>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d004      	beq.n	800606c <HAL_TIM_Base_Start+0x84>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_TIM_Base_Start+0xdc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d115      	bne.n	8006098 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <HAL_TIM_Base_Start+0xe8>)
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b06      	cmp	r3, #6
 800607c:	d015      	beq.n	80060aa <HAL_TIM_Base_Start+0xc2>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d011      	beq.n	80060aa <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006096:	e008      	b.n	80060aa <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e000      	b.n	80060ac <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40001000 	.word	0x40001000
 80060c0:	40001400 	.word	0x40001400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	08007c60 	.word	0x08007c60
 80060d0:	00010007 	.word	0x00010007

080060d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_ConfigClockSource+0x18>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e27b      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x510>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006104:	d029      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610e:	d024      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d020      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b10      	cmp	r3, #16
 800611e:	d01c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b20      	cmp	r3, #32
 8006126:	d018      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b30      	cmp	r3, #48	; 0x30
 800612e:	d014      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	d010      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b50      	cmp	r3, #80	; 0x50
 800613e:	d00c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b60      	cmp	r3, #96	; 0x60
 8006146:	d008      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b70      	cmp	r3, #112	; 0x70
 800614e:	d004      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x86>
 8006150:	f241 41b4 	movw	r1, #5300	; 0x14b4
 8006154:	489e      	ldr	r0, [pc, #632]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006156:	f7fa fca6 	bl	8000aa6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006168:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800616c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006174:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006186:	f000 80c5 	beq.w	8006314 <HAL_TIM_ConfigClockSource+0x240>
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618e:	f200 821d 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006196:	d02d      	beq.n	80061f4 <HAL_TIM_ConfigClockSource+0x120>
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	f200 8216 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 80061a0:	2b70      	cmp	r3, #112	; 0x70
 80061a2:	d051      	beq.n	8006248 <HAL_TIM_ConfigClockSource+0x174>
 80061a4:	2b70      	cmp	r3, #112	; 0x70
 80061a6:	f200 8211 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 80061aa:	2b60      	cmp	r3, #96	; 0x60
 80061ac:	f000 8163 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x3a2>
 80061b0:	2b60      	cmp	r3, #96	; 0x60
 80061b2:	f200 820b 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 80061b6:	2b50      	cmp	r3, #80	; 0x50
 80061b8:	f000 8116 	beq.w	80063e8 <HAL_TIM_ConfigClockSource+0x314>
 80061bc:	2b50      	cmp	r3, #80	; 0x50
 80061be:	f200 8205 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	f000 819e 	beq.w	8006504 <HAL_TIM_ConfigClockSource+0x430>
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	f200 81ff 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 80061ce:	2b30      	cmp	r3, #48	; 0x30
 80061d0:	f000 81df 	beq.w	8006592 <HAL_TIM_ConfigClockSource+0x4be>
 80061d4:	2b30      	cmp	r3, #48	; 0x30
 80061d6:	f200 81f9 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 80061da:	2b20      	cmp	r3, #32
 80061dc:	f000 81d9 	beq.w	8006592 <HAL_TIM_ConfigClockSource+0x4be>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	f200 81f3 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 81d3 	beq.w	8006592 <HAL_TIM_ConfigClockSource+0x4be>
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	f000 81d0 	beq.w	8006592 <HAL_TIM_ConfigClockSource+0x4be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061f2:	e1eb      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a76      	ldr	r2, [pc, #472]	; (80063d4 <HAL_TIM_ConfigClockSource+0x300>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	f000 81e8 	beq.w	80065d0 <HAL_TIM_ConfigClockSource+0x4fc>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	f000 81e2 	beq.w	80065d0 <HAL_TIM_ConfigClockSource+0x4fc>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a71      	ldr	r2, [pc, #452]	; (80063d8 <HAL_TIM_ConfigClockSource+0x304>)
 8006212:	4293      	cmp	r3, r2
 8006214:	f000 81dc 	beq.w	80065d0 <HAL_TIM_ConfigClockSource+0x4fc>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a6f      	ldr	r2, [pc, #444]	; (80063dc <HAL_TIM_ConfigClockSource+0x308>)
 800621e:	4293      	cmp	r3, r2
 8006220:	f000 81d6 	beq.w	80065d0 <HAL_TIM_ConfigClockSource+0x4fc>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a6d      	ldr	r2, [pc, #436]	; (80063e0 <HAL_TIM_ConfigClockSource+0x30c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	f000 81d0 	beq.w	80065d0 <HAL_TIM_ConfigClockSource+0x4fc>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a6b      	ldr	r2, [pc, #428]	; (80063e4 <HAL_TIM_ConfigClockSource+0x310>)
 8006236:	4293      	cmp	r3, r2
 8006238:	f000 81ca 	beq.w	80065d0 <HAL_TIM_ConfigClockSource+0x4fc>
 800623c:	f44f 51a6 	mov.w	r1, #5312	; 0x14c0
 8006240:	4863      	ldr	r0, [pc, #396]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006242:	f7fa fc30 	bl	8000aa6 <assert_failed>
      break;
 8006246:	e1c3      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x4fc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a61      	ldr	r2, [pc, #388]	; (80063d4 <HAL_TIM_ConfigClockSource+0x300>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <HAL_TIM_ConfigClockSource+0x19c>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d009      	beq.n	8006270 <HAL_TIM_ConfigClockSource+0x19c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5f      	ldr	r2, [pc, #380]	; (80063e0 <HAL_TIM_ConfigClockSource+0x30c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_TIM_ConfigClockSource+0x19c>
 8006266:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800626a:	4859      	ldr	r0, [pc, #356]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 800626c:	f7fa fc1b 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_TIM_ConfigClockSource+0x1cc>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006280:	d00e      	beq.n	80062a0 <HAL_TIM_ConfigClockSource+0x1cc>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628a:	d009      	beq.n	80062a0 <HAL_TIM_ConfigClockSource+0x1cc>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006294:	d004      	beq.n	80062a0 <HAL_TIM_ConfigClockSource+0x1cc>
 8006296:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800629a:	484d      	ldr	r0, [pc, #308]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 800629c:	f7fa fc03 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a8:	d014      	beq.n	80062d4 <HAL_TIM_ConfigClockSource+0x200>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <HAL_TIM_ConfigClockSource+0x200>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_TIM_ConfigClockSource+0x200>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d008      	beq.n	80062d4 <HAL_TIM_ConfigClockSource+0x200>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b0a      	cmp	r3, #10
 80062c8:	d004      	beq.n	80062d4 <HAL_TIM_ConfigClockSource+0x200>
 80062ca:	f241 41cb 	movw	r1, #5323	; 0x14cb
 80062ce:	4840      	ldr	r0, [pc, #256]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 80062d0:	f7fa fbe9 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	2b0f      	cmp	r3, #15
 80062da:	d904      	bls.n	80062e6 <HAL_TIM_ConfigClockSource+0x212>
 80062dc:	f241 41cc 	movw	r1, #5324	; 0x14cc
 80062e0:	483b      	ldr	r0, [pc, #236]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 80062e2:	f7fa fbe0 	bl	8000aa6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6899      	ldr	r1, [r3, #8]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f000 fa5d 	bl	80067b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006308:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	609a      	str	r2, [r3, #8]
      break;
 8006312:	e15e      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x4fe>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2e      	ldr	r2, [pc, #184]	; (80063d4 <HAL_TIM_ConfigClockSource+0x300>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x25e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d004      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x25e>
 8006328:	f241 41df 	movw	r1, #5343	; 0x14df
 800632c:	4828      	ldr	r0, [pc, #160]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 800632e:	f7fa fbba 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d013      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x28e>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006342:	d00e      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x28e>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d009      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x28e>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006356:	d004      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x28e>
 8006358:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800635c:	481c      	ldr	r0, [pc, #112]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 800635e:	f7fa fba2 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636a:	d014      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x2c2>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d010      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x2c2>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00c      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x2c2>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d008      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x2c2>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b0a      	cmp	r3, #10
 800638a:	d004      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x2c2>
 800638c:	f241 41e3 	movw	r1, #5347	; 0x14e3
 8006390:	480f      	ldr	r0, [pc, #60]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006392:	f7fa fb88 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b0f      	cmp	r3, #15
 800639c:	d904      	bls.n	80063a8 <HAL_TIM_ConfigClockSource+0x2d4>
 800639e:	f241 41e4 	movw	r1, #5348	; 0x14e4
 80063a2:	480b      	ldr	r0, [pc, #44]	; (80063d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 80063a4:	f7fa fb7f 	bl	8000aa6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f000 f9fc 	bl	80067b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ca:	609a      	str	r2, [r3, #8]
      break;
 80063cc:	e101      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x4fe>
 80063ce:	bf00      	nop
 80063d0:	08007c60 	.word	0x08007c60
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40001000 	.word	0x40001000
 80063dc:	40001400 	.word	0x40001400
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40014400 	.word	0x40014400
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a7f      	ldr	r2, [pc, #508]	; (80065ec <HAL_TIM_ConfigClockSource+0x518>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00e      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0x33c>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fa:	d009      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0x33c>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a7b      	ldr	r2, [pc, #492]	; (80065f0 <HAL_TIM_ConfigClockSource+0x51c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0x33c>
 8006406:	f241 41f3 	movw	r1, #5363	; 0x14f3
 800640a:	487a      	ldr	r0, [pc, #488]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 800640c:	f7fa fb4b 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006418:	d014      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0x370>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d010      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0x370>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0x370>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d008      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0x370>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b0a      	cmp	r3, #10
 8006438:	d004      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0x370>
 800643a:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800643e:	486d      	ldr	r0, [pc, #436]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 8006440:	f7fa fb31 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d904      	bls.n	8006456 <HAL_TIM_ConfigClockSource+0x382>
 800644c:	f241 41f7 	movw	r1, #5367	; 0x14f7
 8006450:	4868      	ldr	r0, [pc, #416]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 8006452:	f7fa fb28 	bl	8000aa6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	461a      	mov	r2, r3
 8006464:	f000 f92c 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2150      	movs	r1, #80	; 0x50
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f985 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 8006474:	e0ad      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x4fe>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5c      	ldr	r2, [pc, #368]	; (80065ec <HAL_TIM_ConfigClockSource+0x518>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x3ca>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006488:	d009      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x3ca>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a58      	ldr	r2, [pc, #352]	; (80065f0 <HAL_TIM_ConfigClockSource+0x51c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x3ca>
 8006494:	f241 5103 	movw	r1, #5379	; 0x1503
 8006498:	4856      	ldr	r0, [pc, #344]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 800649a:	f7fa fb04 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a6:	d014      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x3fe>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d010      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x3fe>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x3fe>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d008      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x3fe>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b0a      	cmp	r3, #10
 80064c6:	d004      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x3fe>
 80064c8:	f241 5106 	movw	r1, #5382	; 0x1506
 80064cc:	4849      	ldr	r0, [pc, #292]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 80064ce:	f7fa faea 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d904      	bls.n	80064e4 <HAL_TIM_ConfigClockSource+0x410>
 80064da:	f241 5107 	movw	r1, #5383	; 0x1507
 80064de:	4845      	ldr	r0, [pc, #276]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 80064e0:	f7fa fae1 	bl	8000aa6 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6859      	ldr	r1, [r3, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	461a      	mov	r2, r3
 80064f2:	f000 f914 	bl	800671e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2160      	movs	r1, #96	; 0x60
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f93e 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 8006502:	e066      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x4fe>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a38      	ldr	r2, [pc, #224]	; (80065ec <HAL_TIM_ConfigClockSource+0x518>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00e      	beq.n	800652c <HAL_TIM_ConfigClockSource+0x458>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006516:	d009      	beq.n	800652c <HAL_TIM_ConfigClockSource+0x458>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a34      	ldr	r2, [pc, #208]	; (80065f0 <HAL_TIM_ConfigClockSource+0x51c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <HAL_TIM_ConfigClockSource+0x458>
 8006522:	f241 5113 	movw	r1, #5395	; 0x1513
 8006526:	4833      	ldr	r0, [pc, #204]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 8006528:	f7fa fabd 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006534:	d014      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0x48c>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d010      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0x48c>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00c      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0x48c>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d008      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0x48c>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b0a      	cmp	r3, #10
 8006554:	d004      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0x48c>
 8006556:	f241 5116 	movw	r1, #5398	; 0x1516
 800655a:	4826      	ldr	r0, [pc, #152]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 800655c:	f7fa faa3 	bl	8000aa6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b0f      	cmp	r3, #15
 8006566:	d904      	bls.n	8006572 <HAL_TIM_ConfigClockSource+0x49e>
 8006568:	f241 5117 	movw	r1, #5399	; 0x1517
 800656c:	4821      	ldr	r0, [pc, #132]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 800656e:	f7fa fa9a 	bl	8000aa6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6859      	ldr	r1, [r3, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	461a      	mov	r2, r3
 8006580:	f000 f89e 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2140      	movs	r1, #64	; 0x40
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f8f7 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 8006590:	e01f      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x4fe>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <HAL_TIM_ConfigClockSource+0x518>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x4e6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a4:	d009      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x4e6>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <HAL_TIM_ConfigClockSource+0x51c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x4e6>
 80065b0:	f241 5126 	movw	r1, #5414	; 0x1526
 80065b4:	480f      	ldr	r0, [pc, #60]	; (80065f4 <HAL_TIM_ConfigClockSource+0x520>)
 80065b6:	f7fa fa76 	bl	8000aa6 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	4610      	mov	r0, r2
 80065c6:	f000 f8da 	bl	800677e <TIM_ITRx_SetConfig>
        break;
 80065ca:	e002      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x4fe>
      break;
 80065cc:	bf00      	nop
 80065ce:	e000      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x4fe>
      break;
 80065d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40014000 	.word	0x40014000
 80065f4:	08007c60 	.word	0x08007c60

080065f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a2a      	ldr	r2, [pc, #168]	; (80066b4 <TIM_Base_SetConfig+0xbc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_Base_SetConfig+0x20>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006616:	d108      	bne.n	800662a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <TIM_Base_SetConfig+0xbc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_Base_SetConfig+0x52>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006638:	d007      	beq.n	800664a <TIM_Base_SetConfig+0x52>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <TIM_Base_SetConfig+0xc0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_Base_SetConfig+0x52>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <TIM_Base_SetConfig+0xc4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d108      	bne.n	800665c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <TIM_Base_SetConfig+0xbc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d007      	beq.n	8006698 <TIM_Base_SetConfig+0xa0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a0b      	ldr	r2, [pc, #44]	; (80066b8 <TIM_Base_SetConfig+0xc0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0xa0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <TIM_Base_SetConfig+0xc4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	615a      	str	r2, [r3, #20]
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400

080066c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f023 0201 	bic.w	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 030a 	bic.w	r3, r3, #10
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671e:	b480      	push	{r7}
 8006720:	b087      	sub	sp, #28
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f023 0210 	bic.w	r2, r3, #16
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	031b      	lsls	r3, r3, #12
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800675a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	f043 0307 	orr.w	r3, r3, #7
 80067a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4313      	orrs	r3, r2
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a81      	ldr	r2, [pc, #516]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d018      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d013      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a7d      	ldr	r2, [pc, #500]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x218>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00e      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a7b      	ldr	r2, [pc, #492]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7a      	ldr	r2, [pc, #488]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006830:	f240 717a 	movw	r1, #1914	; 0x77a
 8006834:	4878      	ldr	r0, [pc, #480]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8006836:	f7fa f936 	bl	8000aa6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d020      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b10      	cmp	r3, #16
 8006848:	d01c      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b20      	cmp	r3, #32
 8006850:	d018      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b30      	cmp	r3, #48	; 0x30
 8006858:	d014      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d010      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b50      	cmp	r3, #80	; 0x50
 8006868:	d00c      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b60      	cmp	r3, #96	; 0x60
 8006870:	d008      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b70      	cmp	r3, #112	; 0x70
 8006878:	d004      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800687a:	f240 717b 	movw	r1, #1915	; 0x77b
 800687e:	4866      	ldr	r0, [pc, #408]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8006880:	f7fa f911 	bl	8000aa6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d008      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8006894:	f240 717c 	movw	r1, #1916	; 0x77c
 8006898:	485f      	ldr	r0, [pc, #380]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 800689a:	f7fa f904 	bl	8000aa6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e0a8      	b.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0x20a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a4d      	ldr	r2, [pc, #308]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d161      	bne.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d054      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e6:	d04f      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068f0:	d04a      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068fa:	d045      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006904:	d040      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800690e:	d03b      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006918:	d036      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006922:	d031      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800692c:	d02c      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006936:	d027      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8006940:	d022      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800694a:	d01d      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8006954:	d018      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800695e:	d013      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8006968:	d00e      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8006972:	d009      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800697c:	d004      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800697e:	f240 718e 	movw	r1, #1934	; 0x78e
 8006982:	4825      	ldr	r0, [pc, #148]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8006984:	f7fa f88f 	bl	8000aa6 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800698e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d004      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10c      	bne.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40001000 	.word	0x40001000
 8006a10:	40001400 	.word	0x40001400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	08007c98 	.word	0x08007c98

08006a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e06d      	b.n	8006b0a <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d014      	beq.n	8006a60 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a36      	ldr	r2, [pc, #216]	; (8006b14 <HAL_UART_Init+0xf8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d023      	beq.n	8006a88 <HAL_UART_Init+0x6c>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a34      	ldr	r2, [pc, #208]	; (8006b18 <HAL_UART_Init+0xfc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d01e      	beq.n	8006a88 <HAL_UART_Init+0x6c>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a33      	ldr	r2, [pc, #204]	; (8006b1c <HAL_UART_Init+0x100>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d019      	beq.n	8006a88 <HAL_UART_Init+0x6c>
 8006a54:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006a58:	4831      	ldr	r0, [pc, #196]	; (8006b20 <HAL_UART_Init+0x104>)
 8006a5a:	f7fa f824 	bl	8000aa6 <assert_failed>
 8006a5e:	e013      	b.n	8006a88 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2b      	ldr	r2, [pc, #172]	; (8006b14 <HAL_UART_Init+0xf8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_UART_Init+0x6c>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	; (8006b18 <HAL_UART_Init+0xfc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_UART_Init+0x6c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a28      	ldr	r2, [pc, #160]	; (8006b1c <HAL_UART_Init+0x100>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_UART_Init+0x6c>
 8006a7e:	f240 1151 	movw	r1, #337	; 0x151
 8006a82:	4827      	ldr	r0, [pc, #156]	; (8006b20 <HAL_UART_Init+0x104>)
 8006a84:	f7fa f80f 	bl	8000aa6 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7fa f959 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2224      	movs	r2, #36	; 0x24
 8006aa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fa57 	bl	8006f68 <UART_SetConfig>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e022      	b.n	8006b0a <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fcf7 	bl	80074c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fe22 	bl	800774c <UART_CheckIdleState>
 8006b08:	4603      	mov	r3, r0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40013800 	.word	0x40013800
 8006b18:	40004400 	.word	0x40004400
 8006b1c:	40008000 	.word	0x40008000
 8006b20:	08007cd4 	.word	0x08007cd4

08006b24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d113      	bne.n	8006b7c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00e      	beq.n	8006b7c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d009      	beq.n	8006b7c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 81ce 	beq.w	8006f0e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
      }
      return;
 8006b7a:	e1c8      	b.n	8006f0e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80e3 	beq.w	8006d4a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d105      	bne.n	8006b9a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4ba6      	ldr	r3, [pc, #664]	; (8006e2c <HAL_UART_IRQHandler+0x308>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80d8 	beq.w	8006d4a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xa2>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bbc:	f043 0201 	orr.w	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d010      	beq.n	8006bf2 <HAL_UART_IRQHandler+0xce>
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2202      	movs	r2, #2
 8006be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be8:	f043 0204 	orr.w	r2, r3, #4
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d010      	beq.n	8006c1e <HAL_UART_IRQHandler+0xfa>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c14:	f043 0202 	orr.w	r2, r3, #2
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2208      	movs	r2, #8
 8006c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4a:	f043 0208 	orr.w	r2, r3, #8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d011      	beq.n	8006c82 <HAL_UART_IRQHandler+0x15e>
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c78:	f043 0220 	orr.w	r2, r3, #32
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8142 	beq.w	8006f12 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00c      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d004      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d031      	beq.n	8006d36 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fdff 	bl	80078d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d123      	bne.n	8006d2e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d013      	beq.n	8006d26 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	4a4b      	ldr	r2, [pc, #300]	; (8006e30 <HAL_UART_IRQHandler+0x30c>)
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fc ffa8 	bl	8003c60 <HAL_DMA_Abort_IT>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d017      	beq.n	8006d46 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	e00f      	b.n	8006d46 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f908 	bl	8006f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	e00b      	b.n	8006d46 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f904 	bl	8006f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d34:	e007      	b.n	8006d46 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f900 	bl	8006f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d44:	e0e5      	b.n	8006f12 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d46:	bf00      	nop
    return;
 8006d48:	e0e3      	b.n	8006f12 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	f040 80a9 	bne.w	8006ea6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80a3 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 809d 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2210      	movs	r2, #16
 8006d72:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d158      	bne.n	8006e34 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006d8c:	893b      	ldrh	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80c1 	beq.w	8006f16 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d9a:	893a      	ldrh	r2, [r7, #8]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	f080 80ba 	bcs.w	8006f16 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	893a      	ldrh	r2, [r7, #8]
 8006da6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12a      	bne.n	8006e10 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0210 	bic.w	r2, r2, #16
 8006e04:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fc feea 	bl	8003be4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f893 	bl	8006f50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e2a:	e074      	b.n	8006f16 <HAL_UART_IRQHandler+0x3f2>
 8006e2c:	04000120 	.word	0x04000120
 8006e30:	08007935 	.word	0x08007935
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d063      	beq.n	8006f1a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8006e52:	897b      	ldrh	r3, [r7, #10]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d060      	beq.n	8006f1a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e66:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0201 	bic.w	r2, r2, #1
 8006e76:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0210 	bic.w	r2, r2, #16
 8006e98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e9a:	897b      	ldrh	r3, [r7, #10]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f856 	bl	8006f50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ea4:	e039      	b.n	8006f1a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <HAL_UART_IRQHandler+0x3a8>
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ec2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fd64 	bl	8007992 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eca:	e029      	b.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00d      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d008      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01a      	beq.n	8006f1e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
    }
    return;
 8006ef0:	e015      	b.n	8006f1e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d011      	beq.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00c      	beq.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fd2a 	bl	8007960 <UART_EndTransmit_IT>
    return;
 8006f0c:	e008      	b.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
      return;
 8006f0e:	bf00      	nop
 8006f10:	e006      	b.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
    return;
 8006f12:	bf00      	nop
 8006f14:	e004      	b.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
      return;
 8006f16:	bf00      	nop
 8006f18:	e002      	b.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
      return;
 8006f1a:	bf00      	nop
 8006f1c:	e000      	b.n	8006f20 <HAL_UART_IRQHandler+0x3fc>
    return;
 8006f1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop

08006f28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f68:	b5b0      	push	{r4, r5, r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4aaa      	ldr	r2, [pc, #680]	; (8007224 <UART_SetConfig+0x2bc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d904      	bls.n	8006f88 <UART_SetConfig+0x20>
 8006f7e:	f640 4145 	movw	r1, #3141	; 0xc45
 8006f82:	48a9      	ldr	r0, [pc, #676]	; (8007228 <UART_SetConfig+0x2c0>)
 8006f84:	f7f9 fd8f 	bl	8000aa6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f90:	d00d      	beq.n	8006fae <UART_SetConfig+0x46>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <UART_SetConfig+0x46>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa2:	d004      	beq.n	8006fae <UART_SetConfig+0x46>
 8006fa4:	f640 4146 	movw	r1, #3142	; 0xc46
 8006fa8:	489f      	ldr	r0, [pc, #636]	; (8007228 <UART_SetConfig+0x2c0>)
 8006faa:	f7f9 fd7c 	bl	8000aa6 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a9e      	ldr	r2, [pc, #632]	; (800722c <UART_SetConfig+0x2c4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d10e      	bne.n	8006fd6 <UART_SetConfig+0x6e>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d030      	beq.n	8007022 <UART_SetConfig+0xba>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc8:	d02b      	beq.n	8007022 <UART_SetConfig+0xba>
 8006fca:	f640 4149 	movw	r1, #3145	; 0xc49
 8006fce:	4896      	ldr	r0, [pc, #600]	; (8007228 <UART_SetConfig+0x2c0>)
 8006fd0:	f7f9 fd69 	bl	8000aa6 <assert_failed>
 8006fd4:	e025      	b.n	8007022 <UART_SetConfig+0xba>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fde:	d012      	beq.n	8007006 <UART_SetConfig+0x9e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00e      	beq.n	8007006 <UART_SetConfig+0x9e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ff0:	d009      	beq.n	8007006 <UART_SetConfig+0x9e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffa:	d004      	beq.n	8007006 <UART_SetConfig+0x9e>
 8006ffc:	f640 414d 	movw	r1, #3149	; 0xc4d
 8007000:	4889      	ldr	r0, [pc, #548]	; (8007228 <UART_SetConfig+0x2c0>)
 8007002:	f7f9 fd50 	bl	8000aa6 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <UART_SetConfig+0xba>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007016:	d004      	beq.n	8007022 <UART_SetConfig+0xba>
 8007018:	f640 414e 	movw	r1, #3150	; 0xc4e
 800701c:	4882      	ldr	r0, [pc, #520]	; (8007228 <UART_SetConfig+0x2c0>)
 800701e:	f7f9 fd42 	bl	8000aa6 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00e      	beq.n	8007048 <UART_SetConfig+0xe0>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007032:	d009      	beq.n	8007048 <UART_SetConfig+0xe0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800703c:	d004      	beq.n	8007048 <UART_SetConfig+0xe0>
 800703e:	f640 4151 	movw	r1, #3153	; 0xc51
 8007042:	4879      	ldr	r0, [pc, #484]	; (8007228 <UART_SetConfig+0x2c0>)
 8007044:	f7f9 fd2f 	bl	8000aa6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	f023 030c 	bic.w	r3, r3, #12
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <UART_SetConfig+0xf4>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <UART_SetConfig+0xfe>
 800705c:	f640 4152 	movw	r1, #3154	; 0xc52
 8007060:	4871      	ldr	r0, [pc, #452]	; (8007228 <UART_SetConfig+0x2c0>)
 8007062:	f7f9 fd20 	bl	8000aa6 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d013      	beq.n	8007096 <UART_SetConfig+0x12e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007076:	d00e      	beq.n	8007096 <UART_SetConfig+0x12e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007080:	d009      	beq.n	8007096 <UART_SetConfig+0x12e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708a:	d004      	beq.n	8007096 <UART_SetConfig+0x12e>
 800708c:	f640 4153 	movw	r1, #3155	; 0xc53
 8007090:	4865      	ldr	r0, [pc, #404]	; (8007228 <UART_SetConfig+0x2c0>)
 8007092:	f7f9 fd08 	bl	8000aa6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <UART_SetConfig+0x14a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a6:	d004      	beq.n	80070b2 <UART_SetConfig+0x14a>
 80070a8:	f640 4154 	movw	r1, #3156	; 0xc54
 80070ac:	485e      	ldr	r0, [pc, #376]	; (8007228 <UART_SetConfig+0x2c0>)
 80070ae:	f7f9 fcfa 	bl	8000aa6 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4b57      	ldr	r3, [pc, #348]	; (8007230 <UART_SetConfig+0x2c8>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	69f9      	ldr	r1, [r7, #28]
 80070da:	430b      	orrs	r3, r1
 80070dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a4b      	ldr	r2, [pc, #300]	; (800722c <UART_SetConfig+0x2c4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d004      	beq.n	800710e <UART_SetConfig+0x1a6>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	4313      	orrs	r3, r2
 800710c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	430a      	orrs	r2, r1
 8007120:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a43      	ldr	r2, [pc, #268]	; (8007234 <UART_SetConfig+0x2cc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d120      	bne.n	800716e <UART_SetConfig+0x206>
 800712c:	4b42      	ldr	r3, [pc, #264]	; (8007238 <UART_SetConfig+0x2d0>)
 800712e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b03      	cmp	r3, #3
 8007138:	d816      	bhi.n	8007168 <UART_SetConfig+0x200>
 800713a:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <UART_SetConfig+0x1d8>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007151 	.word	0x08007151
 8007144:	0800715d 	.word	0x0800715d
 8007148:	08007157 	.word	0x08007157
 800714c:	08007163 	.word	0x08007163
 8007150:	2301      	movs	r3, #1
 8007152:	76fb      	strb	r3, [r7, #27]
 8007154:	e07f      	b.n	8007256 <UART_SetConfig+0x2ee>
 8007156:	2302      	movs	r3, #2
 8007158:	76fb      	strb	r3, [r7, #27]
 800715a:	e07c      	b.n	8007256 <UART_SetConfig+0x2ee>
 800715c:	2304      	movs	r3, #4
 800715e:	76fb      	strb	r3, [r7, #27]
 8007160:	e079      	b.n	8007256 <UART_SetConfig+0x2ee>
 8007162:	2308      	movs	r3, #8
 8007164:	76fb      	strb	r3, [r7, #27]
 8007166:	e076      	b.n	8007256 <UART_SetConfig+0x2ee>
 8007168:	2310      	movs	r3, #16
 800716a:	76fb      	strb	r3, [r7, #27]
 800716c:	e073      	b.n	8007256 <UART_SetConfig+0x2ee>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a32      	ldr	r2, [pc, #200]	; (800723c <UART_SetConfig+0x2d4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d132      	bne.n	80071de <UART_SetConfig+0x276>
 8007178:	4b2f      	ldr	r3, [pc, #188]	; (8007238 <UART_SetConfig+0x2d0>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	2b0c      	cmp	r3, #12
 8007184:	d828      	bhi.n	80071d8 <UART_SetConfig+0x270>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0x224>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071c1 	.word	0x080071c1
 8007190:	080071d9 	.word	0x080071d9
 8007194:	080071d9 	.word	0x080071d9
 8007198:	080071d9 	.word	0x080071d9
 800719c:	080071cd 	.word	0x080071cd
 80071a0:	080071d9 	.word	0x080071d9
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080071d9 	.word	0x080071d9
 80071ac:	080071c7 	.word	0x080071c7
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	080071d9 	.word	0x080071d9
 80071bc:	080071d3 	.word	0x080071d3
 80071c0:	2300      	movs	r3, #0
 80071c2:	76fb      	strb	r3, [r7, #27]
 80071c4:	e047      	b.n	8007256 <UART_SetConfig+0x2ee>
 80071c6:	2302      	movs	r3, #2
 80071c8:	76fb      	strb	r3, [r7, #27]
 80071ca:	e044      	b.n	8007256 <UART_SetConfig+0x2ee>
 80071cc:	2304      	movs	r3, #4
 80071ce:	76fb      	strb	r3, [r7, #27]
 80071d0:	e041      	b.n	8007256 <UART_SetConfig+0x2ee>
 80071d2:	2308      	movs	r3, #8
 80071d4:	76fb      	strb	r3, [r7, #27]
 80071d6:	e03e      	b.n	8007256 <UART_SetConfig+0x2ee>
 80071d8:	2310      	movs	r3, #16
 80071da:	76fb      	strb	r3, [r7, #27]
 80071dc:	e03b      	b.n	8007256 <UART_SetConfig+0x2ee>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a12      	ldr	r2, [pc, #72]	; (800722c <UART_SetConfig+0x2c4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d134      	bne.n	8007252 <UART_SetConfig+0x2ea>
 80071e8:	4b13      	ldr	r3, [pc, #76]	; (8007238 <UART_SetConfig+0x2d0>)
 80071ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f6:	d026      	beq.n	8007246 <UART_SetConfig+0x2de>
 80071f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071fc:	d826      	bhi.n	800724c <UART_SetConfig+0x2e4>
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d00b      	beq.n	800721c <UART_SetConfig+0x2b4>
 8007204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007208:	d820      	bhi.n	800724c <UART_SetConfig+0x2e4>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <UART_SetConfig+0x2ae>
 800720e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007212:	d015      	beq.n	8007240 <UART_SetConfig+0x2d8>
 8007214:	e01a      	b.n	800724c <UART_SetConfig+0x2e4>
 8007216:	2300      	movs	r3, #0
 8007218:	76fb      	strb	r3, [r7, #27]
 800721a:	e01c      	b.n	8007256 <UART_SetConfig+0x2ee>
 800721c:	2302      	movs	r3, #2
 800721e:	76fb      	strb	r3, [r7, #27]
 8007220:	e019      	b.n	8007256 <UART_SetConfig+0x2ee>
 8007222:	bf00      	nop
 8007224:	00989680 	.word	0x00989680
 8007228:	08007cd4 	.word	0x08007cd4
 800722c:	40008000 	.word	0x40008000
 8007230:	efff69f3 	.word	0xefff69f3
 8007234:	40013800 	.word	0x40013800
 8007238:	40021000 	.word	0x40021000
 800723c:	40004400 	.word	0x40004400
 8007240:	2304      	movs	r3, #4
 8007242:	76fb      	strb	r3, [r7, #27]
 8007244:	e007      	b.n	8007256 <UART_SetConfig+0x2ee>
 8007246:	2308      	movs	r3, #8
 8007248:	76fb      	strb	r3, [r7, #27]
 800724a:	e004      	b.n	8007256 <UART_SetConfig+0x2ee>
 800724c:	2310      	movs	r3, #16
 800724e:	76fb      	strb	r3, [r7, #27]
 8007250:	e001      	b.n	8007256 <UART_SetConfig+0x2ee>
 8007252:	2310      	movs	r3, #16
 8007254:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a97      	ldr	r2, [pc, #604]	; (80074b8 <UART_SetConfig+0x550>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d172      	bne.n	8007346 <UART_SetConfig+0x3de>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007260:	7efb      	ldrb	r3, [r7, #27]
 8007262:	2b08      	cmp	r3, #8
 8007264:	d823      	bhi.n	80072ae <UART_SetConfig+0x346>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <UART_SetConfig+0x304>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007291 	.word	0x08007291
 8007270:	080072af 	.word	0x080072af
 8007274:	08007299 	.word	0x08007299
 8007278:	080072af 	.word	0x080072af
 800727c:	0800729f 	.word	0x0800729f
 8007280:	080072af 	.word	0x080072af
 8007284:	080072af 	.word	0x080072af
 8007288:	080072af 	.word	0x080072af
 800728c:	080072a7 	.word	0x080072a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007290:	f7fe f86c 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007294:	6178      	str	r0, [r7, #20]
        break;
 8007296:	e00f      	b.n	80072b8 <UART_SetConfig+0x350>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007298:	4b88      	ldr	r3, [pc, #544]	; (80074bc <UART_SetConfig+0x554>)
 800729a:	617b      	str	r3, [r7, #20]
        break;
 800729c:	e00c      	b.n	80072b8 <UART_SetConfig+0x350>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729e:	f7fd ffcd 	bl	800523c <HAL_RCC_GetSysClockFreq>
 80072a2:	6178      	str	r0, [r7, #20]
        break;
 80072a4:	e008      	b.n	80072b8 <UART_SetConfig+0x350>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072aa:	617b      	str	r3, [r7, #20]
        break;
 80072ac:	e004      	b.n	80072b8 <UART_SetConfig+0x350>
      default:
        pclk = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	76bb      	strb	r3, [r7, #26]
        break;
 80072b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80f0 	beq.w	80074a0 <UART_SetConfig+0x538>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	4413      	add	r3, r2
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d305      	bcc.n	80072dc <UART_SetConfig+0x374>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d902      	bls.n	80072e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	76bb      	strb	r3, [r7, #26]
 80072e0:	e0de      	b.n	80074a0 <UART_SetConfig+0x538>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f04f 0100 	mov.w	r1, #0
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	020b      	lsls	r3, r1, #8
 80072f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072f8:	0202      	lsls	r2, r0, #8
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	6849      	ldr	r1, [r1, #4]
 80072fe:	0849      	lsrs	r1, r1, #1
 8007300:	4608      	mov	r0, r1
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	1814      	adds	r4, r2, r0
 8007308:	eb43 0501 	adc.w	r5, r3, r1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	461a      	mov	r2, r3
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f8 ff57 	bl	80001cc <__aeabi_uldivmod>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4613      	mov	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732c:	d308      	bcc.n	8007340 <UART_SetConfig+0x3d8>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007334:	d204      	bcs.n	8007340 <UART_SetConfig+0x3d8>
        {
          huart->Instance->BRR = usartdiv;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	e0af      	b.n	80074a0 <UART_SetConfig+0x538>
        }
        else
        {
          ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	76bb      	strb	r3, [r7, #26]
 8007344:	e0ac      	b.n	80074a0 <UART_SetConfig+0x538>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734e:	d15b      	bne.n	8007408 <UART_SetConfig+0x4a0>
  {
    switch (clocksource)
 8007350:	7efb      	ldrb	r3, [r7, #27]
 8007352:	2b08      	cmp	r3, #8
 8007354:	d827      	bhi.n	80073a6 <UART_SetConfig+0x43e>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x3f4>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	08007381 	.word	0x08007381
 8007360:	08007389 	.word	0x08007389
 8007364:	08007391 	.word	0x08007391
 8007368:	080073a7 	.word	0x080073a7
 800736c:	08007397 	.word	0x08007397
 8007370:	080073a7 	.word	0x080073a7
 8007374:	080073a7 	.word	0x080073a7
 8007378:	080073a7 	.word	0x080073a7
 800737c:	0800739f 	.word	0x0800739f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007380:	f7fd fff4 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007384:	6178      	str	r0, [r7, #20]
        break;
 8007386:	e013      	b.n	80073b0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007388:	f7fe f806 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 800738c:	6178      	str	r0, [r7, #20]
        break;
 800738e:	e00f      	b.n	80073b0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007390:	4b4a      	ldr	r3, [pc, #296]	; (80074bc <UART_SetConfig+0x554>)
 8007392:	617b      	str	r3, [r7, #20]
        break;
 8007394:	e00c      	b.n	80073b0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007396:	f7fd ff51 	bl	800523c <HAL_RCC_GetSysClockFreq>
 800739a:	6178      	str	r0, [r7, #20]
        break;
 800739c:	e008      	b.n	80073b0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a2:	617b      	str	r3, [r7, #20]
        break;
 80073a4:	e004      	b.n	80073b0 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	76bb      	strb	r3, [r7, #26]
        break;
 80073ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d074      	beq.n	80074a0 <UART_SetConfig+0x538>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	005a      	lsls	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	441a      	add	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b0f      	cmp	r3, #15
 80073d2:	d916      	bls.n	8007402 <UART_SetConfig+0x49a>
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073da:	d212      	bcs.n	8007402 <UART_SetConfig+0x49a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f023 030f 	bic.w	r3, r3, #15
 80073e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	89fb      	ldrh	r3, [r7, #14]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	89fa      	ldrh	r2, [r7, #14]
 80073fe:	60da      	str	r2, [r3, #12]
 8007400:	e04e      	b.n	80074a0 <UART_SetConfig+0x538>
      }
      else
      {
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	76bb      	strb	r3, [r7, #26]
 8007406:	e04b      	b.n	80074a0 <UART_SetConfig+0x538>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007408:	7efb      	ldrb	r3, [r7, #27]
 800740a:	2b08      	cmp	r3, #8
 800740c:	d827      	bhi.n	800745e <UART_SetConfig+0x4f6>
 800740e:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <UART_SetConfig+0x4ac>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	08007439 	.word	0x08007439
 8007418:	08007441 	.word	0x08007441
 800741c:	08007449 	.word	0x08007449
 8007420:	0800745f 	.word	0x0800745f
 8007424:	0800744f 	.word	0x0800744f
 8007428:	0800745f 	.word	0x0800745f
 800742c:	0800745f 	.word	0x0800745f
 8007430:	0800745f 	.word	0x0800745f
 8007434:	08007457 	.word	0x08007457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007438:	f7fd ff98 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 800743c:	6178      	str	r0, [r7, #20]
        break;
 800743e:	e013      	b.n	8007468 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007440:	f7fd ffaa 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 8007444:	6178      	str	r0, [r7, #20]
        break;
 8007446:	e00f      	b.n	8007468 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007448:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <UART_SetConfig+0x554>)
 800744a:	617b      	str	r3, [r7, #20]
        break;
 800744c:	e00c      	b.n	8007468 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800744e:	f7fd fef5 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8007452:	6178      	str	r0, [r7, #20]
        break;
 8007454:	e008      	b.n	8007468 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800745a:	617b      	str	r3, [r7, #20]
        break;
 800745c:	e004      	b.n	8007468 <UART_SetConfig+0x500>
      default:
        pclk = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	76bb      	strb	r3, [r7, #26]
        break;
 8007466:	bf00      	nop
    }

    if (pclk != 0U)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d018      	beq.n	80074a0 <UART_SetConfig+0x538>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	085a      	lsrs	r2, r3, #1
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007480:	b29b      	uxth	r3, r3
 8007482:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d908      	bls.n	800749c <UART_SetConfig+0x534>
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007490:	d204      	bcs.n	800749c <UART_SetConfig+0x534>
      {
        huart->Instance->BRR = usartdiv;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	60da      	str	r2, [r3, #12]
 800749a:	e001      	b.n	80074a0 <UART_SetConfig+0x538>
      }
      else
      {
        ret = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80074ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bdb0      	pop	{r4, r5, r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40008000 	.word	0x40008000
 80074bc:	00f42400 	.word	0x00f42400

080074c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2bff      	cmp	r3, #255	; 0xff
 80074ce:	d904      	bls.n	80074da <UART_AdvFeatureConfig+0x1a>
 80074d0:	f640 513a 	movw	r1, #3386	; 0xd3a
 80074d4:	489a      	ldr	r0, [pc, #616]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 80074d6:	f7f9 fae6 	bl	8000aa6 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d018      	beq.n	8007518 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d009      	beq.n	8007502 <UART_AdvFeatureConfig+0x42>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f6:	d004      	beq.n	8007502 <UART_AdvFeatureConfig+0x42>
 80074f8:	f640 513f 	movw	r1, #3391	; 0xd3f
 80074fc:	4890      	ldr	r0, [pc, #576]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 80074fe:	f7f9 fad2 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d018      	beq.n	8007556 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <UART_AdvFeatureConfig+0x80>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007534:	d004      	beq.n	8007540 <UART_AdvFeatureConfig+0x80>
 8007536:	f640 5146 	movw	r1, #3398	; 0xd46
 800753a:	4881      	ldr	r0, [pc, #516]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 800753c:	f7f9 fab3 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d018      	beq.n	8007594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <UART_AdvFeatureConfig+0xbe>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007572:	d004      	beq.n	800757e <UART_AdvFeatureConfig+0xbe>
 8007574:	f640 514d 	movw	r1, #3405	; 0xd4d
 8007578:	4871      	ldr	r0, [pc, #452]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 800757a:	f7f9 fa94 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d018      	beq.n	80075d2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <UART_AdvFeatureConfig+0xfc>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b0:	d004      	beq.n	80075bc <UART_AdvFeatureConfig+0xfc>
 80075b2:	f640 5154 	movw	r1, #3412	; 0xd54
 80075b6:	4862      	ldr	r0, [pc, #392]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 80075b8:	f7f9 fa75 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d018      	beq.n	8007610 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <UART_AdvFeatureConfig+0x13a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ee:	d004      	beq.n	80075fa <UART_AdvFeatureConfig+0x13a>
 80075f0:	f640 515b 	movw	r1, #3419	; 0xd5b
 80075f4:	4852      	ldr	r0, [pc, #328]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 80075f6:	f7f9 fa56 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d018      	beq.n	800764e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d009      	beq.n	8007638 <UART_AdvFeatureConfig+0x178>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762c:	d004      	beq.n	8007638 <UART_AdvFeatureConfig+0x178>
 800762e:	f640 5162 	movw	r1, #3426	; 0xd62
 8007632:	4843      	ldr	r0, [pc, #268]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 8007634:	f7f9 fa37 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d04f      	beq.n	80076fa <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a39      	ldr	r2, [pc, #228]	; (8007744 <UART_AdvFeatureConfig+0x284>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <UART_AdvFeatureConfig+0x1b8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a37      	ldr	r2, [pc, #220]	; (8007748 <UART_AdvFeatureConfig+0x288>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <UART_AdvFeatureConfig+0x1b8>
 800766e:	f640 5169 	movw	r1, #3433	; 0xd69
 8007672:	4833      	ldr	r0, [pc, #204]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 8007674:	f7f9 fa17 	bl	8000aa6 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <UART_AdvFeatureConfig+0x1d4>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007688:	d004      	beq.n	8007694 <UART_AdvFeatureConfig+0x1d4>
 800768a:	f640 516a 	movw	r1, #3434	; 0xd6a
 800768e:	482c      	ldr	r0, [pc, #176]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 8007690:	f7f9 fa09 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076b2:	d122      	bne.n	80076fa <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d013      	beq.n	80076e4 <UART_AdvFeatureConfig+0x224>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c4:	d00e      	beq.n	80076e4 <UART_AdvFeatureConfig+0x224>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ce:	d009      	beq.n	80076e4 <UART_AdvFeatureConfig+0x224>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076d8:	d004      	beq.n	80076e4 <UART_AdvFeatureConfig+0x224>
 80076da:	f640 516f 	movw	r1, #3439	; 0xd6f
 80076de:	4818      	ldr	r0, [pc, #96]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 80076e0:	f7f9 f9e1 	bl	8000aa6 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d018      	beq.n	8007738 <UART_AdvFeatureConfig+0x278>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <UART_AdvFeatureConfig+0x262>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007712:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007716:	d004      	beq.n	8007722 <UART_AdvFeatureConfig+0x262>
 8007718:	f640 5177 	movw	r1, #3447	; 0xd77
 800771c:	4808      	ldr	r0, [pc, #32]	; (8007740 <UART_AdvFeatureConfig+0x280>)
 800771e:	f7f9 f9c2 	bl	8000aa6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	605a      	str	r2, [r3, #4]
  }
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	08007cd4 	.word	0x08007cd4
 8007744:	40013800 	.word	0x40013800
 8007748:	40004400 	.word	0x40004400

0800774c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af02      	add	r7, sp, #8
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800775c:	f7f9 fcac 	bl	80010b8 <HAL_GetTick>
 8007760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b08      	cmp	r3, #8
 800776e:	d10e      	bne.n	800778e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f82d 	bl	80077de <UART_WaitOnFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e023      	b.n	80077d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b04      	cmp	r3, #4
 800779a:	d10e      	bne.n	80077ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800779c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f817 	bl	80077de <UART_WaitOnFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e00d      	b.n	80077d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	603b      	str	r3, [r7, #0]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ee:	e05e      	b.n	80078ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d05a      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f8:	f7f9 fc5e 	bl	80010b8 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	429a      	cmp	r2, r3
 8007806:	d302      	bcc.n	800780e <UART_WaitOnFlagUntilTimeout+0x30>
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11b      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800781c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0201 	bic.w	r2, r2, #1
 800782c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e043      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d02c      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800785e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007862:	d124      	bne.n	80078ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800786c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800787c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2220      	movs	r2, #32
 8007892:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e00f      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4013      	ands	r3, r2
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	bf0c      	ite	eq
 80078be:	2301      	moveq	r3, #1
 80078c0:	2300      	movne	r3, #0
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d091      	beq.n	80077f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007902:	2b01      	cmp	r3, #1
 8007904:	d107      	bne.n	8007916 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0210 	bic.w	r2, r2, #16
 8007914:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f7ff faf2 	bl	8006f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007976:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff facf 	bl	8006f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <__libc_init_array>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4d0d      	ldr	r5, [pc, #52]	; (80079e0 <__libc_init_array+0x38>)
 80079ac:	4c0d      	ldr	r4, [pc, #52]	; (80079e4 <__libc_init_array+0x3c>)
 80079ae:	1b64      	subs	r4, r4, r5
 80079b0:	10a4      	asrs	r4, r4, #2
 80079b2:	2600      	movs	r6, #0
 80079b4:	42a6      	cmp	r6, r4
 80079b6:	d109      	bne.n	80079cc <__libc_init_array+0x24>
 80079b8:	4d0b      	ldr	r5, [pc, #44]	; (80079e8 <__libc_init_array+0x40>)
 80079ba:	4c0c      	ldr	r4, [pc, #48]	; (80079ec <__libc_init_array+0x44>)
 80079bc:	f000 f820 	bl	8007a00 <_init>
 80079c0:	1b64      	subs	r4, r4, r5
 80079c2:	10a4      	asrs	r4, r4, #2
 80079c4:	2600      	movs	r6, #0
 80079c6:	42a6      	cmp	r6, r4
 80079c8:	d105      	bne.n	80079d6 <__libc_init_array+0x2e>
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d0:	4798      	blx	r3
 80079d2:	3601      	adds	r6, #1
 80079d4:	e7ee      	b.n	80079b4 <__libc_init_array+0xc>
 80079d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079da:	4798      	blx	r3
 80079dc:	3601      	adds	r6, #1
 80079de:	e7f2      	b.n	80079c6 <__libc_init_array+0x1e>
 80079e0:	08007d60 	.word	0x08007d60
 80079e4:	08007d60 	.word	0x08007d60
 80079e8:	08007d60 	.word	0x08007d60
 80079ec:	08007d64 	.word	0x08007d64

080079f0 <memset>:
 80079f0:	4402      	add	r2, r0
 80079f2:	4603      	mov	r3, r0
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d100      	bne.n	80079fa <memset+0xa>
 80079f8:	4770      	bx	lr
 80079fa:	f803 1b01 	strb.w	r1, [r3], #1
 80079fe:	e7f9      	b.n	80079f4 <memset+0x4>

08007a00 <_init>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr

08007a0c <_fini>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr
