
Teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dac  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006190  08006190  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006198  08006198  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080061a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  080061ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080061ac  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002316  00000000  00000000  0003390d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00035c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00036e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d7a  00000000  00000000  00037fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001504c  00000000  00000000  00059d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7a90  00000000  00000000  0006ed86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  0014686c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005f20 	.word	0x08005f20

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005f20 	.word	0x08005f20

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	if( htim->Instance == htim16.Instance )
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d110      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80004d8:	217f      	movs	r1, #127	; 0x7f
 80004da:	480b      	ldr	r0, [pc, #44]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004dc:	f002 fb10 	bl	8002b00 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start(&hadc1);
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004e2:	f001 f947 	bl	8001774 <HAL_ADC_Start>
		if( HAL_ADC_PollForConversion(&hadc1, 1) == HAL_TIMEOUT )
 80004e6:	2101      	movs	r1, #1
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004ea:	f001 f9b5 	bl	8001858 <HAL_ADC_PollForConversion>
		{
		 // Sinalizar falha de timeout.
		}
		amostra = HAL_ADC_GetValue(&hadc1);
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004f0:	f001 fa50 	bl	8001994 <HAL_ADC_GetValue>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004f8:	6013      	str	r3, [r2, #0]
	}
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000114 	.word	0x20000114
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000028 	.word	0x20000028

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fb61 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f80e 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f928 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f8f6 	bl	8000710 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000524:	f000 f86a 	bl	80005fc <MX_ADC1_Init>
  MX_TIM16_Init();
 8000528:	f000 f8cc 	bl	80006c4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800052c:	4801      	ldr	r0, [pc, #4]	; (8000534 <main+0x24>)
 800052e:	f004 fd47 	bl	8004fc0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000532:	e7fe      	b.n	8000532 <main+0x22>
 8000534:	20000114 	.word	0x20000114

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	; 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	; 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 fce2 	bl	8005f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055e:	f002 feff 	bl	8003360 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f96e 	bl	8000848 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800056c:	f002 feda 	bl	8003324 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <SystemClock_Config+0xc0>)
 8000572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000576:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <SystemClock_Config+0xc0>)
 8000578:	f023 0318 	bic.w	r3, r3, #24
 800057c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000580:	2314      	movs	r3, #20
 8000582:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000590:	2360      	movs	r3, #96	; 0x60
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000598:	2301      	movs	r3, #1
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005a0:	2310      	movs	r3, #16
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a4:	2307      	movs	r3, #7
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 ff35 	bl	8003424 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005c0:	f000 f942 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2303      	movs	r3, #3
 80005ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	2101      	movs	r1, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fc97 	bl	8003f10 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e8:	f000 f92e 	bl	8000848 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005ec:	f004 fa9a 	bl	8004b24 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005f0:	bf00      	nop
 80005f2:	3758      	adds	r7, #88	; 0x58
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000614:	4a29      	ldr	r2, [pc, #164]	; (80006bc <MX_ADC1_Init+0xc0>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_ADC1_Init+0xbc>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xbc>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000632:	2204      	movs	r2, #4
 8000634:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000638:	2200      	movs	r2, #0
 800063a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_ADC1_Init+0xbc>)
 800063e:	2200      	movs	r2, #0
 8000640:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000644:	2201      	movs	r2, #1
 8000646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_ADC1_Init+0xbc>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_ADC1_Init+0xbc>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000666:	2200      	movs	r2, #0
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_ADC1_Init+0xbc>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_ADC1_Init+0xbc>)
 8000674:	f000 fd34 	bl	80010e0 <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800067e:	f000 f8e3 	bl	8000848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0xc4>)
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	; 0x7f
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_ADC1_Init+0xbc>)
 80006a0:	f001 fb80 	bl	8001da4 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006aa:	f000 f8cd 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	50040000 	.word	0x50040000
 80006c0:	21800100 	.word	0x21800100

080006c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_TIM16_Init+0x44>)
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <MX_TIM16_Init+0x48>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_TIM16_Init+0x44>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_TIM16_Init+0x44>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8000;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_TIM16_Init+0x44>)
 80006dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_TIM16_Init+0x44>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_TIM16_Init+0x44>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_TIM16_Init+0x44>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_TIM16_Init+0x44>)
 80006f6:	f004 fba3 	bl	8004e40 <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000700:	f000 f8a2 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000114 	.word	0x20000114
 800070c:	40014400 	.word	0x40014400

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	f004 fe7c 	bl	8005450 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f873 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000090 	.word	0x20000090
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_GPIO_Init+0xcc>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a2c      	ldr	r2, [pc, #176]	; (800083c <MX_GPIO_Init+0xcc>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_GPIO_Init+0xcc>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_GPIO_Init+0xcc>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a26      	ldr	r2, [pc, #152]	; (800083c <MX_GPIO_Init+0xcc>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0xcc>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_GPIO_Init+0xcc>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_GPIO_Init+0xcc>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_GPIO_Init+0xcc>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_GPIO_Init+0xcc>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a1a      	ldr	r2, [pc, #104]	; (800083c <MX_GPIO_Init+0xcc>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0xcc>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007e6:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 80007ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f002 fb6b 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000802:	23f3      	movs	r3, #243	; 0xf3
 8000804:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <MX_GPIO_Init+0xd0>)
 8000816:	f002 fb5f 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800081a:	2308      	movs	r3, #8
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_GPIO_Init+0xd4>)
 800082e:	f002 fb53 	bl	8002ed8 <HAL_GPIO_Init>

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400
 8000844:	48001c00 	.word	0x48001c00

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>

08000852 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	; 0x60
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	; 0x58
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09e      	sub	sp, #120	; 0x78
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2254      	movs	r2, #84	; 0x54
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 fb1d 	bl	8005f10 <memset>
  if(hadc->Instance==ADC1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a29      	ldr	r2, [pc, #164]	; (8000980 <HAL_ADC_MspInit+0xd0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d14b      	bne.n	8000978 <HAL_ADC_MspInit+0xc8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ea:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008f4:	2310      	movs	r3, #16
 80008f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008f8:	2307      	movs	r3, #7
 80008fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000900:	2308      	movs	r3, #8
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fda4 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800091a:	f7ff ff95 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_ADC_MspInit+0xd4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <HAL_ADC_MspInit+0xd4>)
 8000924:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <HAL_ADC_MspInit+0xd4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <HAL_ADC_MspInit+0xd4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <HAL_ADC_MspInit+0xd4>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_ADC_MspInit+0xd4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800094e:	2308      	movs	r3, #8
 8000950:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000952:	230b      	movs	r3, #11
 8000954:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f002 fab8 	bl	8002ed8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2012      	movs	r0, #18
 800096e:	f002 fa63 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000972:	2012      	movs	r0, #18
 8000974:	f002 fa8c 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3778      	adds	r7, #120	; 0x78
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	50040000 	.word	0x50040000
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_TIM_Base_MspInit+0x44>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d113      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_TIM_Base_MspInit+0x48>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <HAL_TIM_Base_MspInit+0x48>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_TIM_Base_MspInit+0x48>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2019      	movs	r0, #25
 80009b8:	f002 fa3e 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009bc:	2019      	movs	r0, #25
 80009be:	f002 fa67 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40014400 	.word	0x40014400
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09e      	sub	sp, #120	; 0x78
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2254      	movs	r2, #84	; 0x54
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f005 fa8b 	bl	8005f10 <memset>
  if(huart->Instance==USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <HAL_UART_MspInit+0xcc>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d148      	bne.n	8000a96 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fd23 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a1c:	f7ff ff14 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <HAL_UART_MspInit+0xd0>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_UART_MspInit+0xd0>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <HAL_UART_MspInit+0xd0>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_UART_MspInit+0xd0>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0xd0>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0xd0>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a50:	2304      	movs	r3, #4
 8000a52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a60:	2307      	movs	r3, #7
 8000a62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f002 fa33 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a84:	2303      	movs	r3, #3
 8000a86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f002 fa21 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3778      	adds	r7, #120	; 0x78
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f8c6 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <ADC1_IRQHandler+0x10>)
 8000b02:	f000 ff61 	bl	80019c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000002c 	.word	0x2000002c

08000b10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b16:	f004 fad1 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000114 	.word	0x20000114

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x5c>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <SystemInit+0x5c>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <SystemInit+0x60>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <SystemInit+0x60>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <SystemInit+0x60>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <SystemInit+0x60>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <SystemInit+0x60>)
 8000b50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <SystemInit+0x60>)
 8000b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SystemInit+0x60>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SystemInit+0x60>)
 8000b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SystemInit+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	40021000 	.word	0x40021000

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffca 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b92:	e003      	b.n	8000b9c <LoopCopyDataInit>

08000b94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b9a:	3104      	adds	r1, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ba0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ba2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ba4:	d3f6      	bcc.n	8000b94 <CopyDataInit>
	ldr	r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ba8:	e002      	b.n	8000bb0 <LoopFillZerobss>

08000baa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000baa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bac:	f842 3b04 	str.w	r3, [r2], #4

08000bb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000bb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bb4:	d3f9      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f005 f987 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fca9 	bl	8000510 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000bc4:	080061a0 	.word	0x080061a0
	ldr	r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bd4:	20000164 	.word	0x20000164

08000bd8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <CAN1_RX0_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f002 f907 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff fe34 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d023      	beq.n	8000c68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_InitTick+0x70>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 f942 	bl	8002ec0 <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10f      	bne.n	8000c62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d809      	bhi.n	8000c5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f002 f8f2 	bl	8002e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_InitTick+0x74>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e004      	b.n	8000c6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e001      	b.n	8000c6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000160 	.word	0x20000160

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000160 	.word	0x20000160

08000cc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	609a      	str	r2, [r3, #8]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	f003 0318 	and.w	r3, r3, #24
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3360      	adds	r3, #96	; 0x60
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <LL_ADC_SetOffset+0x44>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	4313      	orrs	r3, r2
 8000d78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d80:	bf00      	nop
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	03fff000 	.word	0x03fff000

08000d90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3360      	adds	r3, #96	; 0x60
 8000d9e:	461a      	mov	r2, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3360      	adds	r3, #96	; 0x60
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3330      	adds	r3, #48	; 0x30
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	4413      	add	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	211f      	movs	r1, #31
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	0e9b      	lsrs	r3, r3, #26
 8000e50:	f003 011f 	and.w	r1, r3, #31
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b087      	sub	sp, #28
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3314      	adds	r3, #20
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	0e5b      	lsrs	r3, r3, #25
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0d1b      	lsrs	r3, r3, #20
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	401a      	ands	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	0d1b      	lsrs	r3, r3, #20
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	431a      	orrs	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ee0:	bf00      	nop
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f04:	43db      	mvns	r3, r3
 8000f06:	401a      	ands	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0318 	and.w	r3, r3, #24
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f10:	40d9      	lsrs	r1, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	400b      	ands	r3, r1
 8000f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	0007ffff 	.word	0x0007ffff

08000f34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6093      	str	r3, [r2, #8]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f6c:	d101      	bne.n	8000f72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fbc:	d101      	bne.n	8000fc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800100c:	f043 0202 	orr.w	r2, r3, #2
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <LL_ADC_IsEnabled+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_ADC_IsEnabled+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b02      	cmp	r3, #2
 8001058:	d101      	bne.n	800105e <LL_ADC_IsDisableOngoing+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_ADC_IsDisableOngoing+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800107c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001080:	f043 0204 	orr.w	r2, r3, #4
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d101      	bne.n	80010ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e330      	b.n	800175c <HAL_ADC_Init+0x67c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a9e      	ldr	r2, [pc, #632]	; (8001378 <HAL_ADC_Init+0x298>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d004      	beq.n	800110e <HAL_ADC_Init+0x2e>
 8001104:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001108:	489c      	ldr	r0, [pc, #624]	; (800137c <HAL_ADC_Init+0x29c>)
 800110a:	f7ff fba2 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d049      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001120:	d044      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800112a:	d03f      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d03b      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800113c:	d036      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001146:	d031      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001150:	d02c      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800115a:	d027      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001164:	d022      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800116e:	d01d      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001178:	d018      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001182:	d013      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800118c:	d00e      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001196:	d009      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80011a0:	d004      	beq.n	80011ac <HAL_ADC_Init+0xcc>
 80011a2:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80011a6:	4875      	ldr	r0, [pc, #468]	; (800137c <HAL_ADC_Init+0x29c>)
 80011a8:	f7ff fb53 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d010      	beq.n	80011d6 <HAL_ADC_Init+0xf6>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d00c      	beq.n	80011d6 <HAL_ADC_Init+0xf6>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b10      	cmp	r3, #16
 80011c2:	d008      	beq.n	80011d6 <HAL_ADC_Init+0xf6>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b18      	cmp	r3, #24
 80011ca:	d004      	beq.n	80011d6 <HAL_ADC_Init+0xf6>
 80011cc:	f240 11a3 	movw	r1, #419	; 0x1a3
 80011d0:	486a      	ldr	r0, [pc, #424]	; (800137c <HAL_ADC_Init+0x29c>)
 80011d2:	f7ff fb3e 	bl	8000852 <assert_failed>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
#endif
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d008      	beq.n	80011f0 <HAL_ADC_Init+0x110>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_Init+0x110>
 80011e6:	f240 11a7 	movw	r1, #423	; 0x1a7
 80011ea:	4864      	ldr	r0, [pc, #400]	; (800137c <HAL_ADC_Init+0x29c>)
 80011ec:	f7ff fb31 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <HAL_ADC_Init+0x12a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d004      	beq.n	800120a <HAL_ADC_Init+0x12a>
 8001200:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001204:	485d      	ldr	r0, [pc, #372]	; (800137c <HAL_ADC_Init+0x29c>)
 8001206:	f7ff fb24 	bl	8000852 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7e5b      	ldrb	r3, [r3, #25]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <HAL_ADC_Init+0x144>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7e5b      	ldrb	r3, [r3, #25]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d004      	beq.n	8001224 <HAL_ADC_Init+0x144>
 800121a:	f240 11a9 	movw	r1, #425	; 0x1a9
 800121e:	4857      	ldr	r0, [pc, #348]	; (800137c <HAL_ADC_Init+0x29c>)
 8001220:	f7ff fb17 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <HAL_ADC_Init+0x174>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001234:	d00e      	beq.n	8001254 <HAL_ADC_Init+0x174>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800123e:	d009      	beq.n	8001254 <HAL_ADC_Init+0x174>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001248:	d004      	beq.n	8001254 <HAL_ADC_Init+0x174>
 800124a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800124e:	484b      	ldr	r0, [pc, #300]	; (800137c <HAL_ADC_Init+0x29c>)
 8001250:	f7ff faff 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125c:	d053      	beq.n	8001306 <HAL_ADC_Init+0x226>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8001266:	d04e      	beq.n	8001306 <HAL_ADC_Init+0x226>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001270:	d049      	beq.n	8001306 <HAL_ADC_Init+0x226>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 800127a:	d044      	beq.n	8001306 <HAL_ADC_Init+0x226>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001284:	d03f      	beq.n	8001306 <HAL_ADC_Init+0x226>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 800128e:	d03a      	beq.n	8001306 <HAL_ADC_Init+0x226>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8001298:	d035      	beq.n	8001306 <HAL_ADC_Init+0x226>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 80012a2:	d030      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80012ac:	d02b      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012b6:	d026      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80012c0:	d021      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c6:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 80012ca:	d01c      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80012d4:	d017      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 80012de:	d012      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80012e8:	d00d      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 80012f2:	d008      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_ADC_Init+0x226>
 80012fc:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001300:	481e      	ldr	r0, [pc, #120]	; (800137c <HAL_ADC_Init+0x29c>)
 8001302:	f7ff faa6 	bl	8000852 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <HAL_ADC_Init+0x244>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001316:	2b01      	cmp	r3, #1
 8001318:	d004      	beq.n	8001324 <HAL_ADC_Init+0x244>
 800131a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <HAL_ADC_Init+0x29c>)
 8001320:	f7ff fa97 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d008      	beq.n	800133e <HAL_ADC_Init+0x25e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	2b08      	cmp	r3, #8
 8001332:	d004      	beq.n	800133e <HAL_ADC_Init+0x25e>
 8001334:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001338:	4810      	ldr	r0, [pc, #64]	; (800137c <HAL_ADC_Init+0x29c>)
 800133a:	f7ff fa8a 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_ADC_Init+0x27a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134e:	d004      	beq.n	800135a <HAL_ADC_Init+0x27a>
 8001350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <HAL_ADC_Init+0x29c>)
 8001356:	f7ff fa7c 	bl	8000852 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7e1b      	ldrb	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00e      	beq.n	8001380 <HAL_ADC_Init+0x2a0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e1b      	ldrb	r3, [r3, #24]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d00a      	beq.n	8001380 <HAL_ADC_Init+0x2a0>
 800136a:	f240 11af 	movw	r1, #431	; 0x1af
 800136e:	4803      	ldr	r0, [pc, #12]	; (800137c <HAL_ADC_Init+0x29c>)
 8001370:	f7ff fa6f 	bl	8000852 <assert_failed>
 8001374:	e004      	b.n	8001380 <HAL_ADC_Init+0x2a0>
 8001376:	bf00      	nop
 8001378:	50040000 	.word	0x50040000
 800137c:	08005f38 	.word	0x08005f38
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_ADC_Init+0x2be>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001390:	2b01      	cmp	r3, #1
 8001392:	d004      	beq.n	800139e <HAL_ADC_Init+0x2be>
 8001394:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001398:	483a      	ldr	r0, [pc, #232]	; (8001484 <HAL_ADC_Init+0x3a4>)
 800139a:	f7ff fa5a 	bl	8000852 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d02d      	beq.n	8001402 <HAL_ADC_Init+0x322>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_ADC_Init+0x2d6>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d904      	bls.n	80013c0 <HAL_ADC_Init+0x2e0>
 80013b6:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <HAL_ADC_Init+0x3a4>)
 80013bc:	f7ff fa49 	bl	8000852 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_ADC_Init+0x2fe>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d004      	beq.n	80013de <HAL_ADC_Init+0x2fe>
 80013d4:	f240 11b5 	movw	r1, #437	; 0x1b5
 80013d8:	482a      	ldr	r0, [pc, #168]	; (8001484 <HAL_ADC_Init+0x3a4>)
 80013da:	f7ff fa3a 	bl	8000852 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d10c      	bne.n	8001402 <HAL_ADC_Init+0x322>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_ADC_Init+0x318>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d904      	bls.n	8001402 <HAL_ADC_Init+0x322>
 80013f8:	f240 11b9 	movw	r1, #441	; 0x1b9
 80013fc:	4821      	ldr	r0, [pc, #132]	; (8001484 <HAL_ADC_Init+0x3a4>)
 80013fe:	f7ff fa28 	bl	8000852 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_ADC_Init+0x33e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7e5b      	ldrb	r3, [r3, #25]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d104      	bne.n	800141e <HAL_ADC_Init+0x33e>
 8001414:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001418:	481a      	ldr	r0, [pc, #104]	; (8001484 <HAL_ADC_Init+0x3a4>)
 800141a:	f7ff fa1a 	bl	8000852 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <HAL_ADC_Init+0x35a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fa42 	bl	80008b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fd8a 	bl	8000f58 <LL_ADC_IsDeepPowerDownEnabled>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <HAL_ADC_Init+0x374>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fd70 	bl	8000f34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fda5 	bl	8000fa8 <LL_ADC_IsInternalRegulatorEnabled>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d11b      	bne.n	800149c <HAL_ADC_Init+0x3bc>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd89 	bl	8000f80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_ADC_Init+0x3a8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	099b      	lsrs	r3, r3, #6
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <HAL_ADC_Init+0x3ac>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	099b      	lsrs	r3, r3, #6
 800147c:	3301      	adds	r3, #1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001482:	e008      	b.n	8001496 <HAL_ADC_Init+0x3b6>
 8001484:	08005f38 	.word	0x08005f38
 8001488:	20000000 	.word	0x20000000
 800148c:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3b01      	subs	r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <HAL_ADC_Init+0x3b0>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fd81 	bl	8000fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10d      	bne.n	80014c8 <HAL_ADC_Init+0x3e8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	f043 0210 	orr.w	r2, r3, #16
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fde1 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 80014d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f040 8134 	bne.w	800174a <HAL_ADC_Init+0x66a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f040 8130 	bne.w	800174a <HAL_ADC_Init+0x66a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014f2:	f043 0202 	orr.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd8e 	bl	8001020 <LL_ADC_IsEnabled>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10b      	bne.n	8001522 <HAL_ADC_Init+0x442>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800150a:	4896      	ldr	r0, [pc, #600]	; (8001764 <HAL_ADC_Init+0x684>)
 800150c:	f7ff fd88 	bl	8001020 <LL_ADC_IsEnabled>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_ADC_Init+0x442>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4619      	mov	r1, r3
 800151c:	4892      	ldr	r0, [pc, #584]	; (8001768 <HAL_ADC_Init+0x688>)
 800151e:	f7ff fbd1 	bl	8000cc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e5b      	ldrb	r3, [r3, #25]
 8001526:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800152c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001532:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001538:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001540:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d106      	bne.n	800155e <HAL_ADC_Init+0x47e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	3b01      	subs	r3, #1
 8001556:	045b      	lsls	r3, r3, #17
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_ADC_Init+0x49a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	4b7a      	ldr	r3, [pc, #488]	; (800176c <HAL_ADC_Init+0x68c>)
 8001582:	4013      	ands	r3, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	69b9      	ldr	r1, [r7, #24]
 800158a:	430b      	orrs	r3, r1
 800158c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fd7e 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 8001598:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fd8b 	bl	80010ba <LL_ADC_INJ_IsConversionOngoing>
 80015a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 80ac 	bne.w	8001706 <HAL_ADC_Init+0x626>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 80a8 	bne.w	8001706 <HAL_ADC_Init+0x626>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d2:	f023 0302 	bic.w	r3, r3, #2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	430b      	orrs	r3, r1
 80015de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	f040 8085 	bne.w	80016f6 <HAL_ADC_Init+0x616>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_ADC_Init+0x556>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d01c      	beq.n	8001636 <HAL_ADC_Init+0x556>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001600:	2b08      	cmp	r3, #8
 8001602:	d018      	beq.n	8001636 <HAL_ADC_Init+0x556>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d014      	beq.n	8001636 <HAL_ADC_Init+0x556>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	2b10      	cmp	r3, #16
 8001612:	d010      	beq.n	8001636 <HAL_ADC_Init+0x556>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	2b14      	cmp	r3, #20
 800161a:	d00c      	beq.n	8001636 <HAL_ADC_Init+0x556>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001620:	2b18      	cmp	r3, #24
 8001622:	d008      	beq.n	8001636 <HAL_ADC_Init+0x556>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001628:	2b1c      	cmp	r3, #28
 800162a:	d004      	beq.n	8001636 <HAL_ADC_Init+0x556>
 800162c:	f240 216f 	movw	r1, #623	; 0x26f
 8001630:	484f      	ldr	r0, [pc, #316]	; (8001770 <HAL_ADC_Init+0x690>)
 8001632:	f7ff f90e 	bl	8000852 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d025      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2b20      	cmp	r3, #32
 8001644:	d021      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	2b40      	cmp	r3, #64	; 0x40
 800164c:	d01d      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2b60      	cmp	r3, #96	; 0x60
 8001654:	d019      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b80      	cmp	r3, #128	; 0x80
 800165c:	d015      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	2ba0      	cmp	r3, #160	; 0xa0
 8001664:	d011      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2bc0      	cmp	r3, #192	; 0xc0
 800166c:	d00d      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2be0      	cmp	r3, #224	; 0xe0
 8001674:	d009      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800167e:	d004      	beq.n	800168a <HAL_ADC_Init+0x5aa>
 8001680:	f44f 711c 	mov.w	r1, #624	; 0x270
 8001684:	483a      	ldr	r0, [pc, #232]	; (8001770 <HAL_ADC_Init+0x690>)
 8001686:	f7ff f8e4 	bl	8000852 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_ADC_Init+0x5c6>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169a:	d004      	beq.n	80016a6 <HAL_ADC_Init+0x5c6>
 800169c:	f240 2171 	movw	r1, #625	; 0x271
 80016a0:	4833      	ldr	r0, [pc, #204]	; (8001770 <HAL_ADC_Init+0x690>)
 80016a2:	f7ff f8d6 	bl	8000852 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d00a      	beq.n	80016c4 <HAL_ADC_Init+0x5e4>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	f240 4201 	movw	r2, #1025	; 0x401
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_ADC_Init+0x5e4>
 80016ba:	f240 2172 	movw	r1, #626	; 0x272
 80016be:	482c      	ldr	r0, [pc, #176]	; (8001770 <HAL_ADC_Init+0x690>)
 80016c0:	f7ff f8c7 	bl	8000852 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e0:	4311      	orrs	r1, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016e6:	430a      	orrs	r2, r1
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	e007      	b.n	8001706 <HAL_ADC_Init+0x626>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d10c      	bne.n	8001728 <HAL_ADC_Init+0x648>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f023 010f 	bic.w	r1, r3, #15
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
 8001726:	e007      	b.n	8001738 <HAL_ADC_Init+0x658>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 020f 	bic.w	r2, r2, #15
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	f023 0303 	bic.w	r3, r3, #3
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
 8001748:	e007      	b.n	800175a <HAL_ADC_Init+0x67a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	f043 0210 	orr.w	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800175a:	7ffb      	ldrb	r3, [r7, #31]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	50040000 	.word	0x50040000
 8001768:	50040300 	.word	0x50040300
 800176c:	fff0c007 	.word	0xfff0c007
 8001770:	08005f38 	.word	0x08005f38

08001774 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a33      	ldr	r2, [pc, #204]	; (8001850 <HAL_ADC_Start+0xdc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d004      	beq.n	8001790 <HAL_ADC_Start+0x1c>
 8001786:	f240 41c5 	movw	r1, #1221	; 0x4c5
 800178a:	4832      	ldr	r0, [pc, #200]	; (8001854 <HAL_ADC_Start+0xe0>)
 800178c:	f7ff f861 	bl	8000852 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc7d 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d14f      	bne.n	8001840 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Start+0x3a>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e04b      	b.n	8001846 <HAL_ADC_Start+0xd2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f001 f8b4 	bl	8002924 <ADC_Enable>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d137      	bne.n	8001836 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e6:	d106      	bne.n	80017f6 <HAL_ADC_Start+0x82>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f023 0206 	bic.w	r2, r3, #6
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58
 80017f4:	e002      	b.n	80017fc <HAL_ADC_Start+0x88>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	221c      	movs	r2, #28
 8001802:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_ADC_Start+0xb6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001822:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc1c 	bl	800106c <LL_ADC_REG_StartConversion>
 8001834:	e006      	b.n	8001844 <HAL_ADC_Start+0xd0>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800183e:	e001      	b.n	8001844 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001840:	2302      	movs	r3, #2
 8001842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	50040000 	.word	0x50040000
 8001854:	08005f38 	.word	0x08005f38

08001858 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a49      	ldr	r2, [pc, #292]	; (800198c <HAL_ADC_PollForConversion+0x134>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d004      	beq.n	8001876 <HAL_ADC_PollForConversion+0x1e>
 800186c:	f240 5184 	movw	r1, #1412	; 0x584
 8001870:	4847      	ldr	r0, [pc, #284]	; (8001990 <HAL_ADC_PollForConversion+0x138>)
 8001872:	f7fe ffee 	bl	8000852 <assert_failed>

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b08      	cmp	r3, #8
 800187c:	d102      	bne.n	8001884 <HAL_ADC_PollForConversion+0x2c>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800187e:	2308      	movs	r3, #8
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e010      	b.n	80018a6 <HAL_ADC_PollForConversion+0x4e>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_ADC_PollForConversion+0x4a>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001896:	f043 0220 	orr.w	r2, r3, #32
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06f      	b.n	8001982 <HAL_ADC_PollForConversion+0x12a>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80018a2:	2304      	movs	r3, #4
 80018a4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018a6:	f7ff fa01 	bl	8000cac <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018ac:	e021      	b.n	80018f2 <HAL_ADC_PollForConversion+0x9a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d01d      	beq.n	80018f2 <HAL_ADC_PollForConversion+0x9a>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018b6:	f7ff f9f9 	bl	8000cac <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d302      	bcc.n	80018cc <HAL_ADC_PollForConversion+0x74>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d112      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x9a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10b      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x9a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	f043 0204 	orr.w	r2, r3, #4
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e047      	b.n	8001982 <HAL_ADC_PollForConversion+0x12a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0d6      	beq.n	80018ae <HAL_ADC_PollForConversion+0x56>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fa6e 	bl	8000df2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01c      	beq.n	8001956 <HAL_ADC_PollForConversion+0xfe>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e5b      	ldrb	r3, [r3, #25]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d118      	bne.n	8001956 <HAL_ADC_PollForConversion+0xfe>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b08      	cmp	r3, #8
 8001930:	d111      	bne.n	8001956 <HAL_ADC_PollForConversion+0xfe>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_PollForConversion+0xfe>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d104      	bne.n	800196e <HAL_ADC_PollForConversion+0x116>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2208      	movs	r2, #8
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e008      	b.n	8001980 <HAL_ADC_PollForConversion+0x128>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d103      	bne.n	8001980 <HAL_ADC_PollForConversion+0x128>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	220c      	movs	r2, #12
 800197e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	50040000 	.word	0x50040000
 8001990:	08005f38 	.word	0x08005f38

08001994 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_ADC_GetValue+0x2c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d004      	beq.n	80019b0 <HAL_ADC_GetValue+0x1c>
 80019a6:	f640 01ae 	movw	r1, #2222	; 0x8ae
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <HAL_ADC_GetValue+0x30>)
 80019ac:	f7fe ff51 	bl	8000852 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	50040000 	.word	0x50040000
 80019c4:	08005f38 	.word	0x08005f38

080019c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	617b      	str	r3, [r7, #20]
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_ADC_IRQHandler+0x240>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d004      	beq.n	80019f8 <HAL_ADC_IRQHandler+0x30>
 80019ee:	f640 01ca 	movw	r1, #2250	; 0x8ca
 80019f2:	4886      	ldr	r0, [pc, #536]	; (8001c0c <HAL_ADC_IRQHandler+0x244>)
 80019f4:	f7fe ff2d 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d008      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x4a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d004      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x4a>
 8001a08:	f640 01cb 	movw	r1, #2251	; 0x8cb
 8001a0c:	487f      	ldr	r0, [pc, #508]	; (8001c0c <HAL_ADC_IRQHandler+0x244>)
 8001a0e:	f7fe ff20 	bl	8000852 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d017      	beq.n	8001a4c <HAL_ADC_IRQHandler+0x84>
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <HAL_ADC_IRQHandler+0x84>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_IRQHandler+0x76>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f001 f900 	bl	8002c44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x98>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_ADC_IRQHandler+0xac>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d05e      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x160>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d059      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x160>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_IRQHandler+0xc4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f9ae 	bl	8000df2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03e      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x152>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d135      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x152>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d12e      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x152>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fae7 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d11a      	bne.n	8001b02 <HAL_ADC_IRQHandler+0x13a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 020c 	bic.w	r2, r2, #12
 8001ada:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d112      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x152>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
 8001b00:	e00b      	b.n	8001b1a <HAL_ADC_IRQHandler+0x152>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f043 0210 	orr.w	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f924 	bl	8001d68 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	220c      	movs	r2, #12
 8001b26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_ADC_IRQHandler+0x174>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d077      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x26e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d072      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x26e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <HAL_ADC_IRQHandler+0x1a0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f97f 	bl	8000e70 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b72:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f93a 	bl	8000df2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b7e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d04c      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x260>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x1e0>
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d044      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x260>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d13f      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x260>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	d138      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x260>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d133      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x260>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fa78 	bl	80010ba <LL_ADC_INJ_IsConversionOngoing>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11f      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x248>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bde:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d117      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x260>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
 8001c04:	e010      	b.n	8001c28 <HAL_ADC_IRQHandler+0x260>
 8001c06:	bf00      	nop
 8001c08:	50040000 	.word	0x50040000
 8001c0c:	08005f38 	.word	0x08005f38
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f043 0210 	orr.w	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 ffe3 	bl	8002bf4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2260      	movs	r2, #96	; 0x60
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d011      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x29c>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00c      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x29c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f890 	bl	8001d7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d012      	beq.n	8001c94 <HAL_ADC_IRQHandler+0x2cc>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00d      	beq.n	8001c94 <HAL_ADC_IRQHandler+0x2cc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 ffc9 	bl	8002c1c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x2fc>
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x2fc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 ffbb 	bl	8002c30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d02a      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x35c>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d025      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x35c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x31e>
    {
      overrun_error = 1UL;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	e008      	b.n	8001cf8 <HAL_ADC_IRQHandler+0x330>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x330>
        {
          overrun_error = 1UL;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10e      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x354>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f83a 	bl	8001d90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d018      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x398>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x398>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	f043 0208 	orr.w	r2, r3, #8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d58:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 ff54 	bl	8002c08 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b0b7      	sub	sp, #220	; 0xdc
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4aa4      	ldr	r2, [pc, #656]	; (8002050 <HAL_ADC_ConfigChannel+0x2ac>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x28>
 8001dc2:	f640 219c 	movw	r1, #2716	; 0xa9c
 8001dc6:	48a3      	ldr	r0, [pc, #652]	; (8002054 <HAL_ADC_ConfigChannel+0x2b0>)
 8001dc8:	f7fe fd43 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b06      	cmp	r3, #6
 8001dd2:	d04f      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d04b      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d047      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b18      	cmp	r3, #24
 8001dea:	d043      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df4:	d03e      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001dfe:	d039      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001e08:	d034      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8001e12:	d02f      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001e1c:	d02a      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e26:	d025      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f240 2206 	movw	r2, #518	; 0x206
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d01f      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001e3c:	d01a      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f240 2212 	movw	r2, #530	; 0x212
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d014      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8001e52:	d00f      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e5c:	d00a      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f240 3206 	movw	r2, #774	; 0x306
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0xd0>
 8001e6a:	f640 219d 	movw	r1, #2717	; 0xa9d
 8001e6e:	4879      	ldr	r0, [pc, #484]	; (8002054 <HAL_ADC_ConfigChannel+0x2b0>)
 8001e70:	f7fe fcef 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d01c      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d018      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d014      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d010      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d00c      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b06      	cmp	r3, #6
 8001eaa:	d008      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b07      	cmp	r3, #7
 8001eb2:	d004      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x11a>
 8001eb4:	f640 219e 	movw	r1, #2718	; 0xa9e
 8001eb8:	4866      	ldr	r0, [pc, #408]	; (8002054 <HAL_ADC_ConfigChannel+0x2b0>)
 8001eba:	f7fe fcca 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ec4:	d009      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x136>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4a63      	ldr	r2, [pc, #396]	; (8002058 <HAL_ADC_ConfigChannel+0x2b4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d004      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x136>
 8001ed0:	f640 219f 	movw	r1, #2719	; 0xa9f
 8001ed4:	485f      	ldr	r0, [pc, #380]	; (8002054 <HAL_ADC_ConfigChannel+0x2b0>)
 8001ed6:	f7fe fcbc 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d014      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x168>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x168>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d00c      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x168>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d008      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x168>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x168>
 8001f02:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8001f06:	4853      	ldr	r0, [pc, #332]	; (8002054 <HAL_ADC_ConfigChannel+0x2b0>)
 8001f08:	f7fe fca3 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	695c      	ldr	r4, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ff09 	bl	8000d2c <LL_ADC_GetResolution>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	429c      	cmp	r4, r3
 8001f28:	d904      	bls.n	8001f34 <HAL_ADC_ConfigChannel+0x190>
 8001f2a:	f640 21a1 	movw	r1, #2721	; 0xaa1
 8001f2e:	4849      	ldr	r0, [pc, #292]	; (8002054 <HAL_ADC_ConfigChannel+0x2b0>)
 8001f30:	f7fe fc8f 	bl	8000852 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d009      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x1ac>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d104      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1ac>
 8001f46:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8001f4a:	4842      	ldr	r0, [pc, #264]	; (8002054 <HAL_ADC_ConfigChannel+0x2b0>)
 8001f4c:	f7fe fc81 	bl	8000852 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a40      	ldr	r2, [pc, #256]	; (8002058 <HAL_ADC_ConfigChannel+0x2b4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	f000 80c0 	beq.w	80020dc <HAL_ADC_ConfigChannel+0x338>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3b      	ldr	r2, [pc, #236]	; (8002050 <HAL_ADC_ConfigChannel+0x2ac>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	f040 80b4 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x32c>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3b      	ldr	r2, [pc, #236]	; (800205c <HAL_ADC_ConfigChannel+0x2b8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	f000 8104 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a39      	ldr	r2, [pc, #228]	; (8002060 <HAL_ADC_ConfigChannel+0x2bc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	f000 80fe 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a37      	ldr	r2, [pc, #220]	; (8002064 <HAL_ADC_ConfigChannel+0x2c0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	f000 80f8 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a35      	ldr	r2, [pc, #212]	; (8002068 <HAL_ADC_ConfigChannel+0x2c4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f000 80f2 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_ADC_ConfigChannel+0x2c8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	f000 80ec 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a31      	ldr	r2, [pc, #196]	; (8002070 <HAL_ADC_ConfigChannel+0x2cc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	f000 80e6 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <HAL_ADC_ConfigChannel+0x2d0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f000 80e0 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <HAL_ADC_ConfigChannel+0x2d4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f000 80da 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_ADC_ConfigChannel+0x2d8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f000 80d4 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	; (8002080 <HAL_ADC_ConfigChannel+0x2dc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f000 80ce 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a27      	ldr	r2, [pc, #156]	; (8002084 <HAL_ADC_ConfigChannel+0x2e0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f000 80c8 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <HAL_ADC_ConfigChannel+0x2e4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	f000 80c2 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <HAL_ADC_ConfigChannel+0x2e8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	f000 80bc 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_ADC_ConfigChannel+0x2ec>)
 800200a:	4293      	cmp	r3, r2
 800200c:	f000 80b6 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_ADC_ConfigChannel+0x2f0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	f000 80b0 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_ADC_ConfigChannel+0x2f4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f000 80aa 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_ADC_ConfigChannel+0x2f8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	f000 80a4 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_ADC_ConfigChannel+0x2fc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	f000 809e 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_ADC_ConfigChannel+0x300>)
 8002046:	4293      	cmp	r3, r2
 8002048:	f000 8098 	beq.w	800217c <HAL_ADC_ConfigChannel+0x3d8>
 800204c:	e02c      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x304>
 800204e:	bf00      	nop
 8002050:	50040000 	.word	0x50040000
 8002054:	08005f38 	.word	0x08005f38
 8002058:	407f0000 	.word	0x407f0000
 800205c:	04300002 	.word	0x04300002
 8002060:	08600004 	.word	0x08600004
 8002064:	0c900008 	.word	0x0c900008
 8002068:	10c00010 	.word	0x10c00010
 800206c:	14f00020 	.word	0x14f00020
 8002070:	19200040 	.word	0x19200040
 8002074:	1d500080 	.word	0x1d500080
 8002078:	21800100 	.word	0x21800100
 800207c:	25b00200 	.word	0x25b00200
 8002080:	2a000400 	.word	0x2a000400
 8002084:	2e300800 	.word	0x2e300800
 8002088:	32601000 	.word	0x32601000
 800208c:	36902000 	.word	0x36902000
 8002090:	3ac04000 	.word	0x3ac04000
 8002094:	3ef08000 	.word	0x3ef08000
 8002098:	43210000 	.word	0x43210000
 800209c:	47520000 	.word	0x47520000
 80020a0:	4b840000 	.word	0x4b840000
 80020a4:	80000001 	.word	0x80000001
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4aa9      	ldr	r2, [pc, #676]	; (8002354 <HAL_ADC_ConfigChannel+0x5b0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d064      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4aa8      	ldr	r2, [pc, #672]	; (8002358 <HAL_ADC_ConfigChannel+0x5b4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d05f      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4aa6      	ldr	r2, [pc, #664]	; (800235c <HAL_ADC_ConfigChannel+0x5b8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d05a      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4aa5      	ldr	r2, [pc, #660]	; (8002360 <HAL_ADC_ConfigChannel+0x5bc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d055      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 80020d0:	f640 21aa 	movw	r1, #2730	; 0xaaa
 80020d4:	48a3      	ldr	r0, [pc, #652]	; (8002364 <HAL_ADC_ConfigChannel+0x5c0>)
 80020d6:	f7fe fbbc 	bl	8000852 <assert_failed>
 80020da:	e04f      	b.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4aa1      	ldr	r2, [pc, #644]	; (8002368 <HAL_ADC_ConfigChannel+0x5c4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d04a      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4aa0      	ldr	r2, [pc, #640]	; (800236c <HAL_ADC_ConfigChannel+0x5c8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d045      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a9e      	ldr	r2, [pc, #632]	; (8002370 <HAL_ADC_ConfigChannel+0x5cc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d040      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a9d      	ldr	r2, [pc, #628]	; (8002374 <HAL_ADC_ConfigChannel+0x5d0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d03b      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a9b      	ldr	r2, [pc, #620]	; (8002378 <HAL_ADC_ConfigChannel+0x5d4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d036      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a9a      	ldr	r2, [pc, #616]	; (800237c <HAL_ADC_ConfigChannel+0x5d8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d031      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a98      	ldr	r2, [pc, #608]	; (8002380 <HAL_ADC_ConfigChannel+0x5dc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02c      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a97      	ldr	r2, [pc, #604]	; (8002384 <HAL_ADC_ConfigChannel+0x5e0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d027      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a95      	ldr	r2, [pc, #596]	; (8002388 <HAL_ADC_ConfigChannel+0x5e4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d022      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a94      	ldr	r2, [pc, #592]	; (800238c <HAL_ADC_ConfigChannel+0x5e8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d01d      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a92      	ldr	r2, [pc, #584]	; (8002390 <HAL_ADC_ConfigChannel+0x5ec>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d018      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a91      	ldr	r2, [pc, #580]	; (8002394 <HAL_ADC_ConfigChannel+0x5f0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a8f      	ldr	r2, [pc, #572]	; (8002398 <HAL_ADC_ConfigChannel+0x5f4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a8e      	ldr	r2, [pc, #568]	; (800239c <HAL_ADC_ConfigChannel+0x5f8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a8c      	ldr	r2, [pc, #560]	; (80023a0 <HAL_ADC_ConfigChannel+0x5fc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
 8002172:	f640 21ae 	movw	r1, #2734	; 0xaae
 8002176:	487b      	ldr	r0, [pc, #492]	; (8002364 <HAL_ADC_ConfigChannel+0x5c0>)
 8002178:	f7fe fb6b 	bl	8000852 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x3e6>
 8002186:	2302      	movs	r3, #2
 8002188:	e3b7      	b.n	80028fa <HAL_ADC_ConfigChannel+0xb56>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff7c 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 839c 	bne.w	80028dc <HAL_ADC_ConfigChannel+0xb38>
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f7fe fe31 	bl	8000e18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe ff6a 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 80021c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe ff76 	bl	80010ba <LL_ADC_INJ_IsConversionOngoing>
 80021ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 81ce 	bne.w	8002578 <HAL_ADC_ConfigChannel+0x7d4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f040 81c9 	bne.w	8002578 <HAL_ADC_ConfigChannel+0x7d4>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f7fe fe4f 	bl	8000e96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00a      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x48c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800222a:	f7fe fd8d 	bl	8000d48 <LL_ADC_SetOffset>
 800222e:	e1a3      	b.n	8002578 <HAL_ADC_ConfigChannel+0x7d4>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fdaa 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_ADC_ConfigChannel+0x4b8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fd9f 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	f003 021f 	and.w	r2, r3, #31
 800225a:	e01e      	b.n	800229a <HAL_ADC_ConfigChannel+0x4f6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fd94 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800227e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x4ea>
  {
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e004      	b.n	8002298 <HAL_ADC_ConfigChannel+0x4f4>
  }
  return __builtin_clz(value);
 800228e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x50e>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0e9b      	lsrs	r3, r3, #26
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	e018      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x540>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x536>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e004      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x540>
  return __builtin_clz(value);
 80022da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x552>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fd63 	bl	8000dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fd47 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x57e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fd3c 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	e046      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x60c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fd31 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d129      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x600>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e02c      	b.n	80023ae <HAL_ADC_ConfigChannel+0x60a>
 8002354:	c7520000 	.word	0xc7520000
 8002358:	cb840000 	.word	0xcb840000
 800235c:	c75a0000 	.word	0xc75a0000
 8002360:	cb8c0000 	.word	0xcb8c0000
 8002364:	08005f38 	.word	0x08005f38
 8002368:	04300002 	.word	0x04300002
 800236c:	08600004 	.word	0x08600004
 8002370:	0c900008 	.word	0x0c900008
 8002374:	10c00010 	.word	0x10c00010
 8002378:	14f00020 	.word	0x14f00020
 800237c:	19200040 	.word	0x19200040
 8002380:	1d500080 	.word	0x1d500080
 8002384:	21800100 	.word	0x21800100
 8002388:	25b00200 	.word	0x25b00200
 800238c:	2a000400 	.word	0x2a000400
 8002390:	2e300800 	.word	0x2e300800
 8002394:	32601000 	.word	0x32601000
 8002398:	36902000 	.word	0x36902000
 800239c:	3ac04000 	.word	0x3ac04000
 80023a0:	3ef08000 	.word	0x3ef08000
  return __builtin_clz(value);
 80023a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x624>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0e9b      	lsrs	r3, r3, #26
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	e018      	b.n	80023fa <HAL_ADC_ConfigChannel+0x656>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e004      	b.n	80023fa <HAL_ADC_ConfigChannel+0x656>
  return __builtin_clz(value);
 80023f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d106      	bne.n	800240c <HAL_ADC_ConfigChannel+0x668>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fcd8 	bl	8000dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2102      	movs	r1, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fcbc 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x694>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2102      	movs	r1, #2
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fcb1 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	f003 021f 	and.w	r2, r3, #31
 8002436:	e01e      	b.n	8002476 <HAL_ADC_ConfigChannel+0x6d2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2102      	movs	r1, #2
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fca6 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800245a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800245e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x6c6>
    return 32U;
 8002466:	2320      	movs	r3, #32
 8002468:	e004      	b.n	8002474 <HAL_ADC_ConfigChannel+0x6d0>
  return __builtin_clz(value);
 800246a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_ADC_ConfigChannel+0x6ea>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	e016      	b.n	80024bc <HAL_ADC_ConfigChannel+0x718>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x70e>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e004      	b.n	80024bc <HAL_ADC_ConfigChannel+0x718>
  return __builtin_clz(value);
 80024b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024bc:	429a      	cmp	r2, r3
 80024be:	d106      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x72a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2102      	movs	r1, #2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fc77 	bl	8000dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2103      	movs	r1, #3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fc5b 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x756>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2103      	movs	r1, #3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fc50 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	e017      	b.n	800252a <HAL_ADC_ConfigChannel+0x786>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2103      	movs	r1, #3
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fc45 	bl	8000d90 <LL_ADC_GetOffsetChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002514:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x77c>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e003      	b.n	8002528 <HAL_ADC_ConfigChannel+0x784>
  return __builtin_clz(value);
 8002520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x79e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	e011      	b.n	8002566 <HAL_ADC_ConfigChannel+0x7c2>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002552:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x7ba>
    return 32U;
 800255a:	2320      	movs	r3, #32
 800255c:	e003      	b.n	8002566 <HAL_ADC_ConfigChannel+0x7c2>
  return __builtin_clz(value);
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002566:	429a      	cmp	r2, r3
 8002568:	d106      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x7d4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	2103      	movs	r1, #3
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fc22 	bl	8000dbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fd4f 	bl	8001020 <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 813f 	bne.w	8002808 <HAL_ADC_ConfigChannel+0xa64>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	461a      	mov	r2, r3
 8002598:	f7fe fca8 	bl	8000eec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a8e      	ldr	r2, [pc, #568]	; (80027dc <HAL_ADC_ConfigChannel+0xa38>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f040 8130 	bne.w	8002808 <HAL_ADC_ConfigChannel+0xa64>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10b      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x82c>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0e9b      	lsrs	r3, r3, #26
 80025be:	3301      	adds	r3, #1
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2b09      	cmp	r3, #9
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e019      	b.n	8002604 <HAL_ADC_ConfigChannel+0x860>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x848>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x850>
  return __builtin_clz(value);
 80025ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2b09      	cmp	r3, #9
 80025fc:	bf94      	ite	ls
 80025fe:	2301      	movls	r3, #1
 8002600:	2300      	movhi	r3, #0
 8002602:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002604:	2b00      	cmp	r3, #0
 8002606:	d079      	beq.n	80026fc <HAL_ADC_ConfigChannel+0x958>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x880>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	3301      	adds	r3, #1
 800261c:	069b      	lsls	r3, r3, #26
 800261e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002622:	e015      	b.n	8002650 <HAL_ADC_ConfigChannel+0x8ac>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002634:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x89c>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x8a4>
  return __builtin_clz(value);
 8002640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x8cc>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	e017      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x8fc>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x8e8>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e003      	b.n	8002694 <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 800268c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	ea42 0103 	orr.w	r1, r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x922>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	051b      	lsls	r3, r3, #20
 80026c4:	e018      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x954>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x93e>
    return 32U;
 80026de:	2320      	movs	r3, #32
 80026e0:	e003      	b.n	80026ea <HAL_ADC_ConfigChannel+0x946>
  return __builtin_clz(value);
 80026e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f8:	430b      	orrs	r3, r1
 80026fa:	e080      	b.n	80027fe <HAL_ADC_ConfigChannel+0xa5a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x974>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	3301      	adds	r3, #1
 8002710:	069b      	lsls	r3, r3, #26
 8002712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002716:	e015      	b.n	8002744 <HAL_ADC_ConfigChannel+0x9a0>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x990>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x998>
  return __builtin_clz(value);
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	069b      	lsls	r3, r3, #26
 8002740:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x9c0>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	3301      	adds	r3, #1
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	e017      	b.n	8002794 <HAL_ADC_ConfigChannel+0x9f0>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	61fb      	str	r3, [r7, #28]
  return result;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x9dc>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e003      	b.n	8002788 <HAL_ADC_ConfigChannel+0x9e4>
  return __builtin_clz(value);
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	3301      	adds	r3, #1
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	ea42 0103 	orr.w	r1, r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10d      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0xa1c>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	3b1e      	subs	r3, #30
 80027b8:	051b      	lsls	r3, r3, #20
 80027ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027be:	e01d      	b.n	80027fc <HAL_ADC_ConfigChannel+0xa58>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	613b      	str	r3, [r7, #16]
  return result;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0xa3c>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e005      	b.n	80027e8 <HAL_ADC_ConfigChannel+0xa44>
 80027dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	051b      	lsls	r3, r3, #20
 80027f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fc:	430b      	orrs	r3, r1
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	6892      	ldr	r2, [r2, #8]
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe fb47 	bl	8000e96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_ADC_ConfigChannel+0xb60>)
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d06c      	beq.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002814:	483c      	ldr	r0, [pc, #240]	; (8002908 <HAL_ADC_ConfigChannel+0xb64>)
 8002816:	f7fe fa7b 	bl	8000d10 <LL_ADC_GetCommonPathInternalCh>
 800281a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3a      	ldr	r2, [pc, #232]	; (800290c <HAL_ADC_ConfigChannel+0xb68>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d127      	bne.n	8002878 <HAL_ADC_ConfigChannel+0xad4>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d121      	bne.n	8002878 <HAL_ADC_ConfigChannel+0xad4>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a35      	ldr	r2, [pc, #212]	; (8002910 <HAL_ADC_ConfigChannel+0xb6c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d157      	bne.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002842:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002846:	4619      	mov	r1, r3
 8002848:	482f      	ldr	r0, [pc, #188]	; (8002908 <HAL_ADC_ConfigChannel+0xb64>)
 800284a:	f7fe fa4e 	bl	8000cea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_ADC_ConfigChannel+0xb70>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	4a30      	ldr	r2, [pc, #192]	; (8002918 <HAL_ADC_ConfigChannel+0xb74>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002868:	e002      	b.n	8002870 <HAL_ADC_ConfigChannel+0xacc>
          {
            wait_loop_index--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3b01      	subs	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f9      	bne.n	800286a <HAL_ADC_ConfigChannel+0xac6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002876:	e03a      	b.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_ADC_ConfigChannel+0xb78>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d113      	bne.n	80028aa <HAL_ADC_ConfigChannel+0xb06>
 8002882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_ADC_ConfigChannel+0xb06>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_ADC_ConfigChannel+0xb6c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d12a      	bne.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800289c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a0:	4619      	mov	r1, r3
 80028a2:	4819      	ldr	r0, [pc, #100]	; (8002908 <HAL_ADC_ConfigChannel+0xb64>)
 80028a4:	f7fe fa21 	bl	8000cea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a8:	e021      	b.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_ADC_ConfigChannel+0xb7c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d11c      	bne.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_ADC_ConfigChannel+0xb6c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d111      	bne.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d2:	4619      	mov	r1, r3
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <HAL_ADC_ConfigChannel+0xb64>)
 80028d6:	f7fe fa08 	bl	8000cea <LL_ADC_SetCommonPathInternalCh>
 80028da:	e008      	b.n	80028ee <HAL_ADC_ConfigChannel+0xb4a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	37dc      	adds	r7, #220	; 0xdc
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	bf00      	nop
 8002904:	80080000 	.word	0x80080000
 8002908:	50040300 	.word	0x50040300
 800290c:	c7520000 	.word	0xc7520000
 8002910:	50040000 	.word	0x50040000
 8002914:	20000000 	.word	0x20000000
 8002918:	053e2d63 	.word	0x053e2d63
 800291c:	cb840000 	.word	0xcb840000
 8002920:	80000001 	.word	0x80000001

08002924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fb75 	bl	8001020 <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d14d      	bne.n	80029d8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <ADC_Enable+0xc0>)
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f043 0210 	orr.w	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e039      	b.n	80029da <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fb30 	bl	8000fd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002970:	f7fe f99c 	bl	8000cac <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002976:	e028      	b.n	80029ca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fb4f 	bl	8001020 <LL_ADC_IsEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fb1f 	bl	8000fd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002992:	f7fe f98b 	bl	8000cac <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d914      	bls.n	80029ca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d00d      	beq.n	80029ca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0210 	orr.w	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e007      	b.n	80029da <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d1cf      	bne.n	8002978 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	8000003f 	.word	0x8000003f

080029e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fb26 	bl	8001046 <LL_ADC_IsDisableOngoing>
 80029fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fb0d 	bl	8001020 <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d047      	beq.n	8002a9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d144      	bne.n	8002a9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030d 	and.w	r3, r3, #13
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10c      	bne.n	8002a3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fae7 	bl	8000ff8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2203      	movs	r2, #3
 8002a30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a32:	f7fe f93b 	bl	8000cac <HAL_GetTick>
 8002a36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a38:	e029      	b.n	8002a8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f043 0210 	orr.w	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e023      	b.n	8002a9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a56:	f7fe f929 	bl	8000cac <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d914      	bls.n	8002a8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1dc      	bne.n	8002a56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <LL_ADC_StartCalibration>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a35      	ldr	r2, [pc, #212]	; (8002be8 <HAL_ADCEx_Calibration_Start+0xe8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <HAL_ADCEx_Calibration_Start+0x20>
 8002b18:	2186      	movs	r1, #134	; 0x86
 8002b1a:	4834      	ldr	r0, [pc, #208]	; (8002bec <HAL_ADCEx_Calibration_Start+0xec>)
 8002b1c:	f7fd fe99 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b7f      	cmp	r3, #127	; 0x7f
 8002b24:	d007      	beq.n	8002b36 <HAL_ADCEx_Calibration_Start+0x36>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_ADCEx_Calibration_Start+0xf0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <HAL_ADCEx_Calibration_Start+0x36>
 8002b2e:	2187      	movs	r1, #135	; 0x87
 8002b30:	482e      	ldr	r0, [pc, #184]	; (8002bec <HAL_ADCEx_Calibration_Start+0xec>)
 8002b32:	f7fd fe8e 	bl	8000852 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADCEx_Calibration_Start+0x44>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e04d      	b.n	8002be0 <HAL_ADCEx_Calibration_Start+0xe0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ff4b 	bl	80029e8 <ADC_Disable>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d136      	bne.n	8002bca <HAL_ADCEx_Calibration_Start+0xca>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b64:	f023 0302 	bic.w	r3, r3, #2
 8002b68:	f043 0202 	orr.w	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff95 	bl	8002aa6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b7c:	e014      	b.n	8002ba8 <HAL_ADCEx_Calibration_Start+0xa8>
    {
      wait_loop_index++;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002b8a:	d30d      	bcc.n	8002ba8 <HAL_ADCEx_Calibration_Start+0xa8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f023 0312 	bic.w	r3, r3, #18
 8002b94:	f043 0210 	orr.w	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e01b      	b.n	8002be0 <HAL_ADCEx_Calibration_Start+0xe0>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff93 	bl	8002ad8 <LL_ADC_IsCalibrationOnGoing>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e2      	bne.n	8002b7e <HAL_ADCEx_Calibration_Start+0x7e>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f023 0303 	bic.w	r3, r3, #3
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
 8002bc8:	e005      	b.n	8002bd6 <HAL_ADCEx_Calibration_Start+0xd6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	50040000 	.word	0x50040000
 8002bec:	08005f70 	.word	0x08005f70
 8002bf0:	407f0000 	.word	0x407f0000

08002bf4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8a:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60d3      	str	r3, [r2, #12]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 0307 	and.w	r3, r3, #7
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db0b      	blt.n	8002ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4907      	ldr	r1, [pc, #28]	; (8002cf4 <__NVIC_EnableIRQ+0x38>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e100 	.word	0xe000e100

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	; (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	; (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d00f      	beq.n	8002e26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d00c      	beq.n	8002e26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d009      	beq.n	8002e26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d006      	beq.n	8002e26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d003      	beq.n	8002e26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e1e:	21a7      	movs	r1, #167	; 0xa7
 8002e20:	4804      	ldr	r0, [pc, #16]	; (8002e34 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002e22:	f7fd fd16 	bl	8000852 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ff16 	bl	8002c58 <__NVIC_SetPriorityGrouping>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	08005fac 	.word	0x08005fac

08002e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d903      	bls.n	8002e58 <HAL_NVIC_SetPriority+0x20>
 8002e50:	21bf      	movs	r1, #191	; 0xbf
 8002e52:	480e      	ldr	r0, [pc, #56]	; (8002e8c <HAL_NVIC_SetPriority+0x54>)
 8002e54:	f7fd fcfd 	bl	8000852 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	d903      	bls.n	8002e66 <HAL_NVIC_SetPriority+0x2e>
 8002e5e:	21c0      	movs	r1, #192	; 0xc0
 8002e60:	480a      	ldr	r0, [pc, #40]	; (8002e8c <HAL_NVIC_SetPriority+0x54>)
 8002e62:	f7fd fcf6 	bl	8000852 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e66:	f7ff ff1b 	bl	8002ca0 <__NVIC_GetPriorityGrouping>
 8002e6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	6978      	ldr	r0, [r7, #20]
 8002e72:	f7ff ff6b 	bl	8002d4c <NVIC_EncodePriority>
 8002e76:	4602      	mov	r2, r0
 8002e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff3a 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	08005fac 	.word	0x08005fac

08002e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	da03      	bge.n	8002eaa <HAL_NVIC_EnableIRQ+0x1a>
 8002ea2:	21d3      	movs	r1, #211	; 0xd3
 8002ea4:	4805      	ldr	r0, [pc, #20]	; (8002ebc <HAL_NVIC_EnableIRQ+0x2c>)
 8002ea6:	f7fd fcd4 	bl	8000852 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff04 	bl	8002cbc <__NVIC_EnableIRQ>
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	08005fac 	.word	0x08005fac

08002ec0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff73 	bl	8002db4 <SysTick_Config>
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eec:	d00f      	beq.n	8002f0e <HAL_GPIO_Init+0x36>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <HAL_GPIO_Init+0xf8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <HAL_GPIO_Init+0x36>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a36      	ldr	r2, [pc, #216]	; (8002fd4 <HAL_GPIO_Init+0xfc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x36>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <HAL_GPIO_Init+0x100>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x36>
 8002f06:	21b3      	movs	r1, #179	; 0xb3
 8002f08:	4834      	ldr	r0, [pc, #208]	; (8002fdc <HAL_GPIO_Init+0x104>)
 8002f0a:	f7fd fca2 	bl	8000852 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_GPIO_Init+0x4c>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x54>
 8002f24:	21b4      	movs	r1, #180	; 0xb4
 8002f26:	482d      	ldr	r0, [pc, #180]	; (8002fdc <HAL_GPIO_Init+0x104>)
 8002f28:	f7fd fc93 	bl	8000852 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d039      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d035      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b11      	cmp	r3, #17
 8002f42:	d031      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d02d      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b12      	cmp	r3, #18
 8002f52:	d029      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_GPIO_Init+0x108>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d024      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <HAL_GPIO_Init+0x10c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01f      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_GPIO_Init+0x110>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01a      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <HAL_GPIO_Init+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d015      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_GPIO_Init+0x118>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d010      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <HAL_GPIO_Init+0x11c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b0b      	cmp	r3, #11
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0xd0>
 8002fa0:	21b5      	movs	r1, #181	; 0xb5
 8002fa2:	480e      	ldr	r0, [pc, #56]	; (8002fdc <HAL_GPIO_Init+0x104>)
 8002fa4:	f7fd fc55 	bl	8000852 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 81a8 	beq.w	8003302 <HAL_GPIO_Init+0x42a>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	f000 81a3 	beq.w	8003302 <HAL_GPIO_Init+0x42a>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	f000 819e 	beq.w	8003302 <HAL_GPIO_Init+0x42a>
 8002fc6:	21b6      	movs	r1, #182	; 0xb6
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <HAL_GPIO_Init+0x104>)
 8002fca:	f7fd fc42 	bl	8000852 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fce:	e198      	b.n	8003302 <HAL_GPIO_Init+0x42a>
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	48000800 	.word	0x48000800
 8002fd8:	48001c00 	.word	0x48001c00
 8002fdc:	08005fe8 	.word	0x08005fe8
 8002fe0:	10110000 	.word	0x10110000
 8002fe4:	10210000 	.word	0x10210000
 8002fe8:	10310000 	.word	0x10310000
 8002fec:	10120000 	.word	0x10120000
 8002ff0:	10220000 	.word	0x10220000
 8002ff4:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8176 	beq.w	80032fc <HAL_GPIO_Init+0x424>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d00b      	beq.n	8003030 <HAL_GPIO_Init+0x158>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d007      	beq.n	8003030 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003024:	2b11      	cmp	r3, #17
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b12      	cmp	r3, #18
 800302e:	d144      	bne.n	80030ba <HAL_GPIO_Init+0x1e2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00f      	beq.n	8003058 <HAL_GPIO_Init+0x180>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00b      	beq.n	8003058 <HAL_GPIO_Init+0x180>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d007      	beq.n	8003058 <HAL_GPIO_Init+0x180>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x180>
 8003050:	21c6      	movs	r1, #198	; 0xc6
 8003052:	4872      	ldr	r0, [pc, #456]	; (800321c <HAL_GPIO_Init+0x344>)
 8003054:	f7fd fbfd 	bl	8000852 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800308e:	2201      	movs	r2, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0201 	and.w	r2, r3, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2203      	movs	r2, #3
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x222>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d13f      	bne.n	800317a <HAL_GPIO_Init+0x2a2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003100:	d00f      	beq.n	8003122 <HAL_GPIO_Init+0x24a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_GPIO_Init+0x348>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <HAL_GPIO_Init+0x24a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a45      	ldr	r2, [pc, #276]	; (8003224 <HAL_GPIO_Init+0x34c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x24a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a44      	ldr	r2, [pc, #272]	; (8003228 <HAL_GPIO_Init+0x350>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x24a>
 800311a:	21ec      	movs	r1, #236	; 0xec
 800311c:	483f      	ldr	r0, [pc, #252]	; (800321c <HAL_GPIO_Init+0x344>)
 800311e:	f7fd fb98 	bl	8000852 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b0f      	cmp	r3, #15
 8003128:	d903      	bls.n	8003132 <HAL_GPIO_Init+0x25a>
 800312a:	21ed      	movs	r1, #237	; 0xed
 800312c:	483b      	ldr	r0, [pc, #236]	; (800321c <HAL_GPIO_Init+0x344>)
 800312e:	f7fd fb90 	bl	8000852 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	6939      	ldr	r1, [r7, #16]
 8003176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a0 	beq.w	80032fc <HAL_GPIO_Init+0x424>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_GPIO_Init+0x354>)
 80031be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c0:	4a1a      	ldr	r2, [pc, #104]	; (800322c <HAL_GPIO_Init+0x354>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6613      	str	r3, [r2, #96]	; 0x60
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_GPIO_Init+0x354>)
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031d4:	4a16      	ldr	r2, [pc, #88]	; (8003230 <HAL_GPIO_Init+0x358>)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	3302      	adds	r3, #2
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031fe:	d019      	beq.n	8003234 <HAL_GPIO_Init+0x35c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a07      	ldr	r2, [pc, #28]	; (8003220 <HAL_GPIO_Init+0x348>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_Init+0x340>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a06      	ldr	r2, [pc, #24]	; (8003224 <HAL_GPIO_Init+0x34c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_GPIO_Init+0x33c>
 8003210:	2302      	movs	r3, #2
 8003212:	e010      	b.n	8003236 <HAL_GPIO_Init+0x35e>
 8003214:	2307      	movs	r3, #7
 8003216:	e00e      	b.n	8003236 <HAL_GPIO_Init+0x35e>
 8003218:	2301      	movs	r3, #1
 800321a:	e00c      	b.n	8003236 <HAL_GPIO_Init+0x35e>
 800321c:	08005fe8 	.word	0x08005fe8
 8003220:	48000400 	.word	0x48000400
 8003224:	48000800 	.word	0x48000800
 8003228:	48001c00 	.word	0x48001c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40010000 	.word	0x40010000
 8003234:	2300      	movs	r3, #0
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	f002 0203 	and.w	r2, r2, #3
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	4093      	lsls	r3, r2
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003246:	4935      	ldr	r1, [pc, #212]	; (800331c <HAL_GPIO_Init+0x444>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_GPIO_Init+0x448>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x3a0>
        {
          temp |= iocurrent;
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003278:	4a29      	ldr	r2, [pc, #164]	; (8003320 <HAL_GPIO_Init+0x448>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_GPIO_Init+0x448>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x3ca>
        {
          temp |= iocurrent;
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a2:	4a1f      	ldr	r2, [pc, #124]	; (8003320 <HAL_GPIO_Init+0x448>)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_GPIO_Init+0x448>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <HAL_GPIO_Init+0x448>)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_GPIO_Init+0x448>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x41e>
        {
          temp |= iocurrent;
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_GPIO_Init+0x448>)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	f47f ae73 	bne.w	8002ff8 <HAL_GPIO_Init+0x120>
  }
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40010000 	.word	0x40010000
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40007000 	.word	0x40007000

08003344 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <HAL_PWREx_GetVoltageRange+0x18>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40007000 	.word	0x40007000

08003360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336e:	d007      	beq.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d003      	beq.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003378:	21a8      	movs	r1, #168	; 0xa8
 800337a:	4826      	ldr	r0, [pc, #152]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800337c:	f7fd fa69 	bl	8000852 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003386:	d130      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003388:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003394:	d038      	beq.n	8003408 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800339e:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80033a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2232      	movs	r2, #50	; 0x32
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0c9b      	lsrs	r3, r3, #18
 80033b8:	3301      	adds	r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033bc:	e002      	b.n	80033c4 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d0:	d102      	bne.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x78>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f2      	bne.n	80033be <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e4:	d110      	bne.n	8003408 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e00f      	b.n	800340a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d007      	beq.n	8003408 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003400:	4a05      	ldr	r2, [pc, #20]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003406:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	08006024 	.word	0x08006024
 8003418:	40007000 	.word	0x40007000
 800341c:	20000000 	.word	0x20000000
 8003420:	431bde83 	.word	0x431bde83

08003424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f000 bd65 	b.w	8003f02 <HAL_RCC_OscConfig+0xade>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d028      	beq.n	8003492 <HAL_RCC_OscConfig+0x6e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d122      	bne.n	8003492 <HAL_RCC_OscConfig+0x6e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11c      	bne.n	8003492 <HAL_RCC_OscConfig+0x6e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d116      	bne.n	8003492 <HAL_RCC_OscConfig+0x6e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d110      	bne.n	8003492 <HAL_RCC_OscConfig+0x6e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_RCC_OscConfig+0x6e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <HAL_RCC_OscConfig+0x6e>
 8003488:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800348c:	48a3      	ldr	r0, [pc, #652]	; (800371c <HAL_RCC_OscConfig+0x2f8>)
 800348e:	f7fd f9e0 	bl	8000852 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4ba3      	ldr	r3, [pc, #652]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4ba0      	ldr	r3, [pc, #640]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 813f 	beq.w	8003732 <HAL_RCC_OscConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_OscConfig+0xaa>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d004      	beq.n	80034ce <HAL_RCC_OscConfig+0xaa>
 80034c4:	f240 11ab 	movw	r1, #427	; 0x1ab
 80034c8:	4894      	ldr	r0, [pc, #592]	; (800371c <HAL_RCC_OscConfig+0x2f8>)
 80034ca:	f7fd f9c2 	bl	8000852 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	2bff      	cmp	r3, #255	; 0xff
 80034d4:	d904      	bls.n	80034e0 <HAL_RCC_OscConfig+0xbc>
 80034d6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80034da:	4890      	ldr	r0, [pc, #576]	; (800371c <HAL_RCC_OscConfig+0x2f8>)
 80034dc:	f7fd f9b9 	bl	8000852 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d030      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d02c      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d028      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d024      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d020      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	2b50      	cmp	r3, #80	; 0x50
 800350e:	d01c      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	2b60      	cmp	r3, #96	; 0x60
 8003516:	d018      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d014      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	2b80      	cmp	r3, #128	; 0x80
 8003526:	d010      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	2b90      	cmp	r3, #144	; 0x90
 800352e:	d00c      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	2ba0      	cmp	r3, #160	; 0xa0
 8003536:	d008      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	2bb0      	cmp	r3, #176	; 0xb0
 800353e:	d004      	beq.n	800354a <HAL_RCC_OscConfig+0x126>
 8003540:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003544:	4875      	ldr	r0, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x2f8>)
 8003546:	f7fd f984 	bl	8000852 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_RCC_OscConfig+0x13c>
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	f040 808f 	bne.w	8003676 <HAL_RCC_OscConfig+0x252>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b01      	cmp	r3, #1
 800355c:	f040 808b 	bne.w	8003676 <HAL_RCC_OscConfig+0x252>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_RCC_OscConfig+0x156>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f000 bcc4 	b.w	8003f02 <HAL_RCC_OscConfig+0xade>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1a      	ldr	r2, [r3, #32]
 800357e:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_RCC_OscConfig+0x170>
 800358a:	4b65      	ldr	r3, [pc, #404]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003592:	e005      	b.n	80035a0 <HAL_RCC_OscConfig+0x17c>
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d224      	bcs.n	80035ee <HAL_RCC_OscConfig+0x1ca>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fef7 	bl	800439c <RCC_SetFlashLatencyFromMSIRange>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f000 bca4 	b.w	8003f02 <HAL_RCC_OscConfig+0xade>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ba:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035c0:	f043 0308 	orr.w	r3, r3, #8
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b56      	ldr	r3, [pc, #344]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4953      	ldr	r1, [pc, #332]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d8:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	494e      	ldr	r1, [pc, #312]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
 80035ec:	e026      	b.n	800363c <HAL_RCC_OscConfig+0x218>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ee:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4b      	ldr	r2, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035f4:	f043 0308 	orr.w	r3, r3, #8
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b49      	ldr	r3, [pc, #292]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4946      	ldr	r1, [pc, #280]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360c:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	4941      	ldr	r1, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_RCC_OscConfig+0x218>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 feb6 	bl	800439c <RCC_SetFlashLatencyFromMSIRange>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_RCC_OscConfig+0x218>
            {
              return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f000 bc63 	b.w	8003f02 <HAL_RCC_OscConfig+0xade>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800363c:	f000 fdea 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	4935      	ldr	r1, [pc, #212]	; (8003724 <HAL_RCC_OscConfig+0x300>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	4a33      	ldr	r2, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x304>)
 800365a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800365c:	4b33      	ldr	r3, [pc, #204]	; (800372c <HAL_RCC_OscConfig+0x308>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fad3 	bl	8000c0c <HAL_InitTick>
 8003666:	4603      	mov	r3, r0
 8003668:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d05f      	beq.n	8003730 <HAL_RCC_OscConfig+0x30c>
        {
          return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	f000 bc46 	b.w	8003f02 <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d033      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800368a:	f7fd fb0f 	bl	8000cac <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003690:	e009      	b.n	80036a6 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003692:	f7fd fb0b 	bl	8000cac <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d902      	bls.n	80036a6 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	f000 bc2e 	b.w	8003f02 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ef      	beq.n	8003692 <HAL_RCC_OscConfig+0x26e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4915      	ldr	r1, [pc, #84]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	4910      	ldr	r1, [pc, #64]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
 80036e4:	e025      	b.n	8003732 <HAL_RCC_OscConfig+0x30e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036f2:	f7fd fadb 	bl	8000cac <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2e8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036fa:	f7fd fad7 	bl	8000cac <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e3fa      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCC_OscConfig+0x2fc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x2d6>
 8003718:	e00b      	b.n	8003732 <HAL_RCC_OscConfig+0x30e>
 800371a:	bf00      	nop
 800371c:	08006060 	.word	0x08006060
 8003720:	40021000 	.word	0x40021000
 8003724:	08006148 	.word	0x08006148
 8003728:	20000000 	.word	0x20000000
 800372c:	20000004 	.word	0x20000004
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d07e      	beq.n	800383c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <HAL_RCC_OscConfig+0x340>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374e:	d009      	beq.n	8003764 <HAL_RCC_OscConfig+0x340>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003758:	d004      	beq.n	8003764 <HAL_RCC_OscConfig+0x340>
 800375a:	f240 2119 	movw	r1, #537	; 0x219
 800375e:	489b      	ldr	r0, [pc, #620]	; (80039cc <HAL_RCC_OscConfig+0x5a8>)
 8003760:	f7fd f877 	bl	8000852 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x352>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d10e      	bne.n	800378e <HAL_RCC_OscConfig+0x36a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d10b      	bne.n	800378e <HAL_RCC_OscConfig+0x36a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003776:	4b96      	ldr	r3, [pc, #600]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d05b      	beq.n	800383a <HAL_RCC_OscConfig+0x416>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d157      	bne.n	800383a <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e3b9      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x382>
 8003798:	4b8d      	ldr	r3, [pc, #564]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a8c      	ldr	r2, [pc, #560]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e01d      	b.n	80037e2 <HAL_RCC_OscConfig+0x3be>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x3a6>
 80037b0:	4b87      	ldr	r3, [pc, #540]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a86      	ldr	r2, [pc, #536]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a83      	ldr	r2, [pc, #524]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e00b      	b.n	80037e2 <HAL_RCC_OscConfig+0x3be>
 80037ca:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b7e      	ldr	r3, [pc, #504]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80037dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d013      	beq.n	8003812 <HAL_RCC_OscConfig+0x3ee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fa5f 	bl	8000cac <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f2:	f7fd fa5b 	bl	8000cac <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b64      	cmp	r3, #100	; 0x64
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x3e0>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e37e      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003804:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x3ce>
 8003810:	e014      	b.n	800383c <HAL_RCC_OscConfig+0x418>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd fa4b 	bl	8000cac <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381a:	f7fd fa47 	bl	8000cac <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b64      	cmp	r3, #100	; 0x64
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e36a      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382c:	4b68      	ldr	r3, [pc, #416]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x3f6>
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x418>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d077      	beq.n	8003938 <HAL_RCC_OscConfig+0x514>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_RCC_OscConfig+0x440>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d004      	beq.n	8003864 <HAL_RCC_OscConfig+0x440>
 800385a:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800385e:	485b      	ldr	r0, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x5a8>)
 8003860:	f7fc fff7 	bl	8000852 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b1f      	cmp	r3, #31
 800386a:	d904      	bls.n	8003876 <HAL_RCC_OscConfig+0x452>
 800386c:	f240 214d 	movw	r1, #589	; 0x24d
 8003870:	4856      	ldr	r0, [pc, #344]	; (80039cc <HAL_RCC_OscConfig+0x5a8>)
 8003872:	f7fc ffee 	bl	8000852 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x464>
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d119      	bne.n	80038b6 <HAL_RCC_OscConfig+0x492>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d116      	bne.n	80038b6 <HAL_RCC_OscConfig+0x492>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003888:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_OscConfig+0x47c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e330      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	4948      	ldr	r1, [pc, #288]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b4:	e040      	b.n	8003938 <HAL_RCC_OscConfig+0x514>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d023      	beq.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038be:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fd f9ef 	bl	8000cac <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fd f9eb 	bl	8000cac <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e30e      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e4:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x4ae>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	4934      	ldr	r1, [pc, #208]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	e018      	b.n	8003938 <HAL_RCC_OscConfig+0x514>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003906:	4b32      	ldr	r3, [pc, #200]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fd f9cb 	bl	8000cac <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391a:	f7fd f9c7 	bl	8000cac <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e2ea      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d04e      	beq.n	80039e2 <HAL_RCC_OscConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_OscConfig+0x53a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d004      	beq.n	800395e <HAL_RCC_OscConfig+0x53a>
 8003954:	f240 218d 	movw	r1, #653	; 0x28d
 8003958:	481c      	ldr	r0, [pc, #112]	; (80039cc <HAL_RCC_OscConfig+0x5a8>)
 800395a:	f7fc ff7a 	bl	8000852 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x57c>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fd f999 	bl	8000cac <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397e:	f7fd f995 	bl	8000cac <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e2b8      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ef      	beq.n	800397e <HAL_RCC_OscConfig+0x55a>
 800399e:	e020      	b.n	80039e2 <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80039a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <HAL_RCC_OscConfig+0x5ac>)
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fd f97c 	bl	8000cac <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b6:	e00d      	b.n	80039d4 <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b8:	f7fd f978 	bl	8000cac <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d906      	bls.n	80039d4 <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e29b      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
 80039ca:	bf00      	nop
 80039cc:	08006060 	.word	0x08006060
 80039d0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ea      	bne.n	80039b8 <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80b2 	beq.w	8003b54 <HAL_RCC_OscConfig+0x730>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x5f2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d008      	beq.n	8003a16 <HAL_RCC_OscConfig+0x5f2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d004      	beq.n	8003a16 <HAL_RCC_OscConfig+0x5f2>
 8003a0c:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003a10:	4876      	ldr	r0, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x7c8>)
 8003a12:	f7fc ff1e 	bl	8000852 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a16:	4b74      	ldr	r3, [pc, #464]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10d      	bne.n	8003a3e <HAL_RCC_OscConfig+0x61a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	4b71      	ldr	r3, [pc, #452]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	4a70      	ldr	r2, [pc, #448]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2e:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3e:	4b6c      	ldr	r3, [pc, #432]	; (8003bf0 <HAL_RCC_OscConfig+0x7cc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d118      	bne.n	8003a7c <HAL_RCC_OscConfig+0x658>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4a:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <HAL_RCC_OscConfig+0x7cc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <HAL_RCC_OscConfig+0x7cc>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fd f929 	bl	8000cac <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fd f925 	bl	8000cac <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e248      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a70:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0x7cc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x63a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d108      	bne.n	8003a96 <HAL_RCC_OscConfig+0x672>
 8003a84:	4b58      	ldr	r3, [pc, #352]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a57      	ldr	r2, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a94:	e024      	b.n	8003ae0 <HAL_RCC_OscConfig+0x6bc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d110      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x69c>
 8003a9e:	4b52      	ldr	r3, [pc, #328]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	4a50      	ldr	r2, [pc, #320]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aae:	4b4e      	ldr	r3, [pc, #312]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4a4c      	ldr	r2, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abe:	e00f      	b.n	8003ae0 <HAL_RCC_OscConfig+0x6bc>
 8003ac0:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a48      	ldr	r2, [pc, #288]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad0:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	4a44      	ldr	r2, [pc, #272]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d016      	beq.n	8003b16 <HAL_RCC_OscConfig+0x6f2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f8e0 	bl	8000cac <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x6e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd f8dc 	bl	8000cac <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1fd      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ed      	beq.n	8003af0 <HAL_RCC_OscConfig+0x6cc>
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fd f8c9 	bl	8000cac <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fd f8c5 	bl	8000cac <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e1e6      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ed      	bne.n	8003b1e <HAL_RCC_OscConfig+0x6fa>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_OscConfig+0x730>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d050      	beq.n	8003c02 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_OscConfig+0x756>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d004      	beq.n	8003b7a <HAL_RCC_OscConfig+0x756>
 8003b70:	f240 3145 	movw	r1, #837	; 0x345
 8003b74:	481d      	ldr	r0, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0x7c8>)
 8003b76:	f7fc fe6c 	bl	8000852 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b88:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b92:	f7fd f88b 	bl	8000cac <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x788>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9a:	f7fd f887 	bl	8000cac <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x788>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e1aa      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ef      	beq.n	8003b9a <HAL_RCC_OscConfig+0x776>
 8003bba:	e022      	b.n	8003c02 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc2:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x7c4>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd f86e 	bl	8000cac <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd2:	e00f      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7d0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd4:	f7fd f86a 	bl	8000cac <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d908      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e18d      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	08006060 	.word	0x08006060
 8003bf0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf4:	4ba2      	ldr	r3, [pc, #648]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e8      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x7b0>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x800>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d008      	beq.n	8003c24 <HAL_RCC_OscConfig+0x800>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d004      	beq.n	8003c24 <HAL_RCC_OscConfig+0x800>
 8003c1a:	f240 316e 	movw	r1, #878	; 0x36e
 8003c1e:	4899      	ldr	r0, [pc, #612]	; (8003e84 <HAL_RCC_OscConfig+0xa60>)
 8003c20:	f7fc fe17 	bl	8000852 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8169 	beq.w	8003f00 <HAL_RCC_OscConfig+0xadc>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	f040 8131 	bne.w	8003e9a <HAL_RCC_OscConfig+0xa76>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d010      	beq.n	8003c62 <HAL_RCC_OscConfig+0x83e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x83e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCC_OscConfig+0x83e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d004      	beq.n	8003c62 <HAL_RCC_OscConfig+0x83e>
 8003c58:	f240 3176 	movw	r1, #886	; 0x376
 8003c5c:	4889      	ldr	r0, [pc, #548]	; (8003e84 <HAL_RCC_OscConfig+0xa60>)
 8003c5e:	f7fc fdf8 	bl	8000852 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_OscConfig+0x84e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d904      	bls.n	8003c7c <HAL_RCC_OscConfig+0x858>
 8003c72:	f240 3177 	movw	r1, #887	; 0x377
 8003c76:	4883      	ldr	r0, [pc, #524]	; (8003e84 <HAL_RCC_OscConfig+0xa60>)
 8003c78:	f7fc fdeb 	bl	8000852 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	2b07      	cmp	r3, #7
 8003c82:	d903      	bls.n	8003c8c <HAL_RCC_OscConfig+0x868>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c88:	2b56      	cmp	r3, #86	; 0x56
 8003c8a:	d904      	bls.n	8003c96 <HAL_RCC_OscConfig+0x872>
 8003c8c:	f44f 715e 	mov.w	r1, #888	; 0x378
 8003c90:	487c      	ldr	r0, [pc, #496]	; (8003e84 <HAL_RCC_OscConfig+0xa60>)
 8003c92:	f7fc fdde 	bl	8000852 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d903      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x882>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	2b1f      	cmp	r3, #31
 8003ca4:	d904      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x88c>
 8003ca6:	f240 317a 	movw	r1, #890	; 0x37a
 8003caa:	4876      	ldr	r0, [pc, #472]	; (8003e84 <HAL_RCC_OscConfig+0xa60>)
 8003cac:	f7fc fdd1 	bl	8000852 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d010      	beq.n	8003cda <HAL_RCC_OscConfig+0x8b6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d00c      	beq.n	8003cda <HAL_RCC_OscConfig+0x8b6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_OscConfig+0x8b6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d004      	beq.n	8003cda <HAL_RCC_OscConfig+0x8b6>
 8003cd0:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8003cd4:	486b      	ldr	r0, [pc, #428]	; (8003e84 <HAL_RCC_OscConfig+0xa60>)
 8003cd6:	f7fc fdbc 	bl	8000852 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d010      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8e0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8e0>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8e0>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d004      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8e0>
 8003cfa:	f240 317d 	movw	r1, #893	; 0x37d
 8003cfe:	4861      	ldr	r0, [pc, #388]	; (8003e84 <HAL_RCC_OscConfig+0xa60>)
 8003d00:	f7fc fda7 	bl	8000852 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0203 	and.w	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d12c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	3b01      	subs	r3, #1
 8003d24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d123      	bne.n	8003d72 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11b      	bne.n	8003d72 <HAL_RCC_OscConfig+0x94e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d113      	bne.n	8003d72 <HAL_RCC_OscConfig+0x94e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d067      	beq.n	8003e42 <HAL_RCC_OscConfig+0xa1e>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d062      	beq.n	8003e3e <HAL_RCC_OscConfig+0xa1a>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d78:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_OscConfig+0x964>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0bc      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d88:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3c      	ldr	r2, [pc, #240]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d94:	f7fc ff8a 	bl	8000cac <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x98a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fc ff86 	bl	8000cac <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x98a>
              {
                return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0a9      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x978>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dba:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <HAL_RCC_OscConfig+0xa64>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dd4:	0212      	lsls	r2, r2, #8
 8003dd6:	4311      	orrs	r1, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ddc:	0852      	lsrs	r2, r2, #1
 8003dde:	3a01      	subs	r2, #1
 8003de0:	0552      	lsls	r2, r2, #21
 8003de2:	4311      	orrs	r1, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003de8:	0852      	lsrs	r2, r2, #1
 8003dea:	3a01      	subs	r2, #1
 8003dec:	0652      	lsls	r2, r2, #25
 8003dee:	4311      	orrs	r1, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003df4:	06d2      	lsls	r2, r2, #27
 8003df6:	430a      	orrs	r2, r1
 8003df8:	4921      	ldr	r1, [pc, #132]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e08:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e14:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e16:	f7fc ff49 	bl	8000cac <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0xa0c>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fc ff45 	bl	8000cac <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0xa0c>
              {
                return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e068      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x9fa>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3c:	e060      	b.n	8003f00 <HAL_RCC_OscConfig+0xadc>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e05f      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d158      	bne.n	8003f00 <HAL_RCC_OscConfig+0xadc>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e58:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <HAL_RCC_OscConfig+0xa5c>)
 8003e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e64:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e66:	f7fc ff21 	bl	8000cac <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6c:	e00e      	b.n	8003e8c <HAL_RCC_OscConfig+0xa68>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fc ff1d 	bl	8000cac <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d907      	bls.n	8003e8c <HAL_RCC_OscConfig+0xa68>
            {
              return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e040      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08006060 	.word	0x08006060
 8003e88:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ea      	beq.n	8003e6e <HAL_RCC_OscConfig+0xa4a>
 8003e98:	e032      	b.n	8003f00 <HAL_RCC_OscConfig+0xadc>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d02d      	beq.n	8003efc <HAL_RCC_OscConfig+0xad8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xaa0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003eca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fc feea 	bl	8000cac <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xaca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fc fee6 	bl	8000cac <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xaca>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e009      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <HAL_RCC_OscConfig+0xae8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0xab8>
 8003efa:	e001      	b.n	8003f00 <HAL_RCC_OscConfig+0xadc>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0xade>
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e168      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x24>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b0f      	cmp	r3, #15
 8003f32:	d904      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x2e>
 8003f34:	f240 4162 	movw	r1, #1122	; 0x462
 8003f38:	4873      	ldr	r0, [pc, #460]	; (8004108 <HAL_RCC_ClockConfig+0x1f8>)
 8003f3a:	f7fc fc8a 	bl	8000852 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x56>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d00d      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x56>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x56>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d007      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x56>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d004      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x56>
 8003f5c:	f240 4163 	movw	r1, #1123	; 0x463
 8003f60:	4869      	ldr	r0, [pc, #420]	; (8004108 <HAL_RCC_ClockConfig+0x1f8>)
 8003f62:	f7fc fc76 	bl	8000852 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f66:	4b69      	ldr	r3, [pc, #420]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d910      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f74:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 0207 	bic.w	r2, r3, #7
 8003f7c:	4963      	ldr	r1, [pc, #396]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f84:	4b61      	ldr	r3, [pc, #388]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e12f      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d061      	beq.n	8004066 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d010      	beq.n	8003fcc <HAL_RCC_ClockConfig+0xbc>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d00c      	beq.n	8003fcc <HAL_RCC_ClockConfig+0xbc>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d008      	beq.n	8003fcc <HAL_RCC_ClockConfig+0xbc>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d004      	beq.n	8003fcc <HAL_RCC_ClockConfig+0xbc>
 8003fc2:	f240 417a 	movw	r1, #1146	; 0x47a
 8003fc6:	4850      	ldr	r0, [pc, #320]	; (8004108 <HAL_RCC_ClockConfig+0x1f8>)
 8003fc8:	f7fc fc43 	bl	8000852 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd4:	4b4e      	ldr	r3, [pc, #312]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d121      	bne.n	8004024 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e108      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fec:	4b48      	ldr	r3, [pc, #288]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d115      	bne.n	8004024 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0fc      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004004:	4b42      	ldr	r3, [pc, #264]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0f0      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004014:	4b3e      	ldr	r3, [pc, #248]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0e8      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004024:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 0203 	bic.w	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4937      	ldr	r1, [pc, #220]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fc fe39 	bl	8000cac <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403c:	e00a      	b.n	8004054 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403e:	f7fc fe35 	bl	8000cac <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0d0      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	4b2e      	ldr	r3, [pc, #184]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 020c 	and.w	r2, r3, #12
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	429a      	cmp	r2, r3
 8004064:	d1eb      	bne.n	800403e <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d031      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d024      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d020      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b90      	cmp	r3, #144	; 0x90
 8004088:	d01c      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2ba0      	cmp	r3, #160	; 0xa0
 8004090:	d018      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2bb0      	cmp	r3, #176	; 0xb0
 8004098:	d014      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2bc0      	cmp	r3, #192	; 0xc0
 80040a0:	d010      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2bd0      	cmp	r3, #208	; 0xd0
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2be0      	cmp	r3, #224	; 0xe0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2bf0      	cmp	r3, #240	; 0xf0
 80040b8:	d004      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1b4>
 80040ba:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 80040be:	4812      	ldr	r0, [pc, #72]	; (8004108 <HAL_RCC_ClockConfig+0x1f8>)
 80040c0:	f7fc fbc7 	bl	8000852 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	490f      	ldr	r1, [pc, #60]	; (8004110 <HAL_RCC_ClockConfig+0x200>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d217      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 0207 	bic.w	r2, r3, #7
 80040ec:	4907      	ldr	r1, [pc, #28]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCC_ClockConfig+0x1fc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d008      	beq.n	8004114 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e077      	b.n	80041f6 <HAL_RCC_ClockConfig+0x2e6>
 8004106:	bf00      	nop
 8004108:	08006060 	.word	0x08006060
 800410c:	40022000 	.word	0x40022000
 8004110:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d025      	beq.n	800416c <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <HAL_RCC_ClockConfig+0x24a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004130:	d013      	beq.n	800415a <HAL_RCC_ClockConfig+0x24a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800413a:	d00e      	beq.n	800415a <HAL_RCC_ClockConfig+0x24a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004144:	d009      	beq.n	800415a <HAL_RCC_ClockConfig+0x24a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800414e:	d004      	beq.n	800415a <HAL_RCC_ClockConfig+0x24a>
 8004150:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8004154:	482a      	ldr	r0, [pc, #168]	; (8004200 <HAL_RCC_ClockConfig+0x2f0>)
 8004156:	f7fc fb7c 	bl	8000852 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800415a:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_RCC_ClockConfig+0x2f4>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4927      	ldr	r1, [pc, #156]	; (8004204 <HAL_RCC_ClockConfig+0x2f4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d026      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d018      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x2a2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004188:	d013      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x2a2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004192:	d00e      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x2a2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x2a2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a6:	d004      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x2a2>
 80041a8:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80041ac:	4814      	ldr	r0, [pc, #80]	; (8004200 <HAL_RCC_ClockConfig+0x2f0>)
 80041ae:	f7fc fb50 	bl	8000852 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <HAL_RCC_ClockConfig+0x2f4>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4910      	ldr	r1, [pc, #64]	; (8004204 <HAL_RCC_ClockConfig+0x2f4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c6:	f000 f825 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80041ca:	4602      	mov	r2, r0
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_RCC_ClockConfig+0x2f4>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	490c      	ldr	r1, [pc, #48]	; (8004208 <HAL_RCC_ClockConfig+0x2f8>)
 80041d8:	5ccb      	ldrb	r3, [r1, r3]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x2fc>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x300>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc fd0e 	bl	8000c0c <HAL_InitTick>
 80041f0:	4603      	mov	r3, r0
 80041f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80041f4:	7afb      	ldrb	r3, [r7, #11]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	08006060 	.word	0x08006060
 8004204:	40021000 	.word	0x40021000
 8004208:	08006148 	.word	0x08006148
 800420c:	20000000 	.word	0x20000000
 8004210:	20000004 	.word	0x20000004

08004214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004222:	4b3e      	ldr	r3, [pc, #248]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x34>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b0c      	cmp	r3, #12
 8004240:	d121      	bne.n	8004286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d11e      	bne.n	8004286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004248:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d107      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004254:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	e005      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004264:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004284:	e00a      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d102      	bne.n	8004292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <HAL_RCC_GetSysClockFreq+0x110>)
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e004      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d101      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_RCC_GetSysClockFreq+0x114>)
 800429a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d134      	bne.n	800430c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0xa6>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d003      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0xac>
 80042b8:	e005      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_GetSysClockFreq+0x110>)
 80042bc:	617b      	str	r3, [r7, #20]
      break;
 80042be:	e005      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_GetSysClockFreq+0x114>)
 80042c2:	617b      	str	r3, [r7, #20]
      break;
 80042c4:	e002      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	617b      	str	r3, [r7, #20]
      break;
 80042ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	3301      	adds	r3, #1
 80042d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	fb02 f203 	mul.w	r2, r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	0e5b      	lsrs	r3, r3, #25
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	3301      	adds	r3, #1
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800430c:	69bb      	ldr	r3, [r7, #24]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3724      	adds	r7, #36	; 0x24
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	08006160 	.word	0x08006160
 8004324:	00f42400 	.word	0x00f42400
 8004328:	007a1200 	.word	0x007a1200

0800432c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <HAL_RCC_GetHCLKFreq+0x14>)
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000000 	.word	0x20000000

08004344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004348:	f7ff fff0 	bl	800432c <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4904      	ldr	r1, [pc, #16]	; (800436c <HAL_RCC_GetPCLK1Freq+0x28>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	08006158 	.word	0x08006158

08004370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004374:	f7ff ffda 	bl	800432c <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0adb      	lsrs	r3, r3, #11
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4904      	ldr	r1, [pc, #16]	; (8004398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	08006158 	.word	0x08006158

0800439c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043b4:	f7fe ffc6 	bl	8003344 <HAL_PWREx_GetVoltageRange>
 80043b8:	6178      	str	r0, [r7, #20]
 80043ba:	e014      	b.n	80043e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	4a24      	ldr	r2, [pc, #144]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6593      	str	r3, [r2, #88]	; 0x58
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043d4:	f7fe ffb6 	bl	8003344 <HAL_PWREx_GetVoltageRange>
 80043d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d10b      	bne.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d919      	bls.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2ba0      	cmp	r3, #160	; 0xa0
 80043f8:	d902      	bls.n	8004400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043fa:	2302      	movs	r3, #2
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e013      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004400:	2301      	movs	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e010      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d902      	bls.n	8004412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800440c:	2303      	movs	r3, #3
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e00a      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d102      	bne.n	800441e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004418:	2302      	movs	r3, #2
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	e004      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b70      	cmp	r3, #112	; 0x70
 8004422:	d101      	bne.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004424:	2301      	movs	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 0207 	bic.w	r2, r3, #7
 8004430:	4909      	ldr	r1, [pc, #36]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d001      	beq.n	800444a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	40022000 	.word	0x40022000

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004464:	2300      	movs	r3, #0
 8004466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004468:	2300      	movs	r3, #0
 800446a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d14b      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d145      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d13f      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d139      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d133      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d12d      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d127      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d121      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d11b      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d115      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10f      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d103      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004508:	21cb      	movs	r1, #203	; 0xcb
 800450a:	487d      	ldr	r0, [pc, #500]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800450c:	f7fc f9a1 	bl	8000852 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d043      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800452c:	d008      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004536:	d003      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004538:	21d3      	movs	r1, #211	; 0xd3
 800453a:	4871      	ldr	r0, [pc, #452]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800453c:	f7fc f989 	bl	8000852 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004548:	d01a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800454a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800454e:	d814      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004558:	d10f      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800455a:	4b6a      	ldr	r3, [pc, #424]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	4a69      	ldr	r2, [pc, #420]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004566:	e00c      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x126>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fae8 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x126>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	74fb      	strb	r3, [r7, #19]
      break;
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x126>
      break;
 8004580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004582:	7cfb      	ldrb	r3, [r7, #19]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	495b      	ldr	r1, [pc, #364]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800459e:	e001      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80b8 	beq.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d013      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d00e      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d0:	d009      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045da:	d004      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045dc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80045e0:	4847      	ldr	r0, [pc, #284]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80045e2:	f7fc f936 	bl	8000852 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fc:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	4a40      	ldr	r2, [pc, #256]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004606:	6593      	str	r3, [r2, #88]	; 0x58
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004614:	2301      	movs	r3, #1
 8004616:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004618:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a3a      	ldr	r2, [pc, #232]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800461e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004622:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004624:	f7fc fb42 	bl	8000cac <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800462a:	e009      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462c:	f7fc fb3e 	bl	8000cac <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d902      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        ret = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	74fb      	strb	r3, [r7, #19]
        break;
 800463e:	e005      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004640:	4b31      	ldr	r3, [pc, #196]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ef      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      }
    }

    if(ret == HAL_OK)
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d15c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004652:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01e      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	429a      	cmp	r2, r3
 800466c:	d019      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x246>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800466e:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004678:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	4a20      	ldr	r2, [pc, #128]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800469a:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d016      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x27e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fc fafe 	bl	8000cac <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b2:	e00b      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x270>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fc fafa 	bl	8000cac <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d902      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x270>
          {
            ret = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	74fb      	strb	r3, [r7, #19]
            break;
 80046ca:	e006      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x27e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ec      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
          }
        }
      }

      if(ret == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	4905      	ldr	r1, [pc, #20]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046f6:	e00b      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80046fe:	bf00      	nop
 8004700:	08006098 	.word	0x08006098
 8004704:	40021000 	.word	0x40021000
 8004708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004710:	7c7b      	ldrb	r3, [r7, #17]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004716:	4ba5      	ldr	r3, [pc, #660]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	4aa4      	ldr	r2, [pc, #656]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800471c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01f      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d00c      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d008      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d004      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800474e:	f240 119b 	movw	r1, #411	; 0x19b
 8004752:	4897      	ldr	r0, [pc, #604]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004754:	f7fc f87d 	bl	8000852 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004758:	4b94      	ldr	r3, [pc, #592]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4991      	ldr	r1, [pc, #580]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01f      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b04      	cmp	r3, #4
 8004788:	d00c      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d008      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2b08      	cmp	r3, #8
 8004798:	d004      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800479a:	f240 11a5 	movw	r1, #421	; 0x1a5
 800479e:	4884      	ldr	r0, [pc, #528]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80047a0:	f7fc f857 	bl	8000852 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047a4:	4b81      	ldr	r3, [pc, #516]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 020c 	bic.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	497e      	ldr	r1, [pc, #504]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d022      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d013      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d00e      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047e0:	d009      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d004      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80047ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80047f0:	486f      	ldr	r0, [pc, #444]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80047f2:	f7fc f82e 	bl	8000852 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047f6:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	4969      	ldr	r1, [pc, #420]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004814:	2b00      	cmp	r3, #0
 8004816:	d022      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x402>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004828:	d00e      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004832:	d009      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800483c:	d004      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800483e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004842:	485b      	ldr	r0, [pc, #364]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004844:	f7fc f805 	bl	8000852 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	4955      	ldr	r1, [pc, #340]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	2b00      	cmp	r3, #0
 8004868:	d022      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d013      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800487a:	d00e      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004884:	d009      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800488e:	d004      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004890:	f240 11e9 	movw	r1, #489	; 0x1e9
 8004894:	4846      	ldr	r0, [pc, #280]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004896:	f7fb ffdc 	bl	8000852 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800489a:	4b44      	ldr	r3, [pc, #272]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	4940      	ldr	r1, [pc, #256]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01d      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00e      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048cc:	d009      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d6:	d004      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048d8:	f240 11f1 	movw	r1, #497	; 0x1f1
 80048dc:	4834      	ldr	r0, [pc, #208]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80048de:	f7fb ffb8 	bl	8000852 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048e2:	4b32      	ldr	r3, [pc, #200]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	492e      	ldr	r1, [pc, #184]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01d      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d009      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491e:	d004      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004920:	f240 2109 	movw	r1, #521	; 0x209
 8004924:	4822      	ldr	r0, [pc, #136]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004926:	f7fb ff94 	bl	8000852 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	491c      	ldr	r1, [pc, #112]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d045      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800495c:	d00e      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004966:	d009      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004970:	d004      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004972:	f240 2122 	movw	r1, #546	; 0x222
 8004976:	480e      	ldr	r0, [pc, #56]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004978:	f7fb ff6b 	bl	8000852 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	4908      	ldr	r1, [pc, #32]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800499a:	d10b      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x558>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a02      	ldr	r2, [pc, #8]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
 80049a8:	e016      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	08006098 	.word	0x08006098
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2101      	movs	r1, #1
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 f8bd 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
        {
          /* set overall return value */
          status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d040      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f4:	d00e      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049fe:	d009      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a08:	d004      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004a0a:	f44f 711a 	mov.w	r1, #616	; 0x268
 8004a0e:	4843      	ldr	r0, [pc, #268]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004a10:	f7fb ff1f 	bl	8000852 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a14:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	493f      	ldr	r1, [pc, #252]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a32:	d106      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a34:	4b3a      	ldr	r3, [pc, #232]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a39      	ldr	r2, [pc, #228]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3e:	60d3      	str	r3, [r2, #12]
 8004a40:	e011      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f876 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      {
        /* set overall return value */
        status = ret;
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d02f      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a82:	d009      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a8c:	d004      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004a8e:	f44f 7122 	mov.w	r1, #648	; 0x288
 8004a92:	4822      	ldr	r0, [pc, #136]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004a94:	f7fb fedd 	bl	8000852 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a98:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	491e      	ldr	r1, [pc, #120]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	2102      	movs	r1, #2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f840 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d004      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8004af0:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8004af4:	4809      	ldr	r0, [pc, #36]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004af6:	f7fb feac 	bl	8000852 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b08:	4905      	ldr	r1, [pc, #20]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b10:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	08006098 	.word	0x08006098
 8004b20:	40021000 	.word	0x40021000

08004b24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6013      	str	r3, [r2, #0]
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000

08004b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d010      	beq.n	8004b7c <RCCEx_PLLSAI1_Config+0x38>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d00c      	beq.n	8004b7c <RCCEx_PLLSAI1_Config+0x38>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d008      	beq.n	8004b7c <RCCEx_PLLSAI1_Config+0x38>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d004      	beq.n	8004b7c <RCCEx_PLLSAI1_Config+0x38>
 8004b72:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8004b76:	48a4      	ldr	r0, [pc, #656]	; (8004e08 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004b78:	f7fb fe6b 	bl	8000852 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <RCCEx_PLLSAI1_Config+0x48>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d904      	bls.n	8004b96 <RCCEx_PLLSAI1_Config+0x52>
 8004b8c:	f640 3161 	movw	r1, #2913	; 0xb61
 8004b90:	489d      	ldr	r0, [pc, #628]	; (8004e08 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004b92:	f7fb fe5e 	bl	8000852 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b07      	cmp	r3, #7
 8004b9c:	d903      	bls.n	8004ba6 <RCCEx_PLLSAI1_Config+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b56      	cmp	r3, #86	; 0x56
 8004ba4:	d904      	bls.n	8004bb0 <RCCEx_PLLSAI1_Config+0x6c>
 8004ba6:	f640 3162 	movw	r1, #2914	; 0xb62
 8004baa:	4897      	ldr	r0, [pc, #604]	; (8004e08 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004bac:	f7fb fe51 	bl	8000852 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0x90>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0x90>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <RCCEx_PLLSAI1_Config+0xa0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0xaa>
 8004be4:	f640 3163 	movw	r1, #2915	; 0xb63
 8004be8:	4887      	ldr	r0, [pc, #540]	; (8004e08 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004bea:	f7fb fe32 	bl	8000852 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bee:	4b87      	ldr	r3, [pc, #540]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bfa:	4b84      	ldr	r3, [pc, #528]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0203 	and.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10d      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c12:	4b7e      	ldr	r3, [pc, #504]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
       ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d047      	beq.n	8004cb6 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e044      	b.n	8004cb6 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d018      	beq.n	8004c66 <RCCEx_PLLSAI1_Config+0x122>
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d825      	bhi.n	8004c84 <RCCEx_PLLSAI1_Config+0x140>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d002      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0xfe>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d009      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x110>
 8004c40:	e020      	b.n	8004c84 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c42:	4b72      	ldr	r3, [pc, #456]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11d      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c52:	e01a      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c54:	4b6d      	ldr	r3, [pc, #436]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e013      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c66:	4b69      	ldr	r3, [pc, #420]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c72:	4b66      	ldr	r3, [pc, #408]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      break;
 8004c88:	e004      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c9a:	4b5c      	ldr	r3, [pc, #368]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	4956      	ldr	r1, [pc, #344]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 80b9 	bne.w	8004e30 <RCCEx_PLLSAI1_Config+0x2ec>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cbe:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a52      	ldr	r2, [pc, #328]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004cc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cca:	f7fb ffef 	bl	8000cac <HAL_GetTick>
 8004cce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cd0:	e009      	b.n	8004ce6 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cd2:	f7fb ffeb 	bl	8000cac <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d902      	bls.n	8004ce6 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce4:	e005      	b.n	8004cf2 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce6:	4b49      	ldr	r3, [pc, #292]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ef      	bne.n	8004cd2 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 809b 	bne.w	8004e30 <RCCEx_PLLSAI1_Config+0x2ec>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11d      	bne.n	8004d3c <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d903      	bls.n	8004d10 <RCCEx_PLLSAI1_Config+0x1cc>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b1f      	cmp	r3, #31
 8004d0e:	d904      	bls.n	8004d1a <RCCEx_PLLSAI1_Config+0x1d6>
 8004d10:	f640 31b6 	movw	r1, #2998	; 0xbb6
 8004d14:	483c      	ldr	r0, [pc, #240]	; (8004e08 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004d16:	f7fb fd9c 	bl	8000852 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004d22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6892      	ldr	r2, [r2, #8]
 8004d2a:	0211      	lsls	r1, r2, #8
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68d2      	ldr	r2, [r2, #12]
 8004d30:	06d2      	lsls	r2, r2, #27
 8004d32:	430a      	orrs	r2, r1
 8004d34:	4935      	ldr	r1, [pc, #212]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	610b      	str	r3, [r1, #16]
 8004d3a:	e051      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0x29c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d127      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0x24e>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d010      	beq.n	8004d6c <RCCEx_PLLSAI1_Config+0x228>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d00c      	beq.n	8004d6c <RCCEx_PLLSAI1_Config+0x228>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	d008      	beq.n	8004d6c <RCCEx_PLLSAI1_Config+0x228>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d004      	beq.n	8004d6c <RCCEx_PLLSAI1_Config+0x228>
 8004d62:	f640 31da 	movw	r1, #3034	; 0xbda
 8004d66:	4828      	ldr	r0, [pc, #160]	; (8004e08 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004d68:	f7fb fd73 	bl	8000852 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6892      	ldr	r2, [r2, #8]
 8004d7c:	0211      	lsls	r1, r2, #8
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6912      	ldr	r2, [r2, #16]
 8004d82:	0852      	lsrs	r2, r2, #1
 8004d84:	3a01      	subs	r2, #1
 8004d86:	0552      	lsls	r2, r2, #21
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	4920      	ldr	r1, [pc, #128]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	610b      	str	r3, [r1, #16]
 8004d90:	e026      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0x29c>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d010      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x278>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d00c      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x278>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d008      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x278>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d004      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x278>
 8004db2:	f640 31ec 	movw	r1, #3052	; 0xbec
 8004db6:	4814      	ldr	r0, [pc, #80]	; (8004e08 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004db8:	f7fb fd4b 	bl	8000852 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6892      	ldr	r2, [r2, #8]
 8004dcc:	0211      	lsls	r1, r2, #8
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6952      	ldr	r2, [r2, #20]
 8004dd2:	0852      	lsrs	r2, r2, #1
 8004dd4:	3a01      	subs	r2, #1
 8004dd6:	0652      	lsls	r2, r2, #25
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	490c      	ldr	r1, [pc, #48]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <RCCEx_PLLSAI1_Config+0x2c8>)
 8004de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dec:	f7fb ff5e 	bl	8000cac <HAL_GetTick>
 8004df0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004df2:	e00d      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df4:	f7fb ff5a 	bl	8000cac <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d906      	bls.n	8004e10 <RCCEx_PLLSAI1_Config+0x2cc>
        {
          status = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	73fb      	strb	r3, [r7, #15]
          break;
 8004e06:	e009      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x2d8>
 8004e08:	08006098 	.word	0x08006098
 8004e0c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <RCCEx_PLLSAI1_Config+0x2f8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0eb      	beq.n	8004df4 <RCCEx_PLLSAI1_Config+0x2b0>
        }
      }

      if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <RCCEx_PLLSAI1_Config+0x2ec>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <RCCEx_PLLSAI1_Config+0x2f8>)
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	4904      	ldr	r1, [pc, #16]	; (8004e3c <RCCEx_PLLSAI1_Config+0x2f8>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000

08004e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0a5      	b.n	8004f9e <HAL_TIM_Base_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a54      	ldr	r2, [pc, #336]	; (8004fa8 <HAL_TIM_Base_Init+0x168>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d01d      	beq.n	8004e98 <HAL_TIM_Base_Init+0x58>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d018      	beq.n	8004e98 <HAL_TIM_Base_Init+0x58>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a50      	ldr	r2, [pc, #320]	; (8004fac <HAL_TIM_Base_Init+0x16c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <HAL_TIM_Base_Init+0x58>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a4e      	ldr	r2, [pc, #312]	; (8004fb0 <HAL_TIM_Base_Init+0x170>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_TIM_Base_Init+0x58>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a4d      	ldr	r2, [pc, #308]	; (8004fb4 <HAL_TIM_Base_Init+0x174>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_TIM_Base_Init+0x58>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a4b      	ldr	r2, [pc, #300]	; (8004fb8 <HAL_TIM_Base_Init+0x178>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIM_Base_Init+0x58>
 8004e8e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004e92:	484a      	ldr	r0, [pc, #296]	; (8004fbc <HAL_TIM_Base_Init+0x17c>)
 8004e94:	f7fb fcdd 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d014      	beq.n	8004eca <HAL_TIM_Base_Init+0x8a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d010      	beq.n	8004eca <HAL_TIM_Base_Init+0x8a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d00c      	beq.n	8004eca <HAL_TIM_Base_Init+0x8a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	d008      	beq.n	8004eca <HAL_TIM_Base_Init+0x8a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b60      	cmp	r3, #96	; 0x60
 8004ebe:	d004      	beq.n	8004eca <HAL_TIM_Base_Init+0x8a>
 8004ec0:	f240 1117 	movw	r1, #279	; 0x117
 8004ec4:	483d      	ldr	r0, [pc, #244]	; (8004fbc <HAL_TIM_Base_Init+0x17c>)
 8004ec6:	f7fb fcc4 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_TIM_Base_Init+0xb0>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	d009      	beq.n	8004ef0 <HAL_TIM_Base_Init+0xb0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_Base_Init+0xb0>
 8004ee6:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004eea:	4834      	ldr	r0, [pc, #208]	; (8004fbc <HAL_TIM_Base_Init+0x17c>)
 8004eec:	f7fb fcb1 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_TIM_Base_Init+0xca>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d004      	beq.n	8004f0a <HAL_TIM_Base_Init+0xca>
 8004f00:	f240 1119 	movw	r1, #281	; 0x119
 8004f04:	482d      	ldr	r0, [pc, #180]	; (8004fbc <HAL_TIM_Base_Init+0x17c>)
 8004f06:	f7fb fca4 	bl	8000852 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fb fd32 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 fa08 	bl	800534c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40001000 	.word	0x40001000
 8004fb0:	40001400 	.word	0x40001400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	080060d4 	.word	0x080060d4

08004fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a34      	ldr	r2, [pc, #208]	; (80050a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01d      	beq.n	800500e <HAL_TIM_Base_Start_IT+0x4e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d018      	beq.n	800500e <HAL_TIM_Base_Start_IT+0x4e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a30      	ldr	r2, [pc, #192]	; (80050a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <HAL_TIM_Base_Start_IT+0x4e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_TIM_Base_Start_IT+0x4e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	; (80050ac <HAL_TIM_Base_Start_IT+0xec>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_TIM_Base_Start_IT+0x4e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2c      	ldr	r2, [pc, #176]	; (80050b0 <HAL_TIM_Base_Start_IT+0xf0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <HAL_TIM_Base_Start_IT+0x4e>
 8005004:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8005008:	482a      	ldr	r0, [pc, #168]	; (80050b4 <HAL_TIM_Base_Start_IT+0xf4>)
 800500a:	f7fb fc22 	bl	8000852 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x5e>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e03b      	b.n	8005096 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <HAL_TIM_Base_Start_IT+0xe0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x94>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d004      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x94>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_TIM_Base_Start_IT+0xec>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d115      	bne.n	8005080 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <HAL_TIM_Base_Start_IT+0xf8>)
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b06      	cmp	r3, #6
 8005064:	d015      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0xd2>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d011      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	e008      	b.n	8005092 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e000      	b.n	8005094 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40001000 	.word	0x40001000
 80050a8:	40001400 	.word	0x40001400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	080060d4 	.word	0x080060d4
 80050b8:	00010007 	.word	0x00010007

080050bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0202 	mvn.w	r2, #2
 80050e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f905 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f8f7 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f908 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0204 	mvn.w	r2, #4
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8db 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8cd 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8de 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b08      	cmp	r3, #8
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0208 	mvn.w	r2, #8
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8b1 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8a3 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8b4 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0210 	mvn.w	r2, #16
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2208      	movs	r2, #8
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f887 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f879 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f88a 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0201 	mvn.w	r2, #1
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb f942 	bl	80004c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8de 	bl	8005428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	d10e      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d107      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8d1 	bl	800543c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f838 	bl	8005336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d10e      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0220 	mvn.w	r2, #32
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f891 	bl	8005414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <TIM_Base_SetConfig+0xbc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0x20>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d108      	bne.n	800537e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a21      	ldr	r2, [pc, #132]	; (8005408 <TIM_Base_SetConfig+0xbc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00b      	beq.n	800539e <TIM_Base_SetConfig+0x52>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d007      	beq.n	800539e <TIM_Base_SetConfig+0x52>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1e      	ldr	r2, [pc, #120]	; (800540c <TIM_Base_SetConfig+0xc0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_Base_SetConfig+0x52>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <TIM_Base_SetConfig+0xc4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <TIM_Base_SetConfig+0xbc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_Base_SetConfig+0xa0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0b      	ldr	r2, [pc, #44]	; (800540c <TIM_Base_SetConfig+0xc0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0xa0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <TIM_Base_SetConfig+0xc4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d103      	bne.n	80053f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	615a      	str	r2, [r3, #20]
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400

08005414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e06d      	b.n	800553e <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d014      	beq.n	8005494 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a36      	ldr	r2, [pc, #216]	; (8005548 <HAL_UART_Init+0xf8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d023      	beq.n	80054bc <HAL_UART_Init+0x6c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a34      	ldr	r2, [pc, #208]	; (800554c <HAL_UART_Init+0xfc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01e      	beq.n	80054bc <HAL_UART_Init+0x6c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a33      	ldr	r2, [pc, #204]	; (8005550 <HAL_UART_Init+0x100>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d019      	beq.n	80054bc <HAL_UART_Init+0x6c>
 8005488:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800548c:	4831      	ldr	r0, [pc, #196]	; (8005554 <HAL_UART_Init+0x104>)
 800548e:	f7fb f9e0 	bl	8000852 <assert_failed>
 8005492:	e013      	b.n	80054bc <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_UART_Init+0xf8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <HAL_UART_Init+0x6c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_UART_Init+0xfc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_UART_Init+0x6c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a28      	ldr	r2, [pc, #160]	; (8005550 <HAL_UART_Init+0x100>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_UART_Init+0x6c>
 80054b2:	f240 1151 	movw	r1, #337	; 0x151
 80054b6:	4827      	ldr	r0, [pc, #156]	; (8005554 <HAL_UART_Init+0x104>)
 80054b8:	f7fb f9cb 	bl	8000852 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fb fa81 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2224      	movs	r2, #36	; 0x24
 80054d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f835 	bl	8005558 <UART_SetConfig>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e022      	b.n	800553e <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fad5 	bl	8005ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005514:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005524:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fc00 	bl	8005d3c <UART_CheckIdleState>
 800553c:	4603      	mov	r3, r0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40013800 	.word	0x40013800
 800554c:	40004400 	.word	0x40004400
 8005550:	40008000 	.word	0x40008000
 8005554:	0800610c 	.word	0x0800610c

08005558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	b5b0      	push	{r4, r5, r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4aaa      	ldr	r2, [pc, #680]	; (8005814 <UART_SetConfig+0x2bc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d904      	bls.n	8005578 <UART_SetConfig+0x20>
 800556e:	f640 4145 	movw	r1, #3141	; 0xc45
 8005572:	48a9      	ldr	r0, [pc, #676]	; (8005818 <UART_SetConfig+0x2c0>)
 8005574:	f7fb f96d 	bl	8000852 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005580:	d00d      	beq.n	800559e <UART_SetConfig+0x46>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <UART_SetConfig+0x46>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005592:	d004      	beq.n	800559e <UART_SetConfig+0x46>
 8005594:	f640 4146 	movw	r1, #3142	; 0xc46
 8005598:	489f      	ldr	r0, [pc, #636]	; (8005818 <UART_SetConfig+0x2c0>)
 800559a:	f7fb f95a 	bl	8000852 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a9e      	ldr	r2, [pc, #632]	; (800581c <UART_SetConfig+0x2c4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10e      	bne.n	80055c6 <UART_SetConfig+0x6e>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d030      	beq.n	8005612 <UART_SetConfig+0xba>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b8:	d02b      	beq.n	8005612 <UART_SetConfig+0xba>
 80055ba:	f640 4149 	movw	r1, #3145	; 0xc49
 80055be:	4896      	ldr	r0, [pc, #600]	; (8005818 <UART_SetConfig+0x2c0>)
 80055c0:	f7fb f947 	bl	8000852 <assert_failed>
 80055c4:	e025      	b.n	8005612 <UART_SetConfig+0xba>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	d012      	beq.n	80055f6 <UART_SetConfig+0x9e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <UART_SetConfig+0x9e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055e0:	d009      	beq.n	80055f6 <UART_SetConfig+0x9e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d004      	beq.n	80055f6 <UART_SetConfig+0x9e>
 80055ec:	f640 414d 	movw	r1, #3149	; 0xc4d
 80055f0:	4889      	ldr	r0, [pc, #548]	; (8005818 <UART_SetConfig+0x2c0>)
 80055f2:	f7fb f92e 	bl	8000852 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <UART_SetConfig+0xba>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005606:	d004      	beq.n	8005612 <UART_SetConfig+0xba>
 8005608:	f640 414e 	movw	r1, #3150	; 0xc4e
 800560c:	4882      	ldr	r0, [pc, #520]	; (8005818 <UART_SetConfig+0x2c0>)
 800560e:	f7fb f920 	bl	8000852 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <UART_SetConfig+0xe0>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d009      	beq.n	8005638 <UART_SetConfig+0xe0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800562c:	d004      	beq.n	8005638 <UART_SetConfig+0xe0>
 800562e:	f640 4151 	movw	r1, #3153	; 0xc51
 8005632:	4879      	ldr	r0, [pc, #484]	; (8005818 <UART_SetConfig+0x2c0>)
 8005634:	f7fb f90d 	bl	8000852 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f023 030c 	bic.w	r3, r3, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <UART_SetConfig+0xf4>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <UART_SetConfig+0xfe>
 800564c:	f640 4152 	movw	r1, #3154	; 0xc52
 8005650:	4871      	ldr	r0, [pc, #452]	; (8005818 <UART_SetConfig+0x2c0>)
 8005652:	f7fb f8fe 	bl	8000852 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d013      	beq.n	8005686 <UART_SetConfig+0x12e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	d00e      	beq.n	8005686 <UART_SetConfig+0x12e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005670:	d009      	beq.n	8005686 <UART_SetConfig+0x12e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567a:	d004      	beq.n	8005686 <UART_SetConfig+0x12e>
 800567c:	f640 4153 	movw	r1, #3155	; 0xc53
 8005680:	4865      	ldr	r0, [pc, #404]	; (8005818 <UART_SetConfig+0x2c0>)
 8005682:	f7fb f8e6 	bl	8000852 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <UART_SetConfig+0x14a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005696:	d004      	beq.n	80056a2 <UART_SetConfig+0x14a>
 8005698:	f640 4154 	movw	r1, #3156	; 0xc54
 800569c:	485e      	ldr	r0, [pc, #376]	; (8005818 <UART_SetConfig+0x2c0>)
 800569e:	f7fb f8d8 	bl	8000852 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b57      	ldr	r3, [pc, #348]	; (8005820 <UART_SetConfig+0x2c8>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	430b      	orrs	r3, r1
 80056cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4b      	ldr	r2, [pc, #300]	; (800581c <UART_SetConfig+0x2c4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <UART_SetConfig+0x1a6>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a43      	ldr	r2, [pc, #268]	; (8005824 <UART_SetConfig+0x2cc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d120      	bne.n	800575e <UART_SetConfig+0x206>
 800571c:	4b42      	ldr	r3, [pc, #264]	; (8005828 <UART_SetConfig+0x2d0>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b03      	cmp	r3, #3
 8005728:	d816      	bhi.n	8005758 <UART_SetConfig+0x200>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x1d8>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005741 	.word	0x08005741
 8005734:	0800574d 	.word	0x0800574d
 8005738:	08005747 	.word	0x08005747
 800573c:	08005753 	.word	0x08005753
 8005740:	2301      	movs	r3, #1
 8005742:	76fb      	strb	r3, [r7, #27]
 8005744:	e07f      	b.n	8005846 <UART_SetConfig+0x2ee>
 8005746:	2302      	movs	r3, #2
 8005748:	76fb      	strb	r3, [r7, #27]
 800574a:	e07c      	b.n	8005846 <UART_SetConfig+0x2ee>
 800574c:	2304      	movs	r3, #4
 800574e:	76fb      	strb	r3, [r7, #27]
 8005750:	e079      	b.n	8005846 <UART_SetConfig+0x2ee>
 8005752:	2308      	movs	r3, #8
 8005754:	76fb      	strb	r3, [r7, #27]
 8005756:	e076      	b.n	8005846 <UART_SetConfig+0x2ee>
 8005758:	2310      	movs	r3, #16
 800575a:	76fb      	strb	r3, [r7, #27]
 800575c:	e073      	b.n	8005846 <UART_SetConfig+0x2ee>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a32      	ldr	r2, [pc, #200]	; (800582c <UART_SetConfig+0x2d4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d132      	bne.n	80057ce <UART_SetConfig+0x276>
 8005768:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <UART_SetConfig+0x2d0>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b0c      	cmp	r3, #12
 8005774:	d828      	bhi.n	80057c8 <UART_SetConfig+0x270>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0x224>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057bd 	.word	0x080057bd
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080057c9 	.word	0x080057c9
 800579c:	080057b7 	.word	0x080057b7
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057c9 	.word	0x080057c9
 80057ac:	080057c3 	.word	0x080057c3
 80057b0:	2300      	movs	r3, #0
 80057b2:	76fb      	strb	r3, [r7, #27]
 80057b4:	e047      	b.n	8005846 <UART_SetConfig+0x2ee>
 80057b6:	2302      	movs	r3, #2
 80057b8:	76fb      	strb	r3, [r7, #27]
 80057ba:	e044      	b.n	8005846 <UART_SetConfig+0x2ee>
 80057bc:	2304      	movs	r3, #4
 80057be:	76fb      	strb	r3, [r7, #27]
 80057c0:	e041      	b.n	8005846 <UART_SetConfig+0x2ee>
 80057c2:	2308      	movs	r3, #8
 80057c4:	76fb      	strb	r3, [r7, #27]
 80057c6:	e03e      	b.n	8005846 <UART_SetConfig+0x2ee>
 80057c8:	2310      	movs	r3, #16
 80057ca:	76fb      	strb	r3, [r7, #27]
 80057cc:	e03b      	b.n	8005846 <UART_SetConfig+0x2ee>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <UART_SetConfig+0x2c4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d134      	bne.n	8005842 <UART_SetConfig+0x2ea>
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <UART_SetConfig+0x2d0>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057e6:	d026      	beq.n	8005836 <UART_SetConfig+0x2de>
 80057e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ec:	d826      	bhi.n	800583c <UART_SetConfig+0x2e4>
 80057ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f2:	d00b      	beq.n	800580c <UART_SetConfig+0x2b4>
 80057f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f8:	d820      	bhi.n	800583c <UART_SetConfig+0x2e4>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <UART_SetConfig+0x2ae>
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	d015      	beq.n	8005830 <UART_SetConfig+0x2d8>
 8005804:	e01a      	b.n	800583c <UART_SetConfig+0x2e4>
 8005806:	2300      	movs	r3, #0
 8005808:	76fb      	strb	r3, [r7, #27]
 800580a:	e01c      	b.n	8005846 <UART_SetConfig+0x2ee>
 800580c:	2302      	movs	r3, #2
 800580e:	76fb      	strb	r3, [r7, #27]
 8005810:	e019      	b.n	8005846 <UART_SetConfig+0x2ee>
 8005812:	bf00      	nop
 8005814:	00989680 	.word	0x00989680
 8005818:	0800610c 	.word	0x0800610c
 800581c:	40008000 	.word	0x40008000
 8005820:	efff69f3 	.word	0xefff69f3
 8005824:	40013800 	.word	0x40013800
 8005828:	40021000 	.word	0x40021000
 800582c:	40004400 	.word	0x40004400
 8005830:	2304      	movs	r3, #4
 8005832:	76fb      	strb	r3, [r7, #27]
 8005834:	e007      	b.n	8005846 <UART_SetConfig+0x2ee>
 8005836:	2308      	movs	r3, #8
 8005838:	76fb      	strb	r3, [r7, #27]
 800583a:	e004      	b.n	8005846 <UART_SetConfig+0x2ee>
 800583c:	2310      	movs	r3, #16
 800583e:	76fb      	strb	r3, [r7, #27]
 8005840:	e001      	b.n	8005846 <UART_SetConfig+0x2ee>
 8005842:	2310      	movs	r3, #16
 8005844:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a97      	ldr	r2, [pc, #604]	; (8005aa8 <UART_SetConfig+0x550>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d172      	bne.n	8005936 <UART_SetConfig+0x3de>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005850:	7efb      	ldrb	r3, [r7, #27]
 8005852:	2b08      	cmp	r3, #8
 8005854:	d823      	bhi.n	800589e <UART_SetConfig+0x346>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x304>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	08005881 	.word	0x08005881
 8005860:	0800589f 	.word	0x0800589f
 8005864:	08005889 	.word	0x08005889
 8005868:	0800589f 	.word	0x0800589f
 800586c:	0800588f 	.word	0x0800588f
 8005870:	0800589f 	.word	0x0800589f
 8005874:	0800589f 	.word	0x0800589f
 8005878:	0800589f 	.word	0x0800589f
 800587c:	08005897 	.word	0x08005897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005880:	f7fe fd60 	bl	8004344 <HAL_RCC_GetPCLK1Freq>
 8005884:	6178      	str	r0, [r7, #20]
        break;
 8005886:	e00f      	b.n	80058a8 <UART_SetConfig+0x350>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005888:	4b88      	ldr	r3, [pc, #544]	; (8005aac <UART_SetConfig+0x554>)
 800588a:	617b      	str	r3, [r7, #20]
        break;
 800588c:	e00c      	b.n	80058a8 <UART_SetConfig+0x350>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588e:	f7fe fcc1 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8005892:	6178      	str	r0, [r7, #20]
        break;
 8005894:	e008      	b.n	80058a8 <UART_SetConfig+0x350>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589a:	617b      	str	r3, [r7, #20]
        break;
 800589c:	e004      	b.n	80058a8 <UART_SetConfig+0x350>
      default:
        pclk = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	76bb      	strb	r3, [r7, #26]
        break;
 80058a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80f0 	beq.w	8005a90 <UART_SetConfig+0x538>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	4413      	add	r3, r2
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d305      	bcc.n	80058cc <UART_SetConfig+0x374>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d902      	bls.n	80058d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	76bb      	strb	r3, [r7, #26]
 80058d0:	e0de      	b.n	8005a90 <UART_SetConfig+0x538>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f04f 0100 	mov.w	r1, #0
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	020b      	lsls	r3, r1, #8
 80058e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058e8:	0202      	lsls	r2, r0, #8
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	6849      	ldr	r1, [r1, #4]
 80058ee:	0849      	lsrs	r1, r1, #1
 80058f0:	4608      	mov	r0, r1
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	1814      	adds	r4, r2, r0
 80058f8:	eb43 0501 	adc.w	r5, r3, r1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	461a      	mov	r2, r3
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	4620      	mov	r0, r4
 8005908:	4629      	mov	r1, r5
 800590a:	f7fa fc5f 	bl	80001cc <__aeabi_uldivmod>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4613      	mov	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591c:	d308      	bcc.n	8005930 <UART_SetConfig+0x3d8>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005924:	d204      	bcs.n	8005930 <UART_SetConfig+0x3d8>
        {
          huart->Instance->BRR = usartdiv;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e0af      	b.n	8005a90 <UART_SetConfig+0x538>
        }
        else
        {
          ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	76bb      	strb	r3, [r7, #26]
 8005934:	e0ac      	b.n	8005a90 <UART_SetConfig+0x538>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593e:	d15b      	bne.n	80059f8 <UART_SetConfig+0x4a0>
  {
    switch (clocksource)
 8005940:	7efb      	ldrb	r3, [r7, #27]
 8005942:	2b08      	cmp	r3, #8
 8005944:	d827      	bhi.n	8005996 <UART_SetConfig+0x43e>
 8005946:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0x3f4>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	08005971 	.word	0x08005971
 8005950:	08005979 	.word	0x08005979
 8005954:	08005981 	.word	0x08005981
 8005958:	08005997 	.word	0x08005997
 800595c:	08005987 	.word	0x08005987
 8005960:	08005997 	.word	0x08005997
 8005964:	08005997 	.word	0x08005997
 8005968:	08005997 	.word	0x08005997
 800596c:	0800598f 	.word	0x0800598f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fe fce8 	bl	8004344 <HAL_RCC_GetPCLK1Freq>
 8005974:	6178      	str	r0, [r7, #20]
        break;
 8005976:	e013      	b.n	80059a0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005978:	f7fe fcfa 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 800597c:	6178      	str	r0, [r7, #20]
        break;
 800597e:	e00f      	b.n	80059a0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005980:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <UART_SetConfig+0x554>)
 8005982:	617b      	str	r3, [r7, #20]
        break;
 8005984:	e00c      	b.n	80059a0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005986:	f7fe fc45 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 800598a:	6178      	str	r0, [r7, #20]
        break;
 800598c:	e008      	b.n	80059a0 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	617b      	str	r3, [r7, #20]
        break;
 8005994:	e004      	b.n	80059a0 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	76bb      	strb	r3, [r7, #26]
        break;
 800599e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d074      	beq.n	8005a90 <UART_SetConfig+0x538>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	005a      	lsls	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b0f      	cmp	r3, #15
 80059c2:	d916      	bls.n	80059f2 <UART_SetConfig+0x49a>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d212      	bcs.n	80059f2 <UART_SetConfig+0x49a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f023 030f 	bic.w	r3, r3, #15
 80059d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	89fb      	ldrh	r3, [r7, #14]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	89fa      	ldrh	r2, [r7, #14]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	e04e      	b.n	8005a90 <UART_SetConfig+0x538>
      }
      else
      {
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	76bb      	strb	r3, [r7, #26]
 80059f6:	e04b      	b.n	8005a90 <UART_SetConfig+0x538>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059f8:	7efb      	ldrb	r3, [r7, #27]
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d827      	bhi.n	8005a4e <UART_SetConfig+0x4f6>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x4ac>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	08005a4f 	.word	0x08005a4f
 8005a14:	08005a3f 	.word	0x08005a3f
 8005a18:	08005a4f 	.word	0x08005a4f
 8005a1c:	08005a4f 	.word	0x08005a4f
 8005a20:	08005a4f 	.word	0x08005a4f
 8005a24:	08005a47 	.word	0x08005a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a28:	f7fe fc8c 	bl	8004344 <HAL_RCC_GetPCLK1Freq>
 8005a2c:	6178      	str	r0, [r7, #20]
        break;
 8005a2e:	e013      	b.n	8005a58 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7fe fc9e 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 8005a34:	6178      	str	r0, [r7, #20]
        break;
 8005a36:	e00f      	b.n	8005a58 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a38:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <UART_SetConfig+0x554>)
 8005a3a:	617b      	str	r3, [r7, #20]
        break;
 8005a3c:	e00c      	b.n	8005a58 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fe fbe9 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8005a42:	6178      	str	r0, [r7, #20]
        break;
 8005a44:	e008      	b.n	8005a58 <UART_SetConfig+0x500>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	617b      	str	r3, [r7, #20]
        break;
 8005a4c:	e004      	b.n	8005a58 <UART_SetConfig+0x500>
      default:
        pclk = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	76bb      	strb	r3, [r7, #26]
        break;
 8005a56:	bf00      	nop
    }

    if (pclk != 0U)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d018      	beq.n	8005a90 <UART_SetConfig+0x538>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	085a      	lsrs	r2, r3, #1
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	441a      	add	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b0f      	cmp	r3, #15
 8005a78:	d908      	bls.n	8005a8c <UART_SetConfig+0x534>
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a80:	d204      	bcs.n	8005a8c <UART_SetConfig+0x534>
      {
        huart->Instance->BRR = usartdiv;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	e001      	b.n	8005a90 <UART_SetConfig+0x538>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40008000 	.word	0x40008000
 8005aac:	00f42400 	.word	0x00f42400

08005ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2bff      	cmp	r3, #255	; 0xff
 8005abe:	d904      	bls.n	8005aca <UART_AdvFeatureConfig+0x1a>
 8005ac0:	f640 513a 	movw	r1, #3386	; 0xd3a
 8005ac4:	489a      	ldr	r0, [pc, #616]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005ac6:	f7fa fec4 	bl	8000852 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d018      	beq.n	8005b08 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <UART_AdvFeatureConfig+0x42>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae6:	d004      	beq.n	8005af2 <UART_AdvFeatureConfig+0x42>
 8005ae8:	f640 513f 	movw	r1, #3391	; 0xd3f
 8005aec:	4890      	ldr	r0, [pc, #576]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005aee:	f7fa feb0 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d018      	beq.n	8005b46 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <UART_AdvFeatureConfig+0x80>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b24:	d004      	beq.n	8005b30 <UART_AdvFeatureConfig+0x80>
 8005b26:	f640 5146 	movw	r1, #3398	; 0xd46
 8005b2a:	4881      	ldr	r0, [pc, #516]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005b2c:	f7fa fe91 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d018      	beq.n	8005b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <UART_AdvFeatureConfig+0xbe>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b62:	d004      	beq.n	8005b6e <UART_AdvFeatureConfig+0xbe>
 8005b64:	f640 514d 	movw	r1, #3405	; 0xd4d
 8005b68:	4871      	ldr	r0, [pc, #452]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005b6a:	f7fa fe72 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d018      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <UART_AdvFeatureConfig+0xfc>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba0:	d004      	beq.n	8005bac <UART_AdvFeatureConfig+0xfc>
 8005ba2:	f640 5154 	movw	r1, #3412	; 0xd54
 8005ba6:	4862      	ldr	r0, [pc, #392]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005ba8:	f7fa fe53 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <UART_AdvFeatureConfig+0x13a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bde:	d004      	beq.n	8005bea <UART_AdvFeatureConfig+0x13a>
 8005be0:	f640 515b 	movw	r1, #3419	; 0xd5b
 8005be4:	4852      	ldr	r0, [pc, #328]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005be6:	f7fa fe34 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d018      	beq.n	8005c3e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <UART_AdvFeatureConfig+0x178>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1c:	d004      	beq.n	8005c28 <UART_AdvFeatureConfig+0x178>
 8005c1e:	f640 5162 	movw	r1, #3426	; 0xd62
 8005c22:	4843      	ldr	r0, [pc, #268]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005c24:	f7fa fe15 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d04f      	beq.n	8005cea <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a39      	ldr	r2, [pc, #228]	; (8005d34 <UART_AdvFeatureConfig+0x284>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <UART_AdvFeatureConfig+0x1b8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a37      	ldr	r2, [pc, #220]	; (8005d38 <UART_AdvFeatureConfig+0x288>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <UART_AdvFeatureConfig+0x1b8>
 8005c5e:	f640 5169 	movw	r1, #3433	; 0xd69
 8005c62:	4833      	ldr	r0, [pc, #204]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005c64:	f7fa fdf5 	bl	8000852 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <UART_AdvFeatureConfig+0x1d4>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c78:	d004      	beq.n	8005c84 <UART_AdvFeatureConfig+0x1d4>
 8005c7a:	f640 516a 	movw	r1, #3434	; 0xd6a
 8005c7e:	482c      	ldr	r0, [pc, #176]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005c80:	f7fa fde7 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca2:	d122      	bne.n	8005cea <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d013      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x224>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb4:	d00e      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x224>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cbe:	d009      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x224>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cc8:	d004      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x224>
 8005cca:	f640 516f 	movw	r1, #3439	; 0xd6f
 8005cce:	4818      	ldr	r0, [pc, #96]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005cd0:	f7fa fdbf 	bl	8000852 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d018      	beq.n	8005d28 <UART_AdvFeatureConfig+0x278>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <UART_AdvFeatureConfig+0x262>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d06:	d004      	beq.n	8005d12 <UART_AdvFeatureConfig+0x262>
 8005d08:	f640 5177 	movw	r1, #3447	; 0xd77
 8005d0c:	4808      	ldr	r0, [pc, #32]	; (8005d30 <UART_AdvFeatureConfig+0x280>)
 8005d0e:	f7fa fda0 	bl	8000852 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	0800610c 	.word	0x0800610c
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40004400 	.word	0x40004400

08005d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d4c:	f7fa ffae 	bl	8000cac <HAL_GetTick>
 8005d50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d10e      	bne.n	8005d7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f82d 	bl	8005dce <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e023      	b.n	8005dc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d10e      	bne.n	8005daa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f817 	bl	8005dce <UART_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e00d      	b.n	8005dc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	603b      	str	r3, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dde:	e05e      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d05a      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de8:	f7fa ff60 	bl	8000cac <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x30>
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11b      	bne.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e043      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02c      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e52:	d124      	bne.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e5c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2220      	movs	r2, #32
 8005e82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e00f      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d091      	beq.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4d0d      	ldr	r5, [pc, #52]	; (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	; (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4d0b      	ldr	r5, [pc, #44]	; (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	; (8005f0c <__libc_init_array+0x44>)
 8005edc:	f000 f820 	bl	8005f20 <_init>
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	42a6      	cmp	r6, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef0:	4798      	blx	r3
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efa:	4798      	blx	r3
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	08006198 	.word	0x08006198
 8005f04:	08006198 	.word	0x08006198
 8005f08:	08006198 	.word	0x08006198
 8005f0c:	0800619c 	.word	0x0800619c

08005f10 <memset>:
 8005f10:	4402      	add	r2, r0
 8005f12:	4603      	mov	r3, r0
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d100      	bne.n	8005f1a <memset+0xa>
 8005f18:	4770      	bx	lr
 8005f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1e:	e7f9      	b.n	8005f14 <memset+0x4>

08005f20 <_init>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr

08005f2c <_fini>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr
