
Transition_Test-ADP-FLUAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003658  08003658  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  08003670  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003670  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c81d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f07  00000000  00000000  0002c85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002e768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fedf  00000000  00000000  0002fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b567  00000000  00000000  0004fadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0456  00000000  00000000  0005b046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011b49c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  0011b4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003518 	.word	0x08003518

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08003518 	.word	0x08003518

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96e 	b.w	80004d0 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468c      	mov	ip, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	f040 8083 	bne.w	8000322 <__udivmoddi4+0x116>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d947      	bls.n	80002b2 <__udivmoddi4+0xa6>
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	b142      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000228:	f1c2 0020 	rsb	r0, r2, #32
 800022c:	fa24 f000 	lsr.w	r0, r4, r0
 8000230:	4091      	lsls	r1, r2
 8000232:	4097      	lsls	r7, r2
 8000234:	ea40 0c01 	orr.w	ip, r0, r1
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbbc f6f8 	udiv	r6, ip, r8
 8000244:	fa1f fe87 	uxth.w	lr, r7
 8000248:	fb08 c116 	mls	r1, r8, r6, ip
 800024c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000250:	fb06 f10e 	mul.w	r1, r6, lr
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 8119 	bcs.w	8000494 <__udivmoddi4+0x288>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8116 	bls.w	8000494 <__udivmoddi4+0x288>
 8000268:	3e02      	subs	r6, #2
 800026a:	443b      	add	r3, r7
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000280:	45a6      	cmp	lr, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	193c      	adds	r4, r7, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8105 	bcs.w	8000498 <__udivmoddi4+0x28c>
 800028e:	45a6      	cmp	lr, r4
 8000290:	f240 8102 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029c:	eba4 040e 	sub.w	r4, r4, lr
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b902      	cbnz	r2, 80002b6 <__udivmoddi4+0xaa>
 80002b4:	deff      	udf	#255	; 0xff
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d150      	bne.n	8000360 <__udivmoddi4+0x154>
 80002be:	1bcb      	subs	r3, r1, r7
 80002c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c4:	fa1f f887 	uxth.w	r8, r7
 80002c8:	2601      	movs	r6, #1
 80002ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ce:	0c21      	lsrs	r1, r4, #16
 80002d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d8:	fb08 f30c 	mul.w	r3, r8, ip
 80002dc:	428b      	cmp	r3, r1
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0xe4>
 80002e0:	1879      	adds	r1, r7, r1
 80002e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0xe2>
 80002e8:	428b      	cmp	r3, r1
 80002ea:	f200 80e9 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 80002ee:	4684      	mov	ip, r0
 80002f0:	1ac9      	subs	r1, r1, r3
 80002f2:	b2a3      	uxth	r3, r4
 80002f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000300:	fb08 f800 	mul.w	r8, r8, r0
 8000304:	45a0      	cmp	r8, r4
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x10c>
 8000308:	193c      	adds	r4, r7, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x10a>
 8000310:	45a0      	cmp	r8, r4
 8000312:	f200 80d9 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 8000316:	4618      	mov	r0, r3
 8000318:	eba4 0408 	sub.w	r4, r4, r8
 800031c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000320:	e7bf      	b.n	80002a2 <__udivmoddi4+0x96>
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x12e>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80b1 	beq.w	800048e <__udivmoddi4+0x282>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x1cc>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0x140>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80b8 	bhi.w	80004bc <__udivmoddi4+0x2b0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0103 	sbc.w	r1, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	468c      	mov	ip, r1
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0a8      	beq.n	80002ac <__udivmoddi4+0xa0>
 800035a:	e9c5 4c00 	strd	r4, ip, [r5]
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0xa0>
 8000360:	f1c2 0320 	rsb	r3, r2, #32
 8000364:	fa20 f603 	lsr.w	r6, r0, r3
 8000368:	4097      	lsls	r7, r2
 800036a:	fa01 f002 	lsl.w	r0, r1, r2
 800036e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000372:	40d9      	lsrs	r1, r3
 8000374:	4330      	orrs	r0, r6
 8000376:	0c03      	lsrs	r3, r0, #16
 8000378:	fbb1 f6fe 	udiv	r6, r1, lr
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	fb0e 1116 	mls	r1, lr, r6, r1
 8000384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000388:	fb06 f108 	mul.w	r1, r6, r8
 800038c:	4299      	cmp	r1, r3
 800038e:	fa04 f402 	lsl.w	r4, r4, r2
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x19c>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f106 3cff 	add.w	ip, r6, #4294967295
 800039a:	f080 808d 	bcs.w	80004b8 <__udivmoddi4+0x2ac>
 800039e:	4299      	cmp	r1, r3
 80003a0:	f240 808a 	bls.w	80004b8 <__udivmoddi4+0x2ac>
 80003a4:	3e02      	subs	r6, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1a5b      	subs	r3, r3, r1
 80003aa:	b281      	uxth	r1, r0
 80003ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b8:	fb00 f308 	mul.w	r3, r0, r8
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1c4>
 80003c0:	1879      	adds	r1, r7, r1
 80003c2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c6:	d273      	bcs.n	80004b0 <__udivmoddi4+0x2a4>
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d971      	bls.n	80004b0 <__udivmoddi4+0x2a4>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4439      	add	r1, r7
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d6:	e778      	b.n	80002ca <__udivmoddi4+0xbe>
 80003d8:	f1c6 0c20 	rsb	ip, r6, #32
 80003dc:	fa03 f406 	lsl.w	r4, r3, r6
 80003e0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e4:	431c      	orrs	r4, r3
 80003e6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f6:	431f      	orrs	r7, r3
 80003f8:	0c3b      	lsrs	r3, r7, #16
 80003fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fe:	fa1f f884 	uxth.w	r8, r4
 8000402:	fb0e 1119 	mls	r1, lr, r9, r1
 8000406:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040a:	fb09 fa08 	mul.w	sl, r9, r8
 800040e:	458a      	cmp	sl, r1
 8000410:	fa02 f206 	lsl.w	r2, r2, r6
 8000414:	fa00 f306 	lsl.w	r3, r0, r6
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x220>
 800041a:	1861      	adds	r1, r4, r1
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	d248      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000422:	458a      	cmp	sl, r1
 8000424:	d946      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 8000426:	f1a9 0902 	sub.w	r9, r9, #2
 800042a:	4421      	add	r1, r4
 800042c:	eba1 010a 	sub.w	r1, r1, sl
 8000430:	b2bf      	uxth	r7, r7
 8000432:	fbb1 f0fe 	udiv	r0, r1, lr
 8000436:	fb0e 1110 	mls	r1, lr, r0, r1
 800043a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043e:	fb00 f808 	mul.w	r8, r0, r8
 8000442:	45b8      	cmp	r8, r7
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x24a>
 8000446:	19e7      	adds	r7, r4, r7
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d22e      	bcs.n	80004ac <__udivmoddi4+0x2a0>
 800044e:	45b8      	cmp	r8, r7
 8000450:	d92c      	bls.n	80004ac <__udivmoddi4+0x2a0>
 8000452:	3802      	subs	r0, #2
 8000454:	4427      	add	r7, r4
 8000456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045a:	eba7 0708 	sub.w	r7, r7, r8
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	454f      	cmp	r7, r9
 8000464:	46c6      	mov	lr, r8
 8000466:	4649      	mov	r1, r9
 8000468:	d31a      	bcc.n	80004a0 <__udivmoddi4+0x294>
 800046a:	d017      	beq.n	800049c <__udivmoddi4+0x290>
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x27a>
 800046e:	ebb3 020e 	subs.w	r2, r3, lr
 8000472:	eb67 0701 	sbc.w	r7, r7, r1
 8000476:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047a:	40f2      	lsrs	r2, r6
 800047c:	ea4c 0202 	orr.w	r2, ip, r2
 8000480:	40f7      	lsrs	r7, r6
 8000482:	e9c5 2700 	strd	r2, r7, [r5]
 8000486:	2600      	movs	r6, #0
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e70b      	b.n	80002ac <__udivmoddi4+0xa0>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e9      	b.n	800026c <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fd      	b.n	8000298 <__udivmoddi4+0x8c>
 800049c:	4543      	cmp	r3, r8
 800049e:	d2e5      	bcs.n	800046c <__udivmoddi4+0x260>
 80004a0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a4:	eb69 0104 	sbc.w	r1, r9, r4
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7df      	b.n	800046c <__udivmoddi4+0x260>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e7d2      	b.n	8000456 <__udivmoddi4+0x24a>
 80004b0:	4660      	mov	r0, ip
 80004b2:	e78d      	b.n	80003d0 <__udivmoddi4+0x1c4>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7b9      	b.n	800042c <__udivmoddi4+0x220>
 80004b8:	4666      	mov	r6, ip
 80004ba:	e775      	b.n	80003a8 <__udivmoddi4+0x19c>
 80004bc:	4630      	mov	r0, r6
 80004be:	e74a      	b.n	8000356 <__udivmoddi4+0x14a>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	4439      	add	r1, r7
 80004c6:	e713      	b.n	80002f0 <__udivmoddi4+0xe4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	443c      	add	r4, r7
 80004cc:	e724      	b.n	8000318 <__udivmoddi4+0x10c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <send_Serial>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_Serial(const uint8_t * text){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)text, strlen((const char *)text), 1000);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff fe75 	bl	80001cc <strlen>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <send_Serial+0x28>)
 80004ee:	f002 f8d9 	bl	80026a4 <HAL_UART_Transmit>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000038 	.word	0x20000038

08000500 <setup>:

/*****************************************************************************
 * Actions application
 *
 */
void setup(void){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	//MOC DO SETUP.
	executed_routines |= SETUP_EXECUTED;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <setup+0x1c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	4a03      	ldr	r2, [pc, #12]	; (800051c <setup+0x1c>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000030 	.word	0x20000030

08000520 <newFileExecuted>:
void newFileExecuted(void){
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	//MOC para gerar um novo arquivo.
	executed_routines |= NEW_FILE_EXECUTED;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <newFileExecuted+0x1c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <newFileExecuted+0x1c>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000030 	.word	0x20000030

08000540 <blinkRedLed>:

void blinkRedLed(void){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	//MOC para simular o Hard_Fault.
	executed_routines |= BLINK_RED_LED;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <blinkRedLed+0x1c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <blinkRedLed+0x1c>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000030 	.word	0x20000030

08000560 <seekWifiNetwork>:

void seekWifiNetwork(void){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	//MOC para simular a procura de rede wi-fi.
	executed_routines |= SEEK_WIFI_NETWORK;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <seekWifiNetwork+0x1c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <seekWifiNetwork+0x1c>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000030 	.word	0x20000030

08000580 <playLastSound>:

void playLastSound(void){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	//Moc para simular o play do áudio no sd.
	executed_routines |= PLAY_LAST_SOUND;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <playLastSound+0x1c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	4a03      	ldr	r2, [pc, #12]	; (800059c <playLastSound+0x1c>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000030 	.word	0x20000030

080005a0 <generateTurnOnEvent>:

/*****************************************************************************
 * Events application
 *
 */
void generateTurnOnEvent(void){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	TurnOnEvent = true;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <generateTurnOnEvent+0x14>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	2000002c 	.word	0x2000002c

080005b8 <generateVoiceCommandEvent>:

	TurnOnEvent = false;
	return retVal;
}

void generateVoiceCommandEvent(voiceCommandEnum_t value){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	voiceCommand = value;
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <generateVoiceCommandEvent+0x24>)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	7013      	strb	r3, [r2, #0]
	VoiceCommandEvent = true;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <generateVoiceCommandEvent+0x28>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	2000002d 	.word	0x2000002d

080005e4 <getVoiceCommandEvent>:

bool getVoiceCommandEvent(voiceCommandEnum_t *trigger){
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	bool retVal = VoiceCommandEvent;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <getVoiceCommandEvent+0x30>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	73fb      	strb	r3, [r7, #15]
	*trigger = voiceCommand;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <getVoiceCommandEvent+0x34>)
 80005f4:	781a      	ldrb	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	701a      	strb	r2, [r3, #0]
	VoiceCommandEvent = false;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <getVoiceCommandEvent+0x30>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	voiceCommand = VC_INVALID;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <getVoiceCommandEvent+0x34>)
 8000602:	2205      	movs	r2, #5
 8000604:	701a      	strb	r2, [r3, #0]
	return retVal;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	2000002d 	.word	0x2000002d
 8000618:	20000000 	.word	0x20000000

0800061c <generateTimerOutEvent>:

void generateTimerOutEvent(void){
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	TimerOutEvent = true;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <generateTimerOutEvent+0x14>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	2000002e 	.word	0x2000002e

08000634 <getTimerOutEvent>:

bool getTimerOutEvent(void){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
	bool retVal = TimerOutEvent;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <getTimerOutEvent+0x20>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	71fb      	strb	r3, [r7, #7]

	TimerOutEvent = false;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <getTimerOutEvent+0x20>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	return retVal;
 8000646:	79fb      	ldrb	r3, [r7, #7]
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	2000002e 	.word	0x2000002e

08000658 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f000 fad5 	bl	8000c0a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f8f2 	bl	8000848 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000664:	f000 f982 	bl	800096c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000668:	f000 f950 	bl	800090c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	/*
	 * Clear terminal prompt.
	 */
	send_Serial((const uint8_t *)"\033c");
 800066c:	486b      	ldr	r0, [pc, #428]	; (800081c <main+0x1c4>)
 800066e:	f7ff ff31 	bl	80004d4 <send_Serial>
	send_Serial((const uint8_t *)"\033c");
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <main+0x1c4>)
 8000674:	f7ff ff2e 	bl	80004d4 <send_Serial>

	/*
	 * 1o teste de transição quando sai do Shutdown e configura o ambiente para READY.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test1: ");
 8000678:	4869      	ldr	r0, [pc, #420]	; (8000820 <main+0x1c8>)
 800067a:	f7ff ff2b 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 800067e:	4b69      	ldr	r3, [pc, #420]	; (8000824 <main+0x1cc>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
	adpflual_setState(SHUTDOWN);
 8000684:	2000      	movs	r0, #0
 8000686:	f002 fe9f 	bl	80033c8 <adpflual_setState>
	generateTurnOnEvent();
 800068a:	f7ff ff89 	bl	80005a0 <generateTurnOnEvent>
	adpflual_State_Machine();
 800068e:	f002 feb7 	bl	8003400 <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (SETUP_EXECUTED)){
 8000692:	f002 fea9 	bl	80033e8 <adpflual_getState>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d107      	bne.n	80006ac <main+0x54>
 800069c:	4b61      	ldr	r3, [pc, #388]	; (8000824 <main+0x1cc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d103      	bne.n	80006ac <main+0x54>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 80006a4:	4860      	ldr	r0, [pc, #384]	; (8000828 <main+0x1d0>)
 80006a6:	f7ff ff15 	bl	80004d4 <send_Serial>
 80006aa:	e002      	b.n	80006b2 <main+0x5a>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 80006ac:	485f      	ldr	r0, [pc, #380]	; (800082c <main+0x1d4>)
 80006ae:	f7ff ff11 	bl	80004d4 <send_Serial>
	/*
	 * 2o teste de transição quando sai do Ready e entra em Record_id para começar
	 * uma gravação de arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test2: ");
 80006b2:	485f      	ldr	r0, [pc, #380]	; (8000830 <main+0x1d8>)
 80006b4:	f7ff ff0e 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80006b8:	4b5a      	ldr	r3, [pc, #360]	; (8000824 <main+0x1cc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 80006be:	2001      	movs	r0, #1
 80006c0:	f002 fe82 	bl	80033c8 <adpflual_setState>
	generateVoiceCommandEvent(VC_RECORD_ID);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff77 	bl	80005b8 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 80006ca:	f002 fe99 	bl	8003400 <adpflual_State_Machine>

	if(adpflual_getState()== SM_RECORD_ID && executed_routines == (NEW_FILE_EXECUTED)){
 80006ce:	f002 fe8b 	bl	80033e8 <adpflual_getState>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d107      	bne.n	80006e8 <main+0x90>
 80006d8:	4b52      	ldr	r3, [pc, #328]	; (8000824 <main+0x1cc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d103      	bne.n	80006e8 <main+0x90>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 80006e0:	4851      	ldr	r0, [pc, #324]	; (8000828 <main+0x1d0>)
 80006e2:	f7ff fef7 	bl	80004d4 <send_Serial>
 80006e6:	e002      	b.n	80006ee <main+0x96>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 80006e8:	4850      	ldr	r0, [pc, #320]	; (800082c <main+0x1d4>)
 80006ea:	f7ff fef3 	bl	80004d4 <send_Serial>
	/*
	 * 3o teste de transição quando sai do Ready e entra em Record_Fluency para começar
	 * uma gravação de arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test3: ");
 80006ee:	4851      	ldr	r0, [pc, #324]	; (8000834 <main+0x1dc>)
 80006f0:	f7ff fef0 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80006f4:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <main+0x1cc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f002 fe64 	bl	80033c8 <adpflual_setState>
	generateVoiceCommandEvent(VC_RECORD_FLUENCY);
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ff59 	bl	80005b8 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 8000706:	f002 fe7b 	bl	8003400 <adpflual_State_Machine>

	if(adpflual_getState()== SM_RECORD_FLUENCY && executed_routines == (NEW_FILE_EXECUTED)){
 800070a:	f002 fe6d 	bl	80033e8 <adpflual_getState>
 800070e:	4603      	mov	r3, r0
 8000710:	2b03      	cmp	r3, #3
 8000712:	d107      	bne.n	8000724 <main+0xcc>
 8000714:	4b43      	ldr	r3, [pc, #268]	; (8000824 <main+0x1cc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d103      	bne.n	8000724 <main+0xcc>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 800071c:	4842      	ldr	r0, [pc, #264]	; (8000828 <main+0x1d0>)
 800071e:	f7ff fed9 	bl	80004d4 <send_Serial>
 8000722:	e002      	b.n	800072a <main+0xd2>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000724:	4841      	ldr	r0, [pc, #260]	; (800082c <main+0x1d4>)
 8000726:	f7ff fed5 	bl	80004d4 <send_Serial>
	/*
	 * 4o teste de transição quando sai do Ready e entra em Hard_fault para começar
	 * uma gravação de arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test4: ");
 800072a:	4843      	ldr	r0, [pc, #268]	; (8000838 <main+0x1e0>)
 800072c:	f7ff fed2 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000730:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <main+0x1cc>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 8000736:	2001      	movs	r0, #1
 8000738:	f002 fe46 	bl	80033c8 <adpflual_setState>
	generateTimerOutEvent();
 800073c:	f7ff ff6e 	bl	800061c <generateTimerOutEvent>
	adpflual_State_Machine();
 8000740:	f002 fe5e 	bl	8003400 <adpflual_State_Machine>

	if(adpflual_getState()== SM_HARD_FAULT && executed_routines == (BLINK_RED_LED)){
 8000744:	f002 fe50 	bl	80033e8 <adpflual_getState>
 8000748:	4603      	mov	r3, r0
 800074a:	2b04      	cmp	r3, #4
 800074c:	d107      	bne.n	800075e <main+0x106>
 800074e:	4b35      	ldr	r3, [pc, #212]	; (8000824 <main+0x1cc>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d103      	bne.n	800075e <main+0x106>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000756:	4834      	ldr	r0, [pc, #208]	; (8000828 <main+0x1d0>)
 8000758:	f7ff febc 	bl	80004d4 <send_Serial>
 800075c:	e002      	b.n	8000764 <main+0x10c>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 800075e:	4833      	ldr	r0, [pc, #204]	; (800082c <main+0x1d4>)
 8000760:	f7ff feb8 	bl	80004d4 <send_Serial>
	/*
	 * 5o teste de transição quando sai do Ready e entra em Connect para começar uma gravação
	 * do arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test5: ");
 8000764:	4835      	ldr	r0, [pc, #212]	; (800083c <main+0x1e4>)
 8000766:	f7ff feb5 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <main+0x1cc>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 8000770:	2001      	movs	r0, #1
 8000772:	f002 fe29 	bl	80033c8 <adpflual_setState>
	generateVoiceCommandEvent(VC_SEND);
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff ff1e 	bl	80005b8 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 800077c:	f002 fe40 	bl	8003400 <adpflual_State_Machine>

	if(adpflual_getState()== SM_CONNECT && executed_routines == (SEEK_WIFI_NETWORK)){
 8000780:	f002 fe32 	bl	80033e8 <adpflual_getState>
 8000784:	4603      	mov	r3, r0
 8000786:	2b05      	cmp	r3, #5
 8000788:	d107      	bne.n	800079a <main+0x142>
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <main+0x1cc>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b08      	cmp	r3, #8
 8000790:	d103      	bne.n	800079a <main+0x142>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000792:	4825      	ldr	r0, [pc, #148]	; (8000828 <main+0x1d0>)
 8000794:	f7ff fe9e 	bl	80004d4 <send_Serial>
 8000798:	e002      	b.n	80007a0 <main+0x148>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 800079a:	4824      	ldr	r0, [pc, #144]	; (800082c <main+0x1d4>)
 800079c:	f7ff fe9a 	bl	80004d4 <send_Serial>
	/*
	 * 6o teste de transição quando sai do Ready e entra em PLay para começar uma reprodução
	 * do arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test6: ");
 80007a0:	4827      	ldr	r0, [pc, #156]	; (8000840 <main+0x1e8>)
 80007a2:	f7ff fe97 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <main+0x1cc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f002 fe0b 	bl	80033c8 <adpflual_setState>
	generateVoiceCommandEvent(VC_PLAY_RECORDED);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f7ff ff00 	bl	80005b8 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 80007b8:	f002 fe22 	bl	8003400 <adpflual_State_Machine>

	if(adpflual_getState()== SM_PLAY && executed_routines == (PLAY_LAST_SOUND)){
 80007bc:	f002 fe14 	bl	80033e8 <adpflual_getState>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b07      	cmp	r3, #7
 80007c4:	d107      	bne.n	80007d6 <main+0x17e>
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <main+0x1cc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d103      	bne.n	80007d6 <main+0x17e>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 80007ce:	4816      	ldr	r0, [pc, #88]	; (8000828 <main+0x1d0>)
 80007d0:	f7ff fe80 	bl	80004d4 <send_Serial>
 80007d4:	e002      	b.n	80007dc <main+0x184>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 80007d6:	4815      	ldr	r0, [pc, #84]	; (800082c <main+0x1d4>)
 80007d8:	f7ff fe7c 	bl	80004d4 <send_Serial>
	/*
	 * 7o teste de transição quando sai do Ready e entra em PLay para começar uma reprodução
	 * do arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test7: ");
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <main+0x1ec>)
 80007de:	f7ff fe79 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <main+0x1cc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_RECORD_ID);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f002 fded 	bl	80033c8 <adpflual_setState>
	generateVoiceCommandEvent(VC_STOP_RECORD);
 80007ee:	2004      	movs	r0, #4
 80007f0:	f7ff fee2 	bl	80005b8 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 80007f4:	f002 fe04 	bl	8003400 <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (CLOSE_FILE_RECORDED)){
 80007f8:	f002 fdf6 	bl	80033e8 <adpflual_getState>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d107      	bne.n	8000812 <main+0x1ba>
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <main+0x1cc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b20      	cmp	r3, #32
 8000808:	d103      	bne.n	8000812 <main+0x1ba>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <main+0x1d0>)
 800080c:	f7ff fe62 	bl	80004d4 <send_Serial>
 8000810:	e002      	b.n	8000818 <main+0x1c0>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <main+0x1d4>)
 8000814:	f7ff fe5e 	bl	80004d4 <send_Serial>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000818:	e7fe      	b.n	8000818 <main+0x1c0>
 800081a:	bf00      	nop
 800081c:	08003530 	.word	0x08003530
 8000820:	08003534 	.word	0x08003534
 8000824:	20000030 	.word	0x20000030
 8000828:	08003548 	.word	0x08003548
 800082c:	0800356c 	.word	0x0800356c
 8000830:	08003590 	.word	0x08003590
 8000834:	080035a4 	.word	0x080035a4
 8000838:	080035b8 	.word	0x080035b8
 800083c:	080035cc 	.word	0x080035cc
 8000840:	080035e0 	.word	0x080035e0
 8000844:	080035f4 	.word	0x080035f4

08000848 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b096      	sub	sp, #88	; 0x58
 800084c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2244      	movs	r2, #68	; 0x44
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fe56 	bl	8003508 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800086a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800086e:	f000 fd59 	bl	8001324 <HAL_PWREx_ControlVoltageScaling>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000878:	f000 f89c 	bl	80009b4 <Error_Handler>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800087c:	f000 fd34 	bl	80012e8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <SystemClock_Config+0xc0>)
 8000882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000886:	4a20      	ldr	r2, [pc, #128]	; (8000908 <SystemClock_Config+0xc0>)
 8000888:	f023 0318 	bic.w	r3, r3, #24
 800088c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000890:	2314      	movs	r3, #20
 8000892:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2302      	movs	r3, #2
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008a8:	2301      	movs	r3, #1
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 80008b0:	2310      	movs	r3, #16
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b4:	2307      	movs	r3, #7
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fd83 	bl	80013d0 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80008d0:	f000 f870 	bl	80009b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2303      	movs	r3, #3
 80008da:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 f98f 	bl	8001c10 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xb4>
	{
		Error_Handler();
 80008f8:	f000 f85c 	bl	80009b4 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80008fc:	f001 fd82 	bl	8002404 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000900:	bf00      	nop
 8000902:	3758      	adds	r7, #88	; 0x58
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000

0800090c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_USART2_UART_Init+0x5c>)
 8000914:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART2_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000950:	f001 fe5a 	bl	8002608 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800095a:	f000 f82b 	bl	80009b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000038 	.word	0x20000038
 8000968:	40004400 	.word	0x40004400

0800096c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_GPIO_Init+0x44>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <MX_GPIO_Init+0x44>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_GPIO_Init+0x44>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_GPIO_Init+0x44>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_GPIO_Init+0x44>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09e      	sub	sp, #120	; 0x78
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	2254      	movs	r2, #84	; 0x54
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fd6d 	bl	8003508 <memset>
  if(huart->Instance==USART2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2c      	ldr	r2, [pc, #176]	; (8000ae4 <HAL_UART_MspInit+0xdc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d150      	bne.n	8000ada <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fae9 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a50:	f7ff ffb0 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_UART_MspInit+0xe0>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a58:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <HAL_UART_MspInit+0xe0>)
 8000a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_UART_MspInit+0xe0>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <HAL_UART_MspInit+0xe0>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <HAL_UART_MspInit+0xe0>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_UART_MspInit+0xe0>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a84:	2304      	movs	r3, #4
 8000a86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a94:	2307      	movs	r3, #7
 8000a96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fab7 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aaa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 faa5 	bl	8001014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2026      	movs	r0, #38	; 0x26
 8000ad0:	f000 f9eb 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad4:	2026      	movs	r0, #38	; 0x26
 8000ad6:	f000 fa04 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3778      	adds	r7, #120	; 0x78
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40021000 	.word	0x40021000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f8bc 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <USART2_IRQHandler+0x10>)
 8000b46:	f001 fe41 	bl	80027cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000038 	.word	0x20000038

08000b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <SystemInit+0x5c>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <SystemInit+0x5c>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <SystemInit+0x60>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <SystemInit+0x60>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <SystemInit+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <SystemInit+0x60>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <SystemInit+0x60>)
 8000b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <SystemInit+0x60>)
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <SystemInit+0x60>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <SystemInit+0x60>)
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SystemInit+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bbc:	f7ff ffca 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bc2:	e003      	b.n	8000bcc <LoopCopyDataInit>

08000bc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bca:	3104      	adds	r1, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bcc:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bd4:	d3f6      	bcc.n	8000bc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bd8:	e002      	b.n	8000be0 <LoopFillZerobss>

08000bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bdc:	f842 3b04 	str.w	r3, [r2], #4

08000be0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <LoopForever+0x16>)
	cmp	r2, r3
 8000be2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000be4:	d3f9      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f002 fc6b 	bl	80034c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bea:	f7ff fd35 	bl	8000658 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf0:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000bf4:	08003660 	.word	0x08003660
	ldr	r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bfc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000c00:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000c04:	200000c0 	.word	0x200000c0

08000c08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_IRQHandler>

08000c0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f93d 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f80e 	bl	8000c3c <HAL_InitTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	e001      	b.n	8000c30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c2c:	f7ff fec8 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_InitTick+0x6c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d023      	beq.n	8000c98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_InitTick+0x70>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_InitTick+0x6c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f949 	bl	8000efe <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10f      	bne.n	8000c92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d809      	bhi.n	8000c8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f913 	bl	8000eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_InitTick+0x74>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e007      	b.n	8000c9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e004      	b.n	8000c9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e001      	b.n	8000c9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	200000bc 	.word	0x200000bc

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200000bc 	.word	0x200000bc

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff3e 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff8e 	bl	8000de8 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff31 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d008      	beq.n	8000f40 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2204      	movs	r2, #4
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e022      	b.n	8000f86 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020e 	bic.w	r2, r2, #14
 8000f4e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f64:	f003 021c 	and.w	r2, r3, #28
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d005      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2204      	movs	r2, #4
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e029      	b.n	800100a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 020e 	bic.w	r2, r2, #14
 8000fc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0201 	bic.w	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f003 021c 	and.w	r2, r3, #28
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	4798      	blx	r3
    }
  }
  return status;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e148      	b.n	80012b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 813a 	beq.w	80012b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d00b      	beq.n	800105c <HAL_GPIO_Init+0x48>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	2b11      	cmp	r3, #17
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b12      	cmp	r3, #18
 800105a:	d130      	bne.n	80010be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	f003 0201 	and.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0xea>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8094 	beq.w	80012b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6613      	str	r3, [r2, #96]	; 0x60
 8001194:	4b4f      	ldr	r3, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x2c4>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1d4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a43      	ldr	r2, [pc, #268]	; (80012dc <HAL_GPIO_Init+0x2c8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1d0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a42      	ldr	r2, [pc, #264]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1cc>
 80011dc:	2302      	movs	r3, #2
 80011de:	e004      	b.n	80011ea <HAL_GPIO_Init+0x1d6>
 80011e0:	2307      	movs	r3, #7
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x1d6>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_GPIO_Init+0x1d6>
 80011e8:	2300      	movs	r3, #0
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fa:	4937      	ldr	r1, [pc, #220]	; (80012d8 <HAL_GPIO_Init+0x2c4>)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f47f aeaf 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	371c      	adds	r7, #28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000
 80012dc:	48000400 	.word	0x48000400
 80012e0:	48000800 	.word	0x48000800
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000

08001308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_PWREx_GetVoltageRange+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000

08001324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001332:	d130      	bne.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001340:	d038      	beq.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2232      	movs	r2, #50	; 0x32
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001368:	e002      	b.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b01      	subs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137c:	d102      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f2      	bne.n	800136a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001390:	d110      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e00f      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a2:	d007      	beq.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000
 80013c8:	20000004 	.word	0x20000004
 80013cc:	431bde83 	.word	0x431bde83

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f000 bc11 	b.w	8001c06 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e4:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ee:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80e4 	beq.w	80015ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <HAL_RCC_OscConfig+0x4c>
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	f040 808b 	bne.w	800152a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b01      	cmp	r3, #1
 8001418:	f040 8087 	bne.w	800152a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_OscConfig+0x64>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e3e8      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <HAL_RCC_OscConfig+0x7e>
 8001444:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800144c:	e005      	b.n	800145a <HAL_RCC_OscConfig+0x8a>
 800144e:	4b86      	ldr	r3, [pc, #536]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145a:	4293      	cmp	r3, r2
 800145c:	d223      	bcs.n	80014a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fd7a 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e3c9      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001472:	4b7d      	ldr	r3, [pc, #500]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7c      	ldr	r2, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4977      	ldr	r1, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001490:	4b75      	ldr	r3, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	4972      	ldr	r1, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	e025      	b.n	80014f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	496a      	ldr	r1, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	4965      	ldr	r1, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fd3a 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e389      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014f2:	f000 fc6f 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	495a      	ldr	r1, [pc, #360]	; (800166c <HAL_RCC_OscConfig+0x29c>)
 8001504:	5ccb      	ldrb	r3, [r1, r3]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x2a0>)
 8001510:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001512:	4b58      	ldr	r3, [pc, #352]	; (8001674 <HAL_RCC_OscConfig+0x2a4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb90 	bl	8000c3c <HAL_InitTick>
 800151c:	4603      	mov	r3, r0
 800151e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d052      	beq.n	80015cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	e36d      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d032      	beq.n	8001598 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800153e:	f7ff fbcd 	bl	8000cdc <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001546:	f7ff fbc9 	bl	8000cdc <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e356      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	493a      	ldr	r1, [pc, #232]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4935      	ldr	r1, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
 8001596:	e01a      	b.n	80015ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a32      	ldr	r2, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb9a 	bl	8000cdc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ac:	f7ff fb96 	bl	8000cdc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e323      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1dc>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d073      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d005      	beq.n	80015ec <HAL_RCC_OscConfig+0x21c>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d10e      	bne.n	8001604 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d063      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d15f      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e300      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x24c>
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0x288>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x270>
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x288>
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_RCC_OscConfig+0x298>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fb3c 	bl	8000cdc <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	e010      	b.n	800168a <HAL_RCC_OscConfig+0x2ba>
 8001668:	40021000 	.word	0x40021000
 800166c:	08003608 	.word	0x08003608
 8001670:	20000004 	.word	0x20000004
 8001674:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fb30 	bl	8000cdc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e2bd      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168a:	4baf      	ldr	r3, [pc, #700]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x2a8>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb20 	bl	8000cdc <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fb1c 	bl	8000cdc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e2a9      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b2:	4ba5      	ldr	r3, [pc, #660]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2d0>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d060      	beq.n	8001790 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x310>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d119      	bne.n	800170e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d116      	bne.n	800170e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	4b99      	ldr	r3, [pc, #612]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_OscConfig+0x328>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e286      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b93      	ldr	r3, [pc, #588]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	4990      	ldr	r1, [pc, #576]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170c:	e040      	b.n	8001790 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d023      	beq.n	800175e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001716:	4b8c      	ldr	r3, [pc, #560]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a8b      	ldr	r2, [pc, #556]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fadb 	bl	8000cdc <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fad7 	bl	8000cdc <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e264      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173c:	4b82      	ldr	r3, [pc, #520]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	497c      	ldr	r1, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e018      	b.n	8001790 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a79      	ldr	r2, [pc, #484]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fab7 	bl	8000cdc <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fab3 	bl	8000cdc <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e240      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001784:	4b70      	ldr	r3, [pc, #448]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d03c      	beq.n	8001816 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01c      	beq.n	80017de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	4a67      	ldr	r2, [pc, #412]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa92 	bl	8000cdc <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa8e 	bl	8000cdc <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e21b      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ce:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ef      	beq.n	80017bc <HAL_RCC_OscConfig+0x3ec>
 80017dc:	e01b      	b.n	8001816 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa75 	bl	8000cdc <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fa71 	bl	8000cdc <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1fe      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ef      	bne.n	80017f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80a6 	beq.w	8001970 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10d      	bne.n	8001850 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a43      	ldr	r2, [pc, #268]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	; 0x58
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184c:	2301      	movs	r3, #1
 800184e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001850:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d118      	bne.n	800188e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a3a      	ldr	r2, [pc, #232]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001868:	f7ff fa38 	bl	8000cdc <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff fa34 	bl	8000cdc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1c1      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <HAL_RCC_OscConfig+0x57c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4d8>
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a6:	e024      	b.n	80018f2 <HAL_RCC_OscConfig+0x522>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d110      	bne.n	80018d2 <HAL_RCC_OscConfig+0x502>
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	e00f      	b.n	80018f2 <HAL_RCC_OscConfig+0x522>
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff f9ef 	bl	8000cdc <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f9eb 	bl	8000cdc <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e176      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x578>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0ed      	beq.n	8001902 <HAL_RCC_OscConfig+0x532>
 8001926:	e01a      	b.n	800195e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f9d8 	bl	8000cdc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192e:	e00f      	b.n	8001950 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f9d4 	bl	8000cdc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d906      	bls.n	8001950 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e15f      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001950:	4baa      	ldr	r3, [pc, #680]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1e8      	bne.n	8001930 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4ba5      	ldr	r3, [pc, #660]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4aa4      	ldr	r2, [pc, #656]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001984:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198a:	4a9c      	ldr	r2, [pc, #624]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f9a2 	bl	8000cdc <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199c:	f7ff f99e 	bl	8000cdc <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e12b      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x5cc>
 80019bc:	e01b      	b.n	80019f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019be:	4b8f      	ldr	r3, [pc, #572]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c4:	4a8d      	ldr	r2, [pc, #564]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff f985 	bl	8000cdc <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d6:	f7ff f981 	bl	8000cdc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e10e      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8102 	beq.w	8001c04 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f040 80c5 	bne.w	8001b94 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0203 	and.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d12c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d123      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d11b      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d113      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	085b      	lsrs	r3, r3, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d067      	beq.n	8001b48 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d062      	beq.n	8001b44 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0bb      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a9a:	f7ff f91f 	bl	8000cdc <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff f91b 	bl	8000cdc <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e0a8      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac0:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <HAL_RCC_OscConfig+0x830>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ad0:	3a01      	subs	r2, #1
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	4311      	orrs	r1, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ada:	0212      	lsls	r2, r2, #8
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0552      	lsls	r2, r2, #21
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aee:	0852      	lsrs	r2, r2, #1
 8001af0:	3a01      	subs	r2, #1
 8001af2:	0652      	lsls	r2, r2, #25
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001afa:	06d2      	lsls	r2, r2, #27
 8001afc:	430a      	orrs	r2, r1
 8001afe:	493f      	ldr	r1, [pc, #252]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b04:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3c      	ldr	r2, [pc, #240]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b10:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a39      	ldr	r2, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b1c:	f7ff f8de 	bl	8000cdc <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f8da 	bl	8000cdc <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e067      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b42:	e05f      	b.n	8001c04 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e05e      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d157      	bne.n	8001c04 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b6c:	f7ff f8b6 	bl	8000cdc <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f8b2 	bl	8000cdc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e03f      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x7a4>
 8001b92:	e037      	b.n	8001c04 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d02d      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bb8:	f023 0303 	bic.w	r3, r3, #3
 8001bbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f885 	bl	8000cdc <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff f881 	bl	8000cdc <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e00e      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <HAL_RCC_OscConfig+0x82c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x806>
 8001bf4:	e006      	b.n	8001c04 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e005      	b.n	8001c06 <HAL_RCC_OscConfig+0x836>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0c8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d910      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0207 	bic.w	r2, r3, #7
 8001c3a:	4961      	ldr	r1, [pc, #388]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b0      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d04c      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d121      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e09e      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d115      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e092      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c98:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e086      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca8:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e07e      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb8:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 0203 	bic.w	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	493f      	ldr	r1, [pc, #252]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cca:	f7ff f807 	bl	8000cdc <HAL_GetTick>
 8001cce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7ff f803 	bl	8000cdc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e066      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 020c 	and.w	r2, r3, #12
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d1eb      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	492c      	ldr	r1, [pc, #176]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d210      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4924      	ldr	r1, [pc, #144]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e036      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4918      	ldr	r1, [pc, #96]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4910      	ldr	r1, [pc, #64]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d86:	f000 f825 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ff46 	bl	8000c3c <HAL_InitTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db4:	7afb      	ldrb	r3, [r7, #11]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003608 	.word	0x08003608
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d11e      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e005      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e30:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	e004      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d134      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d003      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xac>
 8001e78:	e005      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	e002      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	617b      	str	r3, [r7, #20]
      break;
 8001e8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	3301      	adds	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	fb02 f203 	mul.w	r2, r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0e5b      	lsrs	r3, r3, #25
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08003620 	.word	0x08003620
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200

08001eec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f08:	f7ff fff0 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4904      	ldr	r1, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08003618 	.word	0x08003618

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f34:	f7ff ffda 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0adb      	lsrs	r3, r3, #11
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4904      	ldr	r1, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003618 	.word	0x08003618

08001f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f74:	f7ff f9c8 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 8001f78:	6178      	str	r0, [r7, #20]
 8001f7a:	e014      	b.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	; 0x58
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f94:	f7ff f9b8 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 8001f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d10b      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d919      	bls.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb8:	d902      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e013      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e010      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d902      	bls.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fcc:	2303      	movs	r3, #3
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e00a      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d102      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd8:	2302      	movs	r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e004      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b70      	cmp	r3, #112	; 0x70
 8001fe2:	d101      	bne.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002028:	2300      	movs	r3, #0
 800202a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002034:	2b00      	cmp	r3, #0
 8002036:	d031      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002040:	d01a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002042:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002046:	d814      	bhi.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800204c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002050:	d10f      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002052:	4bac      	ldr	r3, [pc, #688]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4aab      	ldr	r2, [pc, #684]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800205e:	e00c      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f9dc 	bl	8002424 <RCCEx_PLLSAI1_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002070:	e003      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	74fb      	strb	r3, [r7, #19]
      break;
 8002076:	e000      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002080:	4ba0      	ldr	r3, [pc, #640]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	499d      	ldr	r1, [pc, #628]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8099 	beq.w	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ae:	4b95      	ldr	r3, [pc, #596]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b8f      	ldr	r3, [pc, #572]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a8e      	ldr	r2, [pc, #568]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b8c      	ldr	r3, [pc, #560]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b89      	ldr	r3, [pc, #548]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a88      	ldr	r2, [pc, #544]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fdf6 	bl	8000cdc <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe fdf2 	bl	8000cdc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d902      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	74fb      	strb	r3, [r7, #19]
        break;
 8002106:	e005      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002108:	4b7f      	ldr	r3, [pc, #508]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d155      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800211a:	4b7a      	ldr	r3, [pc, #488]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01e      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	429a      	cmp	r2, r3
 8002134:	d019      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002136:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002142:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002152:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	4a6a      	ldr	r2, [pc, #424]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002162:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d016      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fdb2 	bl	8000cdc <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	e00b      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fdae 	bl	8000cdc <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d902      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	74fb      	strb	r3, [r7, #19]
            break;
 8002192:	e006      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002194:	4b5b      	ldr	r3, [pc, #364]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ec      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	4953      	ldr	r1, [pc, #332]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021be:	e004      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
 80021c4:	e001      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ca:	7c7b      	ldrb	r3, [r7, #17]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e8:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4943      	ldr	r1, [pc, #268]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800220a:	4b3e      	ldr	r3, [pc, #248]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 020c 	bic.w	r2, r3, #12
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	493a      	ldr	r1, [pc, #232]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	4932      	ldr	r1, [pc, #200]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	4929      	ldr	r1, [pc, #164]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	4921      	ldr	r1, [pc, #132]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	4918      	ldr	r1, [pc, #96]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4910      	ldr	r1, [pc, #64]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d02c      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f4:	d10a      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f6:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4a02      	ldr	r2, [pc, #8]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002300:	60d3      	str	r3, [r2, #12]
 8002302:	e015      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002314:	d10c      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	2101      	movs	r1, #1
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f881 	bl	8002424 <RCCEx_PLLSAI1_Config>
 8002322:	4603      	mov	r3, r0
 8002324:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d028      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	492d      	ldr	r1, [pc, #180]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235a:	d106      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235c:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002366:	60d3      	str	r3, [r2, #12]
 8002368:	e011      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002372:	d10c      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f852 	bl	8002424 <RCCEx_PLLSAI1_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01c      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	4915      	ldr	r1, [pc, #84]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f82f 	bl	8002424 <RCCEx_PLLSAI1_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000

08002404 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000

08002424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002432:	4b74      	ldr	r3, [pc, #464]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d018      	beq.n	8002470 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d10d      	bne.n	800246a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
       ||
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002456:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
       ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d047      	beq.n	80024fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e044      	b.n	80024fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d018      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x86>
 8002478:	2b03      	cmp	r3, #3
 800247a:	d825      	bhi.n	80024c8 <RCCEx_PLLSAI1_Config+0xa4>
 800247c:	2b01      	cmp	r3, #1
 800247e:	d002      	beq.n	8002486 <RCCEx_PLLSAI1_Config+0x62>
 8002480:	2b02      	cmp	r3, #2
 8002482:	d009      	beq.n	8002498 <RCCEx_PLLSAI1_Config+0x74>
 8002484:	e020      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11d      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002496:	e01a      	b.n	80024ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002498:	4b5a      	ldr	r3, [pc, #360]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d116      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a8:	e013      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024aa:	4b56      	ldr	r3, [pc, #344]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024b6:	4b53      	ldr	r3, [pc, #332]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024c6:	e006      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      break;
 80024cc:	e004      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ce:	bf00      	nop
 80024d0:	e002      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	430b      	orrs	r3, r1
 80024f4:	4943      	ldr	r1, [pc, #268]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d17c      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002500:	4b40      	ldr	r3, [pc, #256]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a3f      	ldr	r2, [pc, #252]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800250a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800250c:	f7fe fbe6 	bl	8000cdc <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002512:	e009      	b.n	8002528 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002514:	f7fe fbe2 	bl	8000cdc <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d902      	bls.n	8002528 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	73fb      	strb	r3, [r7, #15]
        break;
 8002526:	e005      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002528:	4b36      	ldr	r3, [pc, #216]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ef      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d15f      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d110      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002540:	4b30      	ldr	r3, [pc, #192]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002548:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	0211      	lsls	r1, r2, #8
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	06d2      	lsls	r2, r2, #27
 8002558:	430a      	orrs	r2, r1
 800255a:	492a      	ldr	r1, [pc, #168]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	610b      	str	r3, [r1, #16]
 8002560:	e027      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d112      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002570:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6892      	ldr	r2, [r2, #8]
 8002578:	0211      	lsls	r1, r2, #8
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6912      	ldr	r2, [r2, #16]
 800257e:	0852      	lsrs	r2, r2, #1
 8002580:	3a01      	subs	r2, #1
 8002582:	0552      	lsls	r2, r2, #21
 8002584:	430a      	orrs	r2, r1
 8002586:	491f      	ldr	r1, [pc, #124]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	610b      	str	r3, [r1, #16]
 800258c:	e011      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002596:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	0211      	lsls	r1, r2, #8
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6952      	ldr	r2, [r2, #20]
 80025a4:	0852      	lsrs	r2, r2, #1
 80025a6:	3a01      	subs	r2, #1
 80025a8:	0652      	lsls	r2, r2, #25
 80025aa:	430a      	orrs	r2, r1
 80025ac:	4915      	ldr	r1, [pc, #84]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fb8d 	bl	8000cdc <HAL_GetTick>
 80025c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c4:	e009      	b.n	80025da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025c6:	f7fe fb89 	bl	8000cdc <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d902      	bls.n	80025da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	73fb      	strb	r3, [r7, #15]
          break;
 80025d8:	e005      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ef      	beq.n	80025c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e040      	b.n	800269c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe f9ec 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2224      	movs	r2, #36	; 0x24
 8002634:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fae2 	bl	8002c10 <UART_SetConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e022      	b.n	800269c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fce2 	bl	8003028 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fd69 	bl	800316c <UART_CheckIdleState>
 800269a:	4603      	mov	r3, r0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	f040 8082 	bne.w	80027c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_UART_Transmit+0x26>
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07a      	b.n	80027c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_UART_Transmit+0x38>
 80026d8:	2302      	movs	r3, #2
 80026da:	e073      	b.n	80027c4 <HAL_UART_Transmit+0x120>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2221      	movs	r2, #33	; 0x21
 80026f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f2:	f7fe faf3 	bl	8000cdc <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Transmit+0x80>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002734:	e02d      	b.n	8002792 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fd5c 	bl	80031fe <UART_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e039      	b.n	80027c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10b      	bne.n	800276e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002762:	b292      	uxth	r2, r2
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3302      	adds	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e008      	b.n	8002780 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b292      	uxth	r2, r2
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1cb      	bne.n	8002736 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2140      	movs	r1, #64	; 0x40
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fd28 	bl	80031fe <UART_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e005      	b.n	80027c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d113      	bne.n	8002824 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00e      	beq.n	8002824 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 81ce 	beq.w	8002bb6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
      }
      return;
 8002822:	e1c8      	b.n	8002bb6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80e3 	beq.w	80029f2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d105      	bne.n	8002842 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4ba6      	ldr	r3, [pc, #664]	; (8002ad4 <HAL_UART_IRQHandler+0x308>)
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80d8 	beq.w	80029f2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_UART_IRQHandler+0xa2>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2201      	movs	r2, #1
 800285c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_UART_IRQHandler+0xce>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d010      	beq.n	80028c6 <HAL_UART_IRQHandler+0xfa>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2204      	movs	r2, #4
 80028b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028bc:	f043 0202 	orr.w	r2, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2208      	movs	r2, #8
 80028ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f2:	f043 0208 	orr.w	r2, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <HAL_UART_IRQHandler+0x15e>
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8142 	beq.w	8002bba <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002960:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d004      	beq.n	800297a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d031      	beq.n	80029de <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fcbb 	bl	80032f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d123      	bne.n	80029d6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d013      	beq.n	80029ce <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a4b      	ldr	r2, [pc, #300]	; (8002ad8 <HAL_UART_IRQHandler+0x30c>)
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe faed 	bl	8000f92 <HAL_DMA_Abort_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d017      	beq.n	80029ee <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80029c8:	4610      	mov	r0, r2
 80029ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	e00f      	b.n	80029ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f908 	bl	8002be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	e00b      	b.n	80029ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f904 	bl	8002be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	e007      	b.n	80029ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f900 	bl	8002be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80029ec:	e0e5      	b.n	8002bba <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ee:	bf00      	nop
    return;
 80029f0:	e0e3      	b.n	8002bba <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f040 80a9 	bne.w	8002b4e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a3 	beq.w	8002b4e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 809d 	beq.w	8002b4e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d158      	bne.n	8002adc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002a34:	893b      	ldrh	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80c1 	beq.w	8002bbe <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002a42:	893a      	ldrh	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f080 80ba 	bcs.w	8002bbe <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d12a      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a90:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0210 	bic.w	r2, r2, #16
 8002aac:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fa2f 	bl	8000f16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f893 	bl	8002bf8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ad2:	e074      	b.n	8002bbe <HAL_UART_IRQHandler+0x3f2>
 8002ad4:	04000120 	.word	0x04000120
 8002ad8:	08003355 	.word	0x08003355
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8002afa:	897b      	ldrh	r3, [r7, #10]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d060      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0210 	bic.w	r2, r2, #16
 8002b40:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f856 	bl	8002bf8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b4c:	e039      	b.n	8002bc2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_UART_IRQHandler+0x3a8>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fc20 	bl	80033b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b72:	e029      	b.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01a      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
    }
    return;
 8002b98:	e015      	b.n	8002bc6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d011      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fbe6 	bl	8003380 <UART_EndTransmit_IT>
    return;
 8002bb4:	e008      	b.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8002bb6:	bf00      	nop
 8002bb8:	e006      	b.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8002bba:	bf00      	nop
 8002bbc:	e004      	b.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8002bc6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop

08002bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4baf      	ldr	r3, [pc, #700]	; (8002ef8 <UART_SetConfig+0x2e8>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	69f9      	ldr	r1, [r7, #28]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4aa4      	ldr	r2, [pc, #656]	; (8002efc <UART_SetConfig+0x2ec>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a9b      	ldr	r2, [pc, #620]	; (8002f00 <UART_SetConfig+0x2f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d121      	bne.n	8002cda <UART_SetConfig+0xca>
 8002c96:	4b9b      	ldr	r3, [pc, #620]	; (8002f04 <UART_SetConfig+0x2f4>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d817      	bhi.n	8002cd4 <UART_SetConfig+0xc4>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <UART_SetConfig+0x9c>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002cc9 	.word	0x08002cc9
 8002cb4:	08002cc3 	.word	0x08002cc3
 8002cb8:	08002ccf 	.word	0x08002ccf
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	76fb      	strb	r3, [r7, #27]
 8002cc0:	e070      	b.n	8002da4 <UART_SetConfig+0x194>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	76fb      	strb	r3, [r7, #27]
 8002cc6:	e06d      	b.n	8002da4 <UART_SetConfig+0x194>
 8002cc8:	2304      	movs	r3, #4
 8002cca:	76fb      	strb	r3, [r7, #27]
 8002ccc:	e06a      	b.n	8002da4 <UART_SetConfig+0x194>
 8002cce:	2308      	movs	r3, #8
 8002cd0:	76fb      	strb	r3, [r7, #27]
 8002cd2:	e067      	b.n	8002da4 <UART_SetConfig+0x194>
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	76fb      	strb	r3, [r7, #27]
 8002cd8:	e064      	b.n	8002da4 <UART_SetConfig+0x194>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a8a      	ldr	r2, [pc, #552]	; (8002f08 <UART_SetConfig+0x2f8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d132      	bne.n	8002d4a <UART_SetConfig+0x13a>
 8002ce4:	4b87      	ldr	r3, [pc, #540]	; (8002f04 <UART_SetConfig+0x2f4>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d828      	bhi.n	8002d44 <UART_SetConfig+0x134>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <UART_SetConfig+0xe8>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d45 	.word	0x08002d45
 8002d00:	08002d45 	.word	0x08002d45
 8002d04:	08002d45 	.word	0x08002d45
 8002d08:	08002d39 	.word	0x08002d39
 8002d0c:	08002d45 	.word	0x08002d45
 8002d10:	08002d45 	.word	0x08002d45
 8002d14:	08002d45 	.word	0x08002d45
 8002d18:	08002d33 	.word	0x08002d33
 8002d1c:	08002d45 	.word	0x08002d45
 8002d20:	08002d45 	.word	0x08002d45
 8002d24:	08002d45 	.word	0x08002d45
 8002d28:	08002d3f 	.word	0x08002d3f
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	76fb      	strb	r3, [r7, #27]
 8002d30:	e038      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d32:	2302      	movs	r3, #2
 8002d34:	76fb      	strb	r3, [r7, #27]
 8002d36:	e035      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	76fb      	strb	r3, [r7, #27]
 8002d3c:	e032      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	76fb      	strb	r3, [r7, #27]
 8002d42:	e02f      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d44:	2310      	movs	r3, #16
 8002d46:	76fb      	strb	r3, [r7, #27]
 8002d48:	e02c      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6b      	ldr	r2, [pc, #428]	; (8002efc <UART_SetConfig+0x2ec>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d125      	bne.n	8002da0 <UART_SetConfig+0x190>
 8002d54:	4b6b      	ldr	r3, [pc, #428]	; (8002f04 <UART_SetConfig+0x2f4>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d62:	d017      	beq.n	8002d94 <UART_SetConfig+0x184>
 8002d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d68:	d817      	bhi.n	8002d9a <UART_SetConfig+0x18a>
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6e:	d00b      	beq.n	8002d88 <UART_SetConfig+0x178>
 8002d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d74:	d811      	bhi.n	8002d9a <UART_SetConfig+0x18a>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <UART_SetConfig+0x172>
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d006      	beq.n	8002d8e <UART_SetConfig+0x17e>
 8002d80:	e00b      	b.n	8002d9a <UART_SetConfig+0x18a>
 8002d82:	2300      	movs	r3, #0
 8002d84:	76fb      	strb	r3, [r7, #27]
 8002d86:	e00d      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	76fb      	strb	r3, [r7, #27]
 8002d8c:	e00a      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d8e:	2304      	movs	r3, #4
 8002d90:	76fb      	strb	r3, [r7, #27]
 8002d92:	e007      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d94:	2308      	movs	r3, #8
 8002d96:	76fb      	strb	r3, [r7, #27]
 8002d98:	e004      	b.n	8002da4 <UART_SetConfig+0x194>
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	76fb      	strb	r3, [r7, #27]
 8002d9e:	e001      	b.n	8002da4 <UART_SetConfig+0x194>
 8002da0:	2310      	movs	r3, #16
 8002da2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a54      	ldr	r2, [pc, #336]	; (8002efc <UART_SetConfig+0x2ec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d173      	bne.n	8002e96 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dae:	7efb      	ldrb	r3, [r7, #27]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d824      	bhi.n	8002dfe <UART_SetConfig+0x1ee>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <UART_SetConfig+0x1ac>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	08002dff 	.word	0x08002dff
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	08002dff 	.word	0x08002dff
 8002dcc:	08002def 	.word	0x08002def
 8002dd0:	08002dff 	.word	0x08002dff
 8002dd4:	08002dff 	.word	0x08002dff
 8002dd8:	08002dff 	.word	0x08002dff
 8002ddc:	08002df7 	.word	0x08002df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de0:	f7ff f890 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002de4:	6178      	str	r0, [r7, #20]
        break;
 8002de6:	e00f      	b.n	8002e08 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de8:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <UART_SetConfig+0x2fc>)
 8002dea:	617b      	str	r3, [r7, #20]
        break;
 8002dec:	e00c      	b.n	8002e08 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dee:	f7fe fff1 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8002df2:	6178      	str	r0, [r7, #20]
        break;
 8002df4:	e008      	b.n	8002e08 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dfa:	617b      	str	r3, [r7, #20]
        break;
 8002dfc:	e004      	b.n	8002e08 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	76bb      	strb	r3, [r7, #26]
        break;
 8002e06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80fe 	beq.w	800300c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d305      	bcc.n	8002e2c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d902      	bls.n	8002e32 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	76bb      	strb	r3, [r7, #26]
 8002e30:	e0ec      	b.n	800300c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	020b      	lsls	r3, r1, #8
 8002e44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e48:	0202      	lsls	r2, r0, #8
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	6849      	ldr	r1, [r1, #4]
 8002e4e:	0849      	lsrs	r1, r1, #1
 8002e50:	4608      	mov	r0, r1
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	1814      	adds	r4, r2, r0
 8002e58:	eb43 0501 	adc.w	r5, r3, r1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd f9b7 	bl	80001dc <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4613      	mov	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7c:	d308      	bcc.n	8002e90 <UART_SetConfig+0x280>
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e84:	d204      	bcs.n	8002e90 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	e0bd      	b.n	800300c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	76bb      	strb	r3, [r7, #26]
 8002e94:	e0ba      	b.n	800300c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9e:	d168      	bne.n	8002f72 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8002ea0:	7efb      	ldrb	r3, [r7, #27]
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d834      	bhi.n	8002f10 <UART_SetConfig+0x300>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <UART_SetConfig+0x29c>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	08002ee1 	.word	0x08002ee1
 8002eb8:	08002f11 	.word	0x08002f11
 8002ebc:	08002ee7 	.word	0x08002ee7
 8002ec0:	08002f11 	.word	0x08002f11
 8002ec4:	08002f11 	.word	0x08002f11
 8002ec8:	08002f11 	.word	0x08002f11
 8002ecc:	08002eef 	.word	0x08002eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f7ff f818 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	6178      	str	r0, [r7, #20]
        break;
 8002ed6:	e020      	b.n	8002f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ed8:	f7ff f82a 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8002edc:	6178      	str	r0, [r7, #20]
        break;
 8002ede:	e01c      	b.n	8002f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <UART_SetConfig+0x2fc>)
 8002ee2:	617b      	str	r3, [r7, #20]
        break;
 8002ee4:	e019      	b.n	8002f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee6:	f7fe ff75 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8002eea:	6178      	str	r0, [r7, #20]
        break;
 8002eec:	e015      	b.n	8002f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef2:	617b      	str	r3, [r7, #20]
        break;
 8002ef4:	e011      	b.n	8002f1a <UART_SetConfig+0x30a>
 8002ef6:	bf00      	nop
 8002ef8:	efff69f3 	.word	0xefff69f3
 8002efc:	40008000 	.word	0x40008000
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40004400 	.word	0x40004400
 8002f0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	76bb      	strb	r3, [r7, #26]
        break;
 8002f18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d075      	beq.n	800300c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005a      	lsls	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	441a      	add	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	d916      	bls.n	8002f6c <UART_SetConfig+0x35c>
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d212      	bcs.n	8002f6c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f023 030f 	bic.w	r3, r3, #15
 8002f4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	89fa      	ldrh	r2, [r7, #14]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	e04f      	b.n	800300c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	76bb      	strb	r3, [r7, #26]
 8002f70:	e04c      	b.n	800300c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f72:	7efb      	ldrb	r3, [r7, #27]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d828      	bhi.n	8002fca <UART_SetConfig+0x3ba>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <UART_SetConfig+0x370>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002fad 	.word	0x08002fad
 8002f88:	08002fb5 	.word	0x08002fb5
 8002f8c:	08002fcb 	.word	0x08002fcb
 8002f90:	08002fbb 	.word	0x08002fbb
 8002f94:	08002fcb 	.word	0x08002fcb
 8002f98:	08002fcb 	.word	0x08002fcb
 8002f9c:	08002fcb 	.word	0x08002fcb
 8002fa0:	08002fc3 	.word	0x08002fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f7fe ffae 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	6178      	str	r0, [r7, #20]
        break;
 8002faa:	e013      	b.n	8002fd4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fac:	f7fe ffc0 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8002fb0:	6178      	str	r0, [r7, #20]
        break;
 8002fb2:	e00f      	b.n	8002fd4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <UART_SetConfig+0x414>)
 8002fb6:	617b      	str	r3, [r7, #20]
        break;
 8002fb8:	e00c      	b.n	8002fd4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fba:	f7fe ff0b 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8002fbe:	6178      	str	r0, [r7, #20]
        break;
 8002fc0:	e008      	b.n	8002fd4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc6:	617b      	str	r3, [r7, #20]
        break;
 8002fc8:	e004      	b.n	8002fd4 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	76bb      	strb	r3, [r7, #26]
        break;
 8002fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085a      	lsrs	r2, r3, #1
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	d908      	bls.n	8003008 <UART_SetConfig+0x3f8>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d204      	bcs.n	8003008 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	e001      	b.n	800300c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003018:	7ebb      	ldrb	r3, [r7, #26]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bdb0      	pop	{r4, r5, r7, pc}
 8003022:	bf00      	nop
 8003024:	00f42400 	.word	0x00f42400

08003028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01a      	beq.n	800313e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003126:	d10a      	bne.n	800313e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af02      	add	r7, sp, #8
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800317c:	f7fd fdae 	bl	8000cdc <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d10e      	bne.n	80031ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f82d 	bl	80031fe <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e023      	b.n	80031f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d10e      	bne.n	80031da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f817 	bl	80031fe <UART_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e00d      	b.n	80031f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320e:	e05e      	b.n	80032ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d05a      	beq.n	80032ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fd fd60 	bl	8000cdc <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <UART_WaitOnFlagUntilTimeout+0x30>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11b      	bne.n	8003266 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800323c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e043      	b.n	80032ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02c      	beq.n	80032ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003282:	d124      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800328c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800329c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e00f      	b.n	80032ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d091      	beq.n	8003210 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800330c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0210 	bic.w	r2, r2, #16
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff fc36 	bl	8002be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003396:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff fc13 	bl	8002bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <adpflual_setState>:
#include "sm_adp-flual.h"

adpflual_State_t adpflual_State = SHUTDOWN;

#ifdef DEBUG
void adpflual_setState (adpflual_State_t value) {
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
	adpflual_State = value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <adpflual_setState+0x1c>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	7013      	strb	r3, [r2, #0]
};
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000034 	.word	0x20000034

080033e8 <adpflual_getState>:

adpflual_State_t adpflual_getState (void) {
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
	return adpflual_State;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <adpflual_getState+0x14>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
};
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000034 	.word	0x20000034

08003400 <adpflual_State_Machine>:

};

#endif

void adpflual_State_Machine(void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
	switch(adpflual_State) {
 8003406:	4b2d      	ldr	r3, [pc, #180]	; (80034bc <adpflual_State_Machine+0xbc>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b07      	cmp	r3, #7
 800340c:	d851      	bhi.n	80034b2 <adpflual_State_Machine+0xb2>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <adpflual_State_Machine+0x14>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003435 	.word	0x08003435
 8003418:	08003441 	.word	0x08003441
 800341c:	080034ad 	.word	0x080034ad
 8003420:	080034ad 	.word	0x080034ad
 8003424:	080034ad 	.word	0x080034ad
 8003428:	080034ad 	.word	0x080034ad
 800342c:	080034ad 	.word	0x080034ad
 8003430:	080034ad 	.word	0x080034ad

	case SHUTDOWN:
		ADPFLUAL_SETUP();
 8003434:	f7fd f864 	bl	8000500 <setup>
		adpflual_State = SM_READY;
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <adpflual_State_Machine+0xbc>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
		break;
 800343e:	e038      	b.n	80034b2 <adpflual_State_Machine+0xb2>
	case SM_READY:{
		ADPFLUAL_VC_LIST_TYPEDEF temp;
		if(ADPFLUIAL_GETVOICECOMMAND(&temp)){
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f8ce 	bl	80005e4 <getVoiceCommandEvent>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d023      	beq.n	8003496 <adpflual_State_Machine+0x96>
			if(temp == VC_RECORD_ID){
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <adpflual_State_Machine+0x60>
				ADPFLUAL_NEWFILE();
 8003454:	f7fd f864 	bl	8000520 <newFileExecuted>
				adpflual_State = SM_RECORD_ID;
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <adpflual_State_Machine+0xbc>)
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]
		} else if(ADPFLUAL_TIMEROUT()){
			ADPFLUAL_BLINK_RED_LED();
			adpflual_State = SM_HARD_FAULT;
		}
	}
		break;
 800345e:	e027      	b.n	80034b0 <adpflual_State_Machine+0xb0>
			}else if(temp == VC_RECORD_FLUENCY){
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <adpflual_State_Machine+0x72>
				ADPFLUAL_NEWFILE();
 8003466:	f7fd f85b 	bl	8000520 <newFileExecuted>
				adpflual_State = SM_RECORD_FLUENCY;
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <adpflual_State_Machine+0xbc>)
 800346c:	2203      	movs	r2, #3
 800346e:	701a      	strb	r2, [r3, #0]
		break;
 8003470:	e01e      	b.n	80034b0 <adpflual_State_Machine+0xb0>
			}else if(temp == VC_SEND){
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d105      	bne.n	8003484 <adpflual_State_Machine+0x84>
				ADPFLUAL_SEEK_WIFI_NETWORK();
 8003478:	f7fd f872 	bl	8000560 <seekWifiNetwork>
				adpflual_State = SM_CONNECT;
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <adpflual_State_Machine+0xbc>)
 800347e:	2205      	movs	r2, #5
 8003480:	701a      	strb	r2, [r3, #0]
		break;
 8003482:	e015      	b.n	80034b0 <adpflual_State_Machine+0xb0>
			}else if(temp == VC_PLAY_RECORDED){
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d112      	bne.n	80034b0 <adpflual_State_Machine+0xb0>
				ADPFLUAL_PLAY_LAST_SOUND();
 800348a:	f7fd f879 	bl	8000580 <playLastSound>
				adpflual_State = SM_PLAY;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <adpflual_State_Machine+0xbc>)
 8003490:	2207      	movs	r2, #7
 8003492:	701a      	strb	r2, [r3, #0]
		break;
 8003494:	e00c      	b.n	80034b0 <adpflual_State_Machine+0xb0>
		} else if(ADPFLUAL_TIMEROUT()){
 8003496:	f7fd f8cd 	bl	8000634 <getTimerOutEvent>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <adpflual_State_Machine+0xb0>
			ADPFLUAL_BLINK_RED_LED();
 80034a0:	f7fd f84e 	bl	8000540 <blinkRedLed>
			adpflual_State = SM_HARD_FAULT;
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <adpflual_State_Machine+0xbc>)
 80034a6:	2204      	movs	r2, #4
 80034a8:	701a      	strb	r2, [r3, #0]
		break;
 80034aa:	e001      	b.n	80034b0 <adpflual_State_Machine+0xb0>
	case SM_RECORD_ID:
		break;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <adpflual_State_Machine+0xb2>
		break;
 80034b0:	bf00      	nop
	case SM_SEND:
		break;
	case SM_PLAY:
		break;
	}
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000034 	.word	0x20000034

080034c0 <__libc_init_array>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4d0d      	ldr	r5, [pc, #52]	; (80034f8 <__libc_init_array+0x38>)
 80034c4:	4c0d      	ldr	r4, [pc, #52]	; (80034fc <__libc_init_array+0x3c>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	2600      	movs	r6, #0
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	d109      	bne.n	80034e4 <__libc_init_array+0x24>
 80034d0:	4d0b      	ldr	r5, [pc, #44]	; (8003500 <__libc_init_array+0x40>)
 80034d2:	4c0c      	ldr	r4, [pc, #48]	; (8003504 <__libc_init_array+0x44>)
 80034d4:	f000 f820 	bl	8003518 <_init>
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	2600      	movs	r6, #0
 80034de:	42a6      	cmp	r6, r4
 80034e0:	d105      	bne.n	80034ee <__libc_init_array+0x2e>
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e8:	4798      	blx	r3
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7ee      	b.n	80034cc <__libc_init_array+0xc>
 80034ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f2:	4798      	blx	r3
 80034f4:	3601      	adds	r6, #1
 80034f6:	e7f2      	b.n	80034de <__libc_init_array+0x1e>
 80034f8:	08003658 	.word	0x08003658
 80034fc:	08003658 	.word	0x08003658
 8003500:	08003658 	.word	0x08003658
 8003504:	0800365c 	.word	0x0800365c

08003508 <memset>:
 8003508:	4402      	add	r2, r0
 800350a:	4603      	mov	r3, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	d100      	bne.n	8003512 <memset+0xa>
 8003510:	4770      	bx	lr
 8003512:	f803 1b01 	strb.w	r1, [r3], #1
 8003516:	e7f9      	b.n	800350c <memset+0x4>

08003518 <_init>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr

08003524 <_fini>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr
