
Transition_Test-ADP-FLUAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b00  08003b00  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b08  08003b08  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  08003b20  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003b20  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1d  00000000  00000000  0002cbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002f608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff33  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b80d  00000000  00000000  0004ffc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c087e  00000000  00000000  0005b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c04e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  0011c0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003950 	.word	0x08003950

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08003950 	.word	0x08003950

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96e 	b.w	80004d0 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468c      	mov	ip, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	f040 8083 	bne.w	8000322 <__udivmoddi4+0x116>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d947      	bls.n	80002b2 <__udivmoddi4+0xa6>
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	b142      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000228:	f1c2 0020 	rsb	r0, r2, #32
 800022c:	fa24 f000 	lsr.w	r0, r4, r0
 8000230:	4091      	lsls	r1, r2
 8000232:	4097      	lsls	r7, r2
 8000234:	ea40 0c01 	orr.w	ip, r0, r1
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbbc f6f8 	udiv	r6, ip, r8
 8000244:	fa1f fe87 	uxth.w	lr, r7
 8000248:	fb08 c116 	mls	r1, r8, r6, ip
 800024c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000250:	fb06 f10e 	mul.w	r1, r6, lr
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 8119 	bcs.w	8000494 <__udivmoddi4+0x288>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8116 	bls.w	8000494 <__udivmoddi4+0x288>
 8000268:	3e02      	subs	r6, #2
 800026a:	443b      	add	r3, r7
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000280:	45a6      	cmp	lr, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	193c      	adds	r4, r7, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8105 	bcs.w	8000498 <__udivmoddi4+0x28c>
 800028e:	45a6      	cmp	lr, r4
 8000290:	f240 8102 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029c:	eba4 040e 	sub.w	r4, r4, lr
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b902      	cbnz	r2, 80002b6 <__udivmoddi4+0xaa>
 80002b4:	deff      	udf	#255	; 0xff
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d150      	bne.n	8000360 <__udivmoddi4+0x154>
 80002be:	1bcb      	subs	r3, r1, r7
 80002c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c4:	fa1f f887 	uxth.w	r8, r7
 80002c8:	2601      	movs	r6, #1
 80002ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ce:	0c21      	lsrs	r1, r4, #16
 80002d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d8:	fb08 f30c 	mul.w	r3, r8, ip
 80002dc:	428b      	cmp	r3, r1
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0xe4>
 80002e0:	1879      	adds	r1, r7, r1
 80002e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0xe2>
 80002e8:	428b      	cmp	r3, r1
 80002ea:	f200 80e9 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 80002ee:	4684      	mov	ip, r0
 80002f0:	1ac9      	subs	r1, r1, r3
 80002f2:	b2a3      	uxth	r3, r4
 80002f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000300:	fb08 f800 	mul.w	r8, r8, r0
 8000304:	45a0      	cmp	r8, r4
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x10c>
 8000308:	193c      	adds	r4, r7, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x10a>
 8000310:	45a0      	cmp	r8, r4
 8000312:	f200 80d9 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 8000316:	4618      	mov	r0, r3
 8000318:	eba4 0408 	sub.w	r4, r4, r8
 800031c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000320:	e7bf      	b.n	80002a2 <__udivmoddi4+0x96>
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x12e>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80b1 	beq.w	800048e <__udivmoddi4+0x282>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x1cc>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0x140>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80b8 	bhi.w	80004bc <__udivmoddi4+0x2b0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0103 	sbc.w	r1, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	468c      	mov	ip, r1
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0a8      	beq.n	80002ac <__udivmoddi4+0xa0>
 800035a:	e9c5 4c00 	strd	r4, ip, [r5]
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0xa0>
 8000360:	f1c2 0320 	rsb	r3, r2, #32
 8000364:	fa20 f603 	lsr.w	r6, r0, r3
 8000368:	4097      	lsls	r7, r2
 800036a:	fa01 f002 	lsl.w	r0, r1, r2
 800036e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000372:	40d9      	lsrs	r1, r3
 8000374:	4330      	orrs	r0, r6
 8000376:	0c03      	lsrs	r3, r0, #16
 8000378:	fbb1 f6fe 	udiv	r6, r1, lr
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	fb0e 1116 	mls	r1, lr, r6, r1
 8000384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000388:	fb06 f108 	mul.w	r1, r6, r8
 800038c:	4299      	cmp	r1, r3
 800038e:	fa04 f402 	lsl.w	r4, r4, r2
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x19c>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f106 3cff 	add.w	ip, r6, #4294967295
 800039a:	f080 808d 	bcs.w	80004b8 <__udivmoddi4+0x2ac>
 800039e:	4299      	cmp	r1, r3
 80003a0:	f240 808a 	bls.w	80004b8 <__udivmoddi4+0x2ac>
 80003a4:	3e02      	subs	r6, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1a5b      	subs	r3, r3, r1
 80003aa:	b281      	uxth	r1, r0
 80003ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b8:	fb00 f308 	mul.w	r3, r0, r8
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1c4>
 80003c0:	1879      	adds	r1, r7, r1
 80003c2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c6:	d273      	bcs.n	80004b0 <__udivmoddi4+0x2a4>
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d971      	bls.n	80004b0 <__udivmoddi4+0x2a4>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4439      	add	r1, r7
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d6:	e778      	b.n	80002ca <__udivmoddi4+0xbe>
 80003d8:	f1c6 0c20 	rsb	ip, r6, #32
 80003dc:	fa03 f406 	lsl.w	r4, r3, r6
 80003e0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e4:	431c      	orrs	r4, r3
 80003e6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f6:	431f      	orrs	r7, r3
 80003f8:	0c3b      	lsrs	r3, r7, #16
 80003fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fe:	fa1f f884 	uxth.w	r8, r4
 8000402:	fb0e 1119 	mls	r1, lr, r9, r1
 8000406:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040a:	fb09 fa08 	mul.w	sl, r9, r8
 800040e:	458a      	cmp	sl, r1
 8000410:	fa02 f206 	lsl.w	r2, r2, r6
 8000414:	fa00 f306 	lsl.w	r3, r0, r6
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x220>
 800041a:	1861      	adds	r1, r4, r1
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	d248      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000422:	458a      	cmp	sl, r1
 8000424:	d946      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 8000426:	f1a9 0902 	sub.w	r9, r9, #2
 800042a:	4421      	add	r1, r4
 800042c:	eba1 010a 	sub.w	r1, r1, sl
 8000430:	b2bf      	uxth	r7, r7
 8000432:	fbb1 f0fe 	udiv	r0, r1, lr
 8000436:	fb0e 1110 	mls	r1, lr, r0, r1
 800043a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043e:	fb00 f808 	mul.w	r8, r0, r8
 8000442:	45b8      	cmp	r8, r7
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x24a>
 8000446:	19e7      	adds	r7, r4, r7
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d22e      	bcs.n	80004ac <__udivmoddi4+0x2a0>
 800044e:	45b8      	cmp	r8, r7
 8000450:	d92c      	bls.n	80004ac <__udivmoddi4+0x2a0>
 8000452:	3802      	subs	r0, #2
 8000454:	4427      	add	r7, r4
 8000456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045a:	eba7 0708 	sub.w	r7, r7, r8
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	454f      	cmp	r7, r9
 8000464:	46c6      	mov	lr, r8
 8000466:	4649      	mov	r1, r9
 8000468:	d31a      	bcc.n	80004a0 <__udivmoddi4+0x294>
 800046a:	d017      	beq.n	800049c <__udivmoddi4+0x290>
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x27a>
 800046e:	ebb3 020e 	subs.w	r2, r3, lr
 8000472:	eb67 0701 	sbc.w	r7, r7, r1
 8000476:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047a:	40f2      	lsrs	r2, r6
 800047c:	ea4c 0202 	orr.w	r2, ip, r2
 8000480:	40f7      	lsrs	r7, r6
 8000482:	e9c5 2700 	strd	r2, r7, [r5]
 8000486:	2600      	movs	r6, #0
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e70b      	b.n	80002ac <__udivmoddi4+0xa0>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e9      	b.n	800026c <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fd      	b.n	8000298 <__udivmoddi4+0x8c>
 800049c:	4543      	cmp	r3, r8
 800049e:	d2e5      	bcs.n	800046c <__udivmoddi4+0x260>
 80004a0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a4:	eb69 0104 	sbc.w	r1, r9, r4
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7df      	b.n	800046c <__udivmoddi4+0x260>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e7d2      	b.n	8000456 <__udivmoddi4+0x24a>
 80004b0:	4660      	mov	r0, ip
 80004b2:	e78d      	b.n	80003d0 <__udivmoddi4+0x1c4>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7b9      	b.n	800042c <__udivmoddi4+0x220>
 80004b8:	4666      	mov	r6, ip
 80004ba:	e775      	b.n	80003a8 <__udivmoddi4+0x19c>
 80004bc:	4630      	mov	r0, r6
 80004be:	e74a      	b.n	8000356 <__udivmoddi4+0x14a>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	4439      	add	r1, r7
 80004c6:	e713      	b.n	80002f0 <__udivmoddi4+0xe4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	443c      	add	r4, r7
 80004cc:	e724      	b.n	8000318 <__udivmoddi4+0x10c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <send_Serial>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_Serial(const uint8_t * text){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)text, strlen((const char *)text), 1000);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff fe75 	bl	80001cc <strlen>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <send_Serial+0x28>)
 80004ee:	f002 fa87 	bl	8002a00 <HAL_UART_Transmit>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000003c 	.word	0x2000003c

08000500 <setup>:

/*****************************************************************************
 * MOC for Actions application
 *
 */
void setup(void){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	executed_routines |= SETUP_EXECUTED;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <setup+0x1c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	4a03      	ldr	r2, [pc, #12]	; (800051c <setup+0x1c>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000034 	.word	0x20000034

08000520 <newFileExecuted>:

void newFileExecuted(void){
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	executed_routines |= NEW_FILE_EXECUTED;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <newFileExecuted+0x1c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <newFileExecuted+0x1c>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000034 	.word	0x20000034

08000540 <blinkRedLed>:

void blinkRedLed(void){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	executed_routines |= BLINK_RED_LED;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <blinkRedLed+0x1c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <blinkRedLed+0x1c>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000034 	.word	0x20000034

08000560 <seekWifiNetwork>:

void seekWifiNetwork(void){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	executed_routines |= SEEK_WIFI_NETWORK;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <seekWifiNetwork+0x1c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <seekWifiNetwork+0x1c>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000034 	.word	0x20000034

08000580 <playLastSound>:

void playLastSound(void){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	executed_routines |= PLAY_LAST_SOUND;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <playLastSound+0x1c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	4a03      	ldr	r2, [pc, #12]	; (800059c <playLastSound+0x1c>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000034 	.word	0x20000034

080005a0 <stopRecord>:

void stopRecord(void){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	executed_routines |= CLOSE_FILE_RECORDED;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <stopRecord+0x1c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <stopRecord+0x1c>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000034 	.word	0x20000034

080005c0 <startSend>:

void startSend(void){
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	executed_routines |= START_SEND;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <startSend+0x1c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <startSend+0x1c>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000034 	.word	0x20000034

080005e0 <connectionFailAlert>:

void connectionFailAlert(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	executed_routines |= CONNECTION_FAIL_ALERT;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <connectionFailAlert+0x1c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <connectionFailAlert+0x1c>)
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000034 	.word	0x20000034

08000600 <sendMessageAlert>:

void sendMessageAlert(void){
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	executed_routines |= SEND_MESSAGE_ALERT;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <sendMessageAlert+0x1c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <sendMessageAlert+0x1c>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000034 	.word	0x20000034

08000620 <rebootCaptureFunction>:

void rebootCaptureFunction(void){
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	executed_routines |= REBOOT_CAPTURE_FUNCTION;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <rebootCaptureFunction+0x1c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <rebootCaptureFunction+0x1c>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000034 	.word	0x20000034

08000640 <generateTurnOnEvent>:
/*****************************************************************************
 * Mocs for Events application
 *
 */
void generateTurnOnEvent(void){
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	TurnOnEvent = true;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <generateTurnOnEvent+0x14>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	2000002c 	.word	0x2000002c

08000658 <generateVoiceCommandEvent>:

	TurnOnEvent = false;
	return retVal;
}

void generateVoiceCommandEvent(voiceCommandEnum_t value){
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	voiceCommand = value;
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <generateVoiceCommandEvent+0x24>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	7013      	strb	r3, [r2, #0]
	VoiceCommandEvent = true;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <generateVoiceCommandEvent+0x28>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000
 8000680:	2000002d 	.word	0x2000002d

08000684 <getVoiceCommandEvent>:

bool getVoiceCommandEvent(voiceCommandEnum_t *trigger){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	bool retVal = VoiceCommandEvent;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <getVoiceCommandEvent+0x30>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	73fb      	strb	r3, [r7, #15]
	*trigger = voiceCommand;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <getVoiceCommandEvent+0x34>)
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	701a      	strb	r2, [r3, #0]
	VoiceCommandEvent = false;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <getVoiceCommandEvent+0x30>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	voiceCommand = VC_INVALID;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <getVoiceCommandEvent+0x34>)
 80006a2:	2205      	movs	r2, #5
 80006a4:	701a      	strb	r2, [r3, #0]
	return retVal;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	2000002d 	.word	0x2000002d
 80006b8:	20000000 	.word	0x20000000

080006bc <generateTimerOutEvent>:

void generateTimerOutEvent(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	TimerOutEvent = true;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <generateTimerOutEvent+0x14>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	2000002e 	.word	0x2000002e

080006d4 <getTimerOutEvent>:

bool getTimerOutEvent(void){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
	bool retVal = TimerOutEvent;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <getTimerOutEvent+0x20>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
	TimerOutEvent = false;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <getTimerOutEvent+0x20>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	return retVal;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	2000002e 	.word	0x2000002e

080006f8 <generateConnectionEvent>:

void generateConnectionEvent(connectionStatusEnum_t value){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	connectionStatus = value;
 8000702:	4a06      	ldr	r2, [pc, #24]	; (800071c <generateConnectionEvent+0x24>)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	7013      	strb	r3, [r2, #0]
	ConnectionEvent = true;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <generateConnectionEvent+0x28>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000001 	.word	0x20000001
 8000720:	2000002f 	.word	0x2000002f

08000724 <getConnectionEvent>:

bool getConnectionEvent(connectionStatusEnum_t *trigger){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	bool retVal = ConnectionEvent;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <getConnectionEvent+0x30>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	73fb      	strb	r3, [r7, #15]
	*trigger = connectionStatus;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <getConnectionEvent+0x34>)
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	701a      	strb	r2, [r3, #0]
	ConnectionEvent = false;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <getConnectionEvent+0x30>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
	connectionStatus = CONNECTION_STATUS_OFF;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <getConnectionEvent+0x34>)
 8000742:	2203      	movs	r2, #3
 8000744:	701a      	strb	r2, [r3, #0]
	return retVal;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	2000002f 	.word	0x2000002f
 8000758:	20000001 	.word	0x20000001

0800075c <generateSendStatusEvent>:

void generateSendStatusEvent(sendStatusEnum_t value){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	sendStatus = value;
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <generateSendStatusEvent+0x24>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	7013      	strb	r3, [r2, #0]
	SendStatusEvent = true;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <generateSendStatusEvent+0x28>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000002 	.word	0x20000002
 8000784:	20000030 	.word	0x20000030

08000788 <getSendStatusEvent>:

bool getSendStatusEvent(sendStatusEnum_t *trigger){
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	bool retVal = SendStatusEvent;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <getSendStatusEvent+0x30>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	73fb      	strb	r3, [r7, #15]
	*trigger = sendStatus;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <getSendStatusEvent+0x34>)
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	701a      	strb	r2, [r3, #0]
	SendStatusEvent = false;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <getSendStatusEvent+0x30>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	sendStatus = SEND_OFF;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <getSendStatusEvent+0x34>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	701a      	strb	r2, [r3, #0]
	return retVal;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	20000030 	.word	0x20000030
 80007bc:	20000002 	.word	0x20000002

080007c0 <generatePlayStatusEvent>:

void generatePlayStatusEvent(playStatusEvent_t value){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	playStatus = value;
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <generatePlayStatusEvent+0x24>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	7013      	strb	r3, [r2, #0]
	PlayStatusEvent = true;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <generatePlayStatusEvent+0x28>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000003 	.word	0x20000003
 80007e8:	20000031 	.word	0x20000031

080007ec <getPlayStatusEvent>:

bool getPlayStatusEvent(playStatusEvent_t *trigger){
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	bool retVal = PlayStatusEvent;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <getPlayStatusEvent+0x30>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	73fb      	strb	r3, [r7, #15]
	*trigger = playStatus;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <getPlayStatusEvent+0x34>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	701a      	strb	r2, [r3, #0]
	PlayStatusEvent = false;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <getPlayStatusEvent+0x30>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
	playStatus = STOP_PLAY;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <getPlayStatusEvent+0x34>)
 800080a:	2202      	movs	r2, #2
 800080c:	701a      	strb	r2, [r3, #0]
	return retVal;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	20000031 	.word	0x20000031
 8000820:	20000003 	.word	0x20000003

08000824 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000828:	f000 fb9d 	bl	8000f66 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800082c:	f000 f9ba 	bl	8000ba4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000830:	f000 fa4a 	bl	8000cc8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000834:	f000 fa18 	bl	8000c68 <MX_USART2_UART_Init>

	/* USER CODE BEGIN 2 */
	/*
	 * Clear terminal prompt.
	 */
	send_Serial((const uint8_t *)"\033c");
 8000838:	48b4      	ldr	r0, [pc, #720]	; (8000b0c <main+0x2e8>)
 800083a:	f7ff fe4b 	bl	80004d4 <send_Serial>

	/*
	 * 1o teste de transição quando sai do Shutdown e configura o ambiente para READY.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test1: ");
 800083e:	48b4      	ldr	r0, [pc, #720]	; (8000b10 <main+0x2ec>)
 8000840:	f7ff fe48 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000844:	4bb3      	ldr	r3, [pc, #716]	; (8000b14 <main+0x2f0>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
	adpflual_setState(SHUTDOWN);
 800084a:	2000      	movs	r0, #0
 800084c:	f002 ff6a 	bl	8003724 <adpflual_setState>
	generateTurnOnEvent();
 8000850:	f7ff fef6 	bl	8000640 <generateTurnOnEvent>
	adpflual_State_Machine();
 8000854:	f002 ff82 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (SETUP_EXECUTED)){
 8000858:	f002 ff74 	bl	8003744 <adpflual_getState>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d107      	bne.n	8000872 <main+0x4e>
 8000862:	4bac      	ldr	r3, [pc, #688]	; (8000b14 <main+0x2f0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d103      	bne.n	8000872 <main+0x4e>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 800086a:	48ab      	ldr	r0, [pc, #684]	; (8000b18 <main+0x2f4>)
 800086c:	f7ff fe32 	bl	80004d4 <send_Serial>
 8000870:	e002      	b.n	8000878 <main+0x54>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000872:	48aa      	ldr	r0, [pc, #680]	; (8000b1c <main+0x2f8>)
 8000874:	f7ff fe2e 	bl	80004d4 <send_Serial>
	/*
	 * 2o teste de transição quando sai do Ready e entra em Record_id para começar
	 * uma gravação de arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test2: ");
 8000878:	48a9      	ldr	r0, [pc, #676]	; (8000b20 <main+0x2fc>)
 800087a:	f7ff fe2b 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 800087e:	4ba5      	ldr	r3, [pc, #660]	; (8000b14 <main+0x2f0>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 8000884:	2001      	movs	r0, #1
 8000886:	f002 ff4d 	bl	8003724 <adpflual_setState>
	generateVoiceCommandEvent(VC_RECORD_ID);
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff fee4 	bl	8000658 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 8000890:	f002 ff64 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_RECORD_ID && executed_routines == (NEW_FILE_EXECUTED)){
 8000894:	f002 ff56 	bl	8003744 <adpflual_getState>
 8000898:	4603      	mov	r3, r0
 800089a:	2b02      	cmp	r3, #2
 800089c:	d107      	bne.n	80008ae <main+0x8a>
 800089e:	4b9d      	ldr	r3, [pc, #628]	; (8000b14 <main+0x2f0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d103      	bne.n	80008ae <main+0x8a>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 80008a6:	489c      	ldr	r0, [pc, #624]	; (8000b18 <main+0x2f4>)
 80008a8:	f7ff fe14 	bl	80004d4 <send_Serial>
 80008ac:	e002      	b.n	80008b4 <main+0x90>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 80008ae:	489b      	ldr	r0, [pc, #620]	; (8000b1c <main+0x2f8>)
 80008b0:	f7ff fe10 	bl	80004d4 <send_Serial>
	/*
	 * 3o teste de transição quando sai do Ready e entra em Record_Fluency para começar
	 * uma gravação de arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test3: ");
 80008b4:	489b      	ldr	r0, [pc, #620]	; (8000b24 <main+0x300>)
 80008b6:	f7ff fe0d 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80008ba:	4b96      	ldr	r3, [pc, #600]	; (8000b14 <main+0x2f0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f002 ff2f 	bl	8003724 <adpflual_setState>
	generateVoiceCommandEvent(VC_RECORD_FLUENCY);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fec6 	bl	8000658 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 80008cc:	f002 ff46 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_RECORD_FLUENCY && executed_routines == (NEW_FILE_EXECUTED)){
 80008d0:	f002 ff38 	bl	8003744 <adpflual_getState>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d107      	bne.n	80008ea <main+0xc6>
 80008da:	4b8e      	ldr	r3, [pc, #568]	; (8000b14 <main+0x2f0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d103      	bne.n	80008ea <main+0xc6>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 80008e2:	488d      	ldr	r0, [pc, #564]	; (8000b18 <main+0x2f4>)
 80008e4:	f7ff fdf6 	bl	80004d4 <send_Serial>
 80008e8:	e002      	b.n	80008f0 <main+0xcc>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 80008ea:	488c      	ldr	r0, [pc, #560]	; (8000b1c <main+0x2f8>)
 80008ec:	f7ff fdf2 	bl	80004d4 <send_Serial>
	/*
	 * 4o teste de transição quando sai do Ready e entra em Hard_fault para começar
	 * uma gravação de arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test4: ");
 80008f0:	488d      	ldr	r0, [pc, #564]	; (8000b28 <main+0x304>)
 80008f2:	f7ff fdef 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80008f6:	4b87      	ldr	r3, [pc, #540]	; (8000b14 <main+0x2f0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f002 ff11 	bl	8003724 <adpflual_setState>
	generateTimerOutEvent();
 8000902:	f7ff fedb 	bl	80006bc <generateTimerOutEvent>
	adpflual_State_Machine();
 8000906:	f002 ff29 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_HARD_FAULT && executed_routines == (BLINK_RED_LED)){
 800090a:	f002 ff1b 	bl	8003744 <adpflual_getState>
 800090e:	4603      	mov	r3, r0
 8000910:	2b04      	cmp	r3, #4
 8000912:	d107      	bne.n	8000924 <main+0x100>
 8000914:	4b7f      	ldr	r3, [pc, #508]	; (8000b14 <main+0x2f0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b04      	cmp	r3, #4
 800091a:	d103      	bne.n	8000924 <main+0x100>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 800091c:	487e      	ldr	r0, [pc, #504]	; (8000b18 <main+0x2f4>)
 800091e:	f7ff fdd9 	bl	80004d4 <send_Serial>
 8000922:	e002      	b.n	800092a <main+0x106>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000924:	487d      	ldr	r0, [pc, #500]	; (8000b1c <main+0x2f8>)
 8000926:	f7ff fdd5 	bl	80004d4 <send_Serial>
	/*
	 * 5o teste de transição quando sai do Ready e entra em Connect para começar uma gravação
	 * do arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test5: ");
 800092a:	4880      	ldr	r0, [pc, #512]	; (8000b2c <main+0x308>)
 800092c:	f7ff fdd2 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000930:	4b78      	ldr	r3, [pc, #480]	; (8000b14 <main+0x2f0>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 8000936:	2001      	movs	r0, #1
 8000938:	f002 fef4 	bl	8003724 <adpflual_setState>
	generateVoiceCommandEvent(VC_SEND);
 800093c:	2002      	movs	r0, #2
 800093e:	f7ff fe8b 	bl	8000658 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 8000942:	f002 ff0b 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_CONNECT && executed_routines == (SEEK_WIFI_NETWORK)){
 8000946:	f002 fefd 	bl	8003744 <adpflual_getState>
 800094a:	4603      	mov	r3, r0
 800094c:	2b05      	cmp	r3, #5
 800094e:	d107      	bne.n	8000960 <main+0x13c>
 8000950:	4b70      	ldr	r3, [pc, #448]	; (8000b14 <main+0x2f0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b08      	cmp	r3, #8
 8000956:	d103      	bne.n	8000960 <main+0x13c>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000958:	486f      	ldr	r0, [pc, #444]	; (8000b18 <main+0x2f4>)
 800095a:	f7ff fdbb 	bl	80004d4 <send_Serial>
 800095e:	e002      	b.n	8000966 <main+0x142>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000960:	486e      	ldr	r0, [pc, #440]	; (8000b1c <main+0x2f8>)
 8000962:	f7ff fdb7 	bl	80004d4 <send_Serial>
	/*
	 * 6o teste de transição quando sai do Ready e entra em PLay para começar uma reprodução
	 * do arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test6: ");
 8000966:	4872      	ldr	r0, [pc, #456]	; (8000b30 <main+0x30c>)
 8000968:	f7ff fdb4 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 800096c:	4b69      	ldr	r3, [pc, #420]	; (8000b14 <main+0x2f0>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_READY);
 8000972:	2001      	movs	r0, #1
 8000974:	f002 fed6 	bl	8003724 <adpflual_setState>
	generateVoiceCommandEvent(VC_PLAY_RECORDED);
 8000978:	2003      	movs	r0, #3
 800097a:	f7ff fe6d 	bl	8000658 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 800097e:	f002 feed 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_PLAY && executed_routines == (PLAY_LAST_SOUND)){
 8000982:	f002 fedf 	bl	8003744 <adpflual_getState>
 8000986:	4603      	mov	r3, r0
 8000988:	2b07      	cmp	r3, #7
 800098a:	d107      	bne.n	800099c <main+0x178>
 800098c:	4b61      	ldr	r3, [pc, #388]	; (8000b14 <main+0x2f0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b10      	cmp	r3, #16
 8000992:	d103      	bne.n	800099c <main+0x178>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000994:	4860      	ldr	r0, [pc, #384]	; (8000b18 <main+0x2f4>)
 8000996:	f7ff fd9d 	bl	80004d4 <send_Serial>
 800099a:	e002      	b.n	80009a2 <main+0x17e>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 800099c:	485f      	ldr	r0, [pc, #380]	; (8000b1c <main+0x2f8>)
 800099e:	f7ff fd99 	bl	80004d4 <send_Serial>
	/*
	 * 7o teste de transição quando sai do Record_ID e entra em Ready para finalizar a gravação
	 * do arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test7: ");
 80009a2:	4864      	ldr	r0, [pc, #400]	; (8000b34 <main+0x310>)
 80009a4:	f7ff fd96 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80009a8:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <main+0x2f0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_RECORD_ID);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f002 feb8 	bl	8003724 <adpflual_setState>
	generateVoiceCommandEvent(VC_STOP_RECORD);
 80009b4:	2004      	movs	r0, #4
 80009b6:	f7ff fe4f 	bl	8000658 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 80009ba:	f002 fecf 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (CLOSE_FILE_RECORDED)){
 80009be:	f002 fec1 	bl	8003744 <adpflual_getState>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d107      	bne.n	80009d8 <main+0x1b4>
 80009c8:	4b52      	ldr	r3, [pc, #328]	; (8000b14 <main+0x2f0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b20      	cmp	r3, #32
 80009ce:	d103      	bne.n	80009d8 <main+0x1b4>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 80009d0:	4851      	ldr	r0, [pc, #324]	; (8000b18 <main+0x2f4>)
 80009d2:	f7ff fd7f 	bl	80004d4 <send_Serial>
 80009d6:	e002      	b.n	80009de <main+0x1ba>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 80009d8:	4850      	ldr	r0, [pc, #320]	; (8000b1c <main+0x2f8>)
 80009da:	f7ff fd7b 	bl	80004d4 <send_Serial>
	 * 8o teste de transição quando sai do Record Fluency Sound
	 * e entra em Ready para finalizar a gravação de fluência no
	 * arquivo no cartão SD.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test8: ");
 80009de:	4856      	ldr	r0, [pc, #344]	; (8000b38 <main+0x314>)
 80009e0:	f7ff fd78 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 80009e4:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <main+0x2f0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_RECORD_FLUENCY);
 80009ea:	2003      	movs	r0, #3
 80009ec:	f002 fe9a 	bl	8003724 <adpflual_setState>
	generateVoiceCommandEvent(VC_STOP_RECORD);
 80009f0:	2004      	movs	r0, #4
 80009f2:	f7ff fe31 	bl	8000658 <generateVoiceCommandEvent>
	adpflual_State_Machine();
 80009f6:	f002 feb1 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (CLOSE_FILE_RECORDED)){
 80009fa:	f002 fea3 	bl	8003744 <adpflual_getState>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d107      	bne.n	8000a14 <main+0x1f0>
 8000a04:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <main+0x2f0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b20      	cmp	r3, #32
 8000a0a:	d103      	bne.n	8000a14 <main+0x1f0>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000a0c:	4842      	ldr	r0, [pc, #264]	; (8000b18 <main+0x2f4>)
 8000a0e:	f7ff fd61 	bl	80004d4 <send_Serial>
 8000a12:	e002      	b.n	8000a1a <main+0x1f6>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000a14:	4841      	ldr	r0, [pc, #260]	; (8000b1c <main+0x2f8>)
 8000a16:	f7ff fd5d 	bl	80004d4 <send_Serial>
	/*
	 * 9o teste de transição quando sai do Connect e entra em SEND
	 * para enviar os arquivos de áudio para o servidor.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test9: ");
 8000a1a:	4848      	ldr	r0, [pc, #288]	; (8000b3c <main+0x318>)
 8000a1c:	f7ff fd5a 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000a20:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <main+0x2f0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_CONNECT);
 8000a26:	2005      	movs	r0, #5
 8000a28:	f002 fe7c 	bl	8003724 <adpflual_setState>
	generateConnectionEvent(CONNECTION_STATUS_SUCCESS);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fe63 	bl	80006f8 <generateConnectionEvent>
	adpflual_State_Machine();
 8000a32:	f002 fe93 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_SEND && executed_routines == (START_SEND)){
 8000a36:	f002 fe85 	bl	8003744 <adpflual_getState>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b06      	cmp	r3, #6
 8000a3e:	d107      	bne.n	8000a50 <main+0x22c>
 8000a40:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <main+0x2f0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b40      	cmp	r3, #64	; 0x40
 8000a46:	d103      	bne.n	8000a50 <main+0x22c>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000a48:	4833      	ldr	r0, [pc, #204]	; (8000b18 <main+0x2f4>)
 8000a4a:	f7ff fd43 	bl	80004d4 <send_Serial>
 8000a4e:	e002      	b.n	8000a56 <main+0x232>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000a50:	4832      	ldr	r0, [pc, #200]	; (8000b1c <main+0x2f8>)
 8000a52:	f7ff fd3f 	bl	80004d4 <send_Serial>
	/*
	 * 10o teste de transição quando sai do Connect e volta para READY
	 * para enviar os arquivos de áudio para o servidor.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test10: ");
 8000a56:	483a      	ldr	r0, [pc, #232]	; (8000b40 <main+0x31c>)
 8000a58:	f7ff fd3c 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <main+0x2f0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_CONNECT);
 8000a62:	2005      	movs	r0, #5
 8000a64:	f002 fe5e 	bl	8003724 <adpflual_setState>
	generateConnectionEvent(CONNECTION_STATUS_FAIL);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fe45 	bl	80006f8 <generateConnectionEvent>
	adpflual_State_Machine();
 8000a6e:	f002 fe75 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (CONNECTION_FAIL_ALERT)){
 8000a72:	f002 fe67 	bl	8003744 <adpflual_getState>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d108      	bne.n	8000a8e <main+0x26a>
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <main+0x2f0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a84:	d103      	bne.n	8000a8e <main+0x26a>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000a86:	4824      	ldr	r0, [pc, #144]	; (8000b18 <main+0x2f4>)
 8000a88:	f7ff fd24 	bl	80004d4 <send_Serial>
 8000a8c:	e002      	b.n	8000a94 <main+0x270>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000a8e:	4823      	ldr	r0, [pc, #140]	; (8000b1c <main+0x2f8>)
 8000a90:	f7ff fd20 	bl	80004d4 <send_Serial>
	/*
	 * 11o teste de transição quando sai do SEND e volta para READY
	 * informando o sucesso do envio dos arquivos de áudio para o servidor.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test11: ");
 8000a94:	482b      	ldr	r0, [pc, #172]	; (8000b44 <main+0x320>)
 8000a96:	f7ff fd1d 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <main+0x2f0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_SEND);
 8000aa0:	2006      	movs	r0, #6
 8000aa2:	f002 fe3f 	bl	8003724 <adpflual_setState>
	generateSendStatusEvent(SEND_SUCCESS);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fe58 	bl	800075c <generateSendStatusEvent>
	adpflual_State_Machine();
 8000aac:	f002 fe56 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (SEND_MESSAGE_ALERT)){
 8000ab0:	f002 fe48 	bl	8003744 <adpflual_getState>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d108      	bne.n	8000acc <main+0x2a8>
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <main+0x2f0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ac2:	d103      	bne.n	8000acc <main+0x2a8>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000ac4:	4814      	ldr	r0, [pc, #80]	; (8000b18 <main+0x2f4>)
 8000ac6:	f7ff fd05 	bl	80004d4 <send_Serial>
 8000aca:	e002      	b.n	8000ad2 <main+0x2ae>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <main+0x2f8>)
 8000ace:	f7ff fd01 	bl	80004d4 <send_Serial>
	/*
	 * 12o teste de transição quando sai do SEND e volta para READY
	 * informando a falha de envio dos arquivos de áudio para o servidor.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test12: ");
 8000ad2:	481d      	ldr	r0, [pc, #116]	; (8000b48 <main+0x324>)
 8000ad4:	f7ff fcfe 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <main+0x2f0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_SEND);
 8000ade:	2006      	movs	r0, #6
 8000ae0:	f002 fe20 	bl	8003724 <adpflual_setState>
	generateSendStatusEvent(SEND_FAIL);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe39 	bl	800075c <generateSendStatusEvent>
	adpflual_State_Machine();
 8000aea:	f002 fe37 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (SEND_MESSAGE_ALERT)){
 8000aee:	f002 fe29 	bl	8003744 <adpflual_getState>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d129      	bne.n	8000b4c <main+0x328>
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <main+0x2f0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b00:	d124      	bne.n	8000b4c <main+0x328>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <main+0x2f4>)
 8000b04:	f7ff fce6 	bl	80004d4 <send_Serial>
 8000b08:	e023      	b.n	8000b52 <main+0x32e>
 8000b0a:	bf00      	nop
 8000b0c:	08003968 	.word	0x08003968
 8000b10:	0800396c 	.word	0x0800396c
 8000b14:	20000034 	.word	0x20000034
 8000b18:	08003980 	.word	0x08003980
 8000b1c:	080039a4 	.word	0x080039a4
 8000b20:	080039c8 	.word	0x080039c8
 8000b24:	080039dc 	.word	0x080039dc
 8000b28:	080039f0 	.word	0x080039f0
 8000b2c:	08003a04 	.word	0x08003a04
 8000b30:	08003a18 	.word	0x08003a18
 8000b34:	08003a2c 	.word	0x08003a2c
 8000b38:	08003a40 	.word	0x08003a40
 8000b3c:	08003a54 	.word	0x08003a54
 8000b40:	08003a68 	.word	0x08003a68
 8000b44:	08003a7c 	.word	0x08003a7c
 8000b48:	08003a90 	.word	0x08003a90
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <main+0x370>)
 8000b4e:	f7ff fcc1 	bl	80004d4 <send_Serial>
	/*
	 * 13o teste de transição quando sai do PLAY e volta para READY
	 * finalizando a reprodução do áudio.
	 *
	 * */
	send_Serial((const uint8_t *)"Transition Test13: ");
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <main+0x374>)
 8000b54:	f7ff fcbe 	bl	80004d4 <send_Serial>
	executed_routines = 0;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <main+0x378>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
	adpflual_setState(SM_PLAY);
 8000b5e:	2007      	movs	r0, #7
 8000b60:	f002 fde0 	bl	8003724 <adpflual_setState>
	generatePlayStatusEvent(STOP_PLAY);
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff fe2b 	bl	80007c0 <generatePlayStatusEvent>
	adpflual_State_Machine();
 8000b6a:	f002 fdf7 	bl	800375c <adpflual_State_Machine>

	if(adpflual_getState()== SM_READY && executed_routines == (REBOOT_CAPTURE_FUNCTION)){
 8000b6e:	f002 fde9 	bl	8003744 <adpflual_getState>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d108      	bne.n	8000b8a <main+0x366>
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <main+0x378>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b80:	d103      	bne.n	8000b8a <main+0x366>
		//Sucesso no teste.
		send_Serial(SUCCESS_TEXT);
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <main+0x37c>)
 8000b84:	f7ff fca6 	bl	80004d4 <send_Serial>
 8000b88:	e002      	b.n	8000b90 <main+0x36c>
	}
	else {
		//Falha no teste.
		send_Serial(FAIL_TEXT);
 8000b8a:	4802      	ldr	r0, [pc, #8]	; (8000b94 <main+0x370>)
 8000b8c:	f7ff fca2 	bl	80004d4 <send_Serial>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000b90:	e7fe      	b.n	8000b90 <main+0x36c>
 8000b92:	bf00      	nop
 8000b94:	080039a4 	.word	0x080039a4
 8000b98:	08003aa4 	.word	0x08003aa4
 8000b9c:	20000034 	.word	0x20000034
 8000ba0:	08003980 	.word	0x08003980

08000ba4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2244      	movs	r2, #68	; 0x44
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fec4 	bl	8003940 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bca:	f000 fd59 	bl	8001680 <HAL_PWREx_ControlVoltageScaling>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000bd4:	f000 f89c 	bl	8000d10 <Error_Handler>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000bd8:	f000 fd34 	bl	8001644 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <SystemClock_Config+0xc0>)
 8000bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000be2:	4a20      	ldr	r2, [pc, #128]	; (8000c64 <SystemClock_Config+0xc0>)
 8000be4:	f023 0318 	bic.w	r3, r3, #24
 8000be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bec:	2314      	movs	r3, #20
 8000bee:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bfc:	2360      	movs	r3, #96	; 0x60
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	2302      	movs	r3, #2
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c04:	2301      	movs	r3, #1
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c10:	2307      	movs	r3, #7
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fd83 	bl	800172c <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000c2c:	f000 f870 	bl	8000d10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2303      	movs	r3, #3
 8000c36:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	2101      	movs	r1, #1
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 f98f 	bl	8001f6c <HAL_RCC_ClockConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000c54:	f000 f85c 	bl	8000d10 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000c58:	f001 fd82 	bl	8002760 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c5c:	bf00      	nop
 8000c5e:	3758      	adds	r7, #88	; 0x58
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000

08000c68 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <MX_USART2_UART_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000cac:	f001 fe5a 	bl	8002964 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000cb6:	f000 f82b 	bl	8000d10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000003c 	.word	0x2000003c
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_GPIO_Init+0x44>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <MX_GPIO_Init+0x44>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_GPIO_Init+0x44>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_GPIO_Init+0x44>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <MX_GPIO_Init+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_GPIO_Init+0x44>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x44>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09e      	sub	sp, #120	; 0x78
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2254      	movs	r2, #84	; 0x54
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fddb 	bl	8003940 <memset>
  if(huart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <HAL_UART_MspInit+0xdc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d150      	bne.n	8000e36 <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fae9 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff ffb0 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_UART_MspInit+0xe0>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <HAL_UART_MspInit+0xe0>)
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dba:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_UART_MspInit+0xe0>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_UART_MspInit+0xe0>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_UART_MspInit+0xe0>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_UART_MspInit+0xe0>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000de0:	2304      	movs	r3, #4
 8000de2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df0:	2307      	movs	r3, #7
 8000df2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f000 fab7 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e14:	2303      	movs	r3, #3
 8000e16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f000 faa5 	bl	8001370 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2026      	movs	r0, #38	; 0x26
 8000e2c:	f000 f9eb 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e30:	2026      	movs	r0, #38	; 0x26
 8000e32:	f000 fa04 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3778      	adds	r7, #120	; 0x78
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40021000 	.word	0x40021000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f8bc 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <USART2_IRQHandler+0x10>)
 8000ea2:	f001 fe41 	bl	8002b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000003c 	.word	0x2000003c

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <SystemInit+0x5c>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <SystemInit+0x5c>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <SystemInit+0x60>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <SystemInit+0x60>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <SystemInit+0x60>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <SystemInit+0x60>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <SystemInit+0x60>)
 8000edc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ee0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <SystemInit+0x60>)
 8000ee8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <SystemInit+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <SystemInit+0x60>)
 8000ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SystemInit+0x60>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	40021000 	.word	0x40021000

08000f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f18:	f7ff ffca 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f1e:	e003      	b.n	8000f28 <LoopCopyDataInit>

08000f20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f26:	3104      	adds	r1, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f28:	480a      	ldr	r0, [pc, #40]	; (8000f54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f30:	d3f6      	bcc.n	8000f20 <CopyDataInit>
	ldr	r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f34:	e002      	b.n	8000f3c <LoopFillZerobss>

08000f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f38:	f842 3b04 	str.w	r3, [r2], #4

08000f3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <LoopForever+0x16>)
	cmp	r2, r3
 8000f3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f40:	d3f9      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f002 fcd9 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f46:	f7ff fc6d 	bl	8000824 <main>

08000f4a <LoopForever>:

LoopForever:
    b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000f50:	08003b10 	.word	0x08003b10
	ldr	r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f58:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000f5c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000f60:	200000c4 	.word	0x200000c4

08000f64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_IRQHandler>

08000f66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f93d 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f80e 	bl	8000f98 <HAL_InitTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f88:	f7ff fec8 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_InitTick+0x6c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d023      	beq.n	8000ff4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x70>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f949 	bl	800125a <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10f      	bne.n	8000fee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d809      	bhi.n	8000fe8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f913 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_InitTick+0x74>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e004      	b.n	8000ff8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e001      	b.n	8000ff8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000000c 	.word	0x2000000c
 8001008:	20000004 	.word	0x20000004
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000000c 	.word	0x2000000c
 8001034:	200000c0 	.word	0x200000c0

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200000c0 	.word	0x200000c0

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d008      	beq.n	800129c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2204      	movs	r2, #4
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e022      	b.n	80012e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020e 	bic.w	r2, r2, #14
 80012aa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f003 021c 	and.w	r2, r3, #28
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2101      	movs	r1, #1
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d005      	beq.n	8001312 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e029      	b.n	8001366 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020e 	bic.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 021c 	and.w	r2, r3, #28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    }
  }
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e148      	b.n	8001612 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 813a 	beq.w	800160c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d00b      	beq.n	80013b8 <HAL_GPIO_Init+0x48>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ac:	2b11      	cmp	r3, #17
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b12      	cmp	r3, #18
 80013b6:	d130      	bne.n	800141a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ee:	2201      	movs	r2, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 0201 	and.w	r2, r3, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0xea>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b12      	cmp	r3, #18
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	6939      	ldr	r1, [r7, #16]
 800149e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0203 	and.w	r2, r3, #3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8094 	beq.w	800160c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b52      	ldr	r3, [pc, #328]	; (8001630 <HAL_GPIO_Init+0x2c0>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e8:	4a51      	ldr	r2, [pc, #324]	; (8001630 <HAL_GPIO_Init+0x2c0>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6613      	str	r3, [r2, #96]	; 0x60
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_GPIO_Init+0x2c0>)
 80014f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <HAL_GPIO_Init+0x2c4>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1d4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a43      	ldr	r2, [pc, #268]	; (8001638 <HAL_GPIO_Init+0x2c8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1d0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a42      	ldr	r2, [pc, #264]	; (800163c <HAL_GPIO_Init+0x2cc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1cc>
 8001538:	2302      	movs	r3, #2
 800153a:	e004      	b.n	8001546 <HAL_GPIO_Init+0x1d6>
 800153c:	2307      	movs	r3, #7
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x1d6>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_GPIO_Init+0x1d6>
 8001544:	2300      	movs	r3, #0
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	f002 0203 	and.w	r2, r2, #3
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	4093      	lsls	r3, r2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001556:	4937      	ldr	r1, [pc, #220]	; (8001634 <HAL_GPIO_Init+0x2c4>)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	f47f aeaf 	bne.w	8001380 <HAL_GPIO_Init+0x10>
  }
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	48000400 	.word	0x48000400
 800163c:	48000800 	.word	0x48000800
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40007000 	.word	0x40007000

08001664 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_PWREx_GetVoltageRange+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000

08001680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168e:	d130      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169c:	d038      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2232      	movs	r2, #50	; 0x32
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c4:	e002      	b.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d8:	d102      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f2      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ec:	d110      	bne.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e00f      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d007      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000
 8001724:	20000004 	.word	0x20000004
 8001728:	431bde83 	.word	0x431bde83

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	f000 bc11 	b.w	8001f62 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001740:	4ba0      	ldr	r3, [pc, #640]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174a:	4b9e      	ldr	r3, [pc, #632]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80e4 	beq.w	800192a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_RCC_OscConfig+0x4c>
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	f040 808b 	bne.w	8001886 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b01      	cmp	r3, #1
 8001774:	f040 8087 	bne.w	8001886 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x64>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e3e8      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_RCC_OscConfig+0x7e>
 80017a0:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a8:	e005      	b.n	80017b6 <HAL_RCC_OscConfig+0x8a>
 80017aa:	4b86      	ldr	r3, [pc, #536]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d223      	bcs.n	8001802 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fd7a 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e3c9      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ce:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7c      	ldr	r2, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4977      	ldr	r1, [pc, #476]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ec:	4b75      	ldr	r3, [pc, #468]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	4972      	ldr	r1, [pc, #456]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	e025      	b.n	800184e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001802:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6f      	ldr	r2, [pc, #444]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	496a      	ldr	r1, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001820:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	4965      	ldr	r1, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fd3a 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e389      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184e:	f000 fc6f 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	495a      	ldr	r1, [pc, #360]	; (80019c8 <HAL_RCC_OscConfig+0x29c>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x2a0>)
 800186c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800186e:	4b58      	ldr	r3, [pc, #352]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb90 	bl	8000f98 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d052      	beq.n	8001928 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	e36d      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d032      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800188e:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189a:	f7ff fbcd 	bl	8001038 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a2:	f7ff fbc9 	bl	8001038 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e356      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c0:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3f      	ldr	r2, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	493a      	ldr	r1, [pc, #232]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e01a      	b.n	800192a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb9a 	bl	8001038 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001908:	f7ff fb96 	bl	8001038 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e323      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1dc>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d073      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x21c>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d10e      	bne.n	8001960 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d063      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d15f      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e300      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x24c>
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0x288>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x270>
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x288>
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb3c 	bl	8001038 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	e010      	b.n	80019e6 <HAL_RCC_OscConfig+0x2ba>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08003ab8 	.word	0x08003ab8
 80019cc:	20000004 	.word	0x20000004
 80019d0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fb30 	bl	8001038 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e2bd      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e6:	4baf      	ldr	r3, [pc, #700]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2a8>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb20 	bl	8001038 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fb1c 	bl	8001038 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e2a9      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0e:	4ba5      	ldr	r3, [pc, #660]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x2d0>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d060      	beq.n	8001aec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x310>
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d119      	bne.n	8001a6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d116      	bne.n	8001a6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3c:	4b99      	ldr	r3, [pc, #612]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x328>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e286      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b93      	ldr	r3, [pc, #588]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	4990      	ldr	r1, [pc, #576]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a68:	e040      	b.n	8001aec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d023      	beq.n	8001aba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a72:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a8b      	ldr	r2, [pc, #556]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fadb 	bl	8001038 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff fad7 	bl	8001038 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e264      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a98:	4b82      	ldr	r3, [pc, #520]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	497c      	ldr	r1, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e018      	b.n	8001aec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a79      	ldr	r2, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fab7 	bl	8001038 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fab3 	bl	8001038 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e240      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae0:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d03c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b06:	4a67      	ldr	r2, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff fa92 	bl	8001038 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa8e 	bl	8001038 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e21b      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ef      	beq.n	8001b18 <HAL_RCC_OscConfig+0x3ec>
 8001b38:	e01b      	b.n	8001b72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa75 	bl	8001038 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff fa71 	bl	8001038 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1fe      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a6 	beq.w	8001ccc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b84:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d118      	bne.n	8001bea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fa38 	bl	8001038 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff fa34 	bl	8001038 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1c1      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4d8>
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c02:	e024      	b.n	8001c4e <HAL_RCC_OscConfig+0x522>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d110      	bne.n	8001c2e <HAL_RCC_OscConfig+0x502>
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	4a24      	ldr	r2, [pc, #144]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2c:	e00f      	b.n	8001c4e <HAL_RCC_OscConfig+0x522>
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c46:	f023 0304 	bic.w	r3, r3, #4
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d016      	beq.n	8001c84 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff f9ef 	bl	8001038 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f9eb 	bl	8001038 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e176      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ed      	beq.n	8001c5e <HAL_RCC_OscConfig+0x532>
 8001c82:	e01a      	b.n	8001cba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f9d8 	bl	8001038 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c8a:	e00f      	b.n	8001cac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f9d4 	bl	8001038 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d906      	bls.n	8001cac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e15f      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cac:	4baa      	ldr	r3, [pc, #680]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e8      	bne.n	8001c8c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	4aa4      	ldr	r2, [pc, #656]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ce0:	4b9d      	ldr	r3, [pc, #628]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce6:	4a9c      	ldr	r2, [pc, #624]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f9a2 	bl	8001038 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf8:	f7ff f99e 	bl	8001038 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e12b      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d0a:	4b93      	ldr	r3, [pc, #588]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ef      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x5cc>
 8001d18:	e01b      	b.n	8001d52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d1a:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d20:	4a8d      	ldr	r2, [pc, #564]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f985 	bl	8001038 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d32:	f7ff f981 	bl	8001038 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e10e      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ef      	bne.n	8001d32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8102 	beq.w	8001f60 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	f040 80c5 	bne.w	8001ef0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d66:	4b7c      	ldr	r3, [pc, #496]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0203 	and.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d12c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	3b01      	subs	r3, #1
 8001d86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d123      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d113      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	3b01      	subs	r3, #1
 8001dba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d109      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d067      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d062      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dda:	4b5f      	ldr	r3, [pc, #380]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0bb      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df6:	f7ff f91f 	bl	8001038 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff f91b 	bl	8001038 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0a8      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <HAL_RCC_OscConfig+0x830>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	4311      	orrs	r1, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e36:	0212      	lsls	r2, r2, #8
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0552      	lsls	r2, r2, #21
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e4a:	0852      	lsrs	r2, r2, #1
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	0652      	lsls	r2, r2, #25
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e56:	06d2      	lsls	r2, r2, #27
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	493f      	ldr	r1, [pc, #252]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e60:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a3c      	ldr	r2, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e78:	f7ff f8de 	bl	8001038 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f8da 	bl	8001038 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e067      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9e:	e05f      	b.n	8001f60 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e05e      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d157      	bne.n	8001f60 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec8:	f7ff f8b6 	bl	8001038 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e03f      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x7a4>
 8001eee:	e037      	b.n	8001f60 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d02d      	beq.n	8001f52 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f00:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001f14:	f023 0303 	bic.w	r3, r3, #3
 8001f18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001f20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f885 	bl	8001038 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff f881 	bl	8001038 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e00e      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_RCC_OscConfig+0x82c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x806>
 8001f50:	e006      	b.n	8001f60 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e005      	b.n	8001f62 <HAL_RCC_OscConfig+0x836>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0c8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4961      	ldr	r1, [pc, #388]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b5f      	ldr	r3, [pc, #380]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b0      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d04c      	beq.n	8002056 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc4:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d121      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e09e      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d115      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e092      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e086      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e07e      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 0203 	bic.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	493f      	ldr	r1, [pc, #252]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002026:	f7ff f807 	bl	8001038 <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202c:	e00a      	b.n	8002044 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f7ff f803 	bl	8001038 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e066      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 020c 	and.w	r2, r3, #12
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	429a      	cmp	r2, r3
 8002054:	d1eb      	bne.n	800202e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	492c      	ldr	r1, [pc, #176]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d210      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4924      	ldr	r1, [pc, #144]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e036      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4918      	ldr	r1, [pc, #96]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4910      	ldr	r1, [pc, #64]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e2:	f000 f825 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	490c      	ldr	r1, [pc, #48]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	5ccb      	ldrb	r3, [r1, r3]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ff46 	bl	8000f98 <HAL_InitTick>
 800210c:	4603      	mov	r3, r0
 800210e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002110:	7afb      	ldrb	r3, [r7, #11]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	08003ab8 	.word	0x08003ab8
 8002128:	20000004 	.word	0x20000004
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x34>
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d121      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d11e      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800218c:	4a2b      	ldr	r2, [pc, #172]	; (800223c <HAL_RCC_GetSysClockFreq+0x10c>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d102      	bne.n	80021ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_GetSysClockFreq+0x110>)
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e004      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_RCC_GetSysClockFreq+0x114>)
 80021b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d134      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d003      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0xac>
 80021d4:	e005      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_GetSysClockFreq+0x110>)
 80021d8:	617b      	str	r3, [r7, #20]
      break;
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_GetSysClockFreq+0x114>)
 80021de:	617b      	str	r3, [r7, #20]
      break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	617b      	str	r3, [r7, #20]
      break;
 80021e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	3301      	adds	r3, #1
 80021f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	fb02 f203 	mul.w	r2, r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	0e5b      	lsrs	r3, r3, #25
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	3301      	adds	r3, #1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002228:	69bb      	ldr	r3, [r7, #24]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	08003ad0 	.word	0x08003ad0
 8002240:	00f42400 	.word	0x00f42400
 8002244:	007a1200 	.word	0x007a1200

08002248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4904      	ldr	r1, [pc, #16]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	08003ac8 	.word	0x08003ac8

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002290:	f7ff ffda 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4904      	ldr	r1, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08003ac8 	.word	0x08003ac8

080022b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022d0:	f7ff f9c8 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 80022d4:	6178      	str	r0, [r7, #20]
 80022d6:	e014      	b.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	4a24      	ldr	r2, [pc, #144]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	; 0x58
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f9b8 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002308:	d10b      	bne.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d919      	bls.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2ba0      	cmp	r3, #160	; 0xa0
 8002314:	d902      	bls.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002316:	2302      	movs	r3, #2
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e013      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e010      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d902      	bls.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002328:	2303      	movs	r3, #3
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e00a      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d102      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002334:	2302      	movs	r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e004      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b70      	cmp	r3, #112	; 0x70
 800233e:	d101      	bne.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 0207 	bic.w	r2, r3, #7
 800234c:	4909      	ldr	r1, [pc, #36]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002380:	2300      	movs	r3, #0
 8002382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002384:	2300      	movs	r3, #0
 8002386:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002390:	2b00      	cmp	r3, #0
 8002392:	d031      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800239c:	d01a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800239e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a2:	d814      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ac:	d10f      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023ae:	4bac      	ldr	r3, [pc, #688]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4aab      	ldr	r2, [pc, #684]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ba:	e00c      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f9dc 	bl	8002780 <RCCEx_PLLSAI1_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023cc:	e003      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	74fb      	strb	r3, [r7, #19]
      break;
 80023d2:	e000      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80023d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023dc:	4ba0      	ldr	r3, [pc, #640]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	499d      	ldr	r1, [pc, #628]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023f2:	e001      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8099 	beq.w	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800240a:	4b95      	ldr	r3, [pc, #596]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	4a8e      	ldr	r2, [pc, #568]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	6593      	str	r3, [r2, #88]	; 0x58
 800242c:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002438:	2301      	movs	r3, #1
 800243a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243c:	4b89      	ldr	r3, [pc, #548]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a88      	ldr	r2, [pc, #544]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002448:	f7fe fdf6 	bl	8001038 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244e:	e009      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe fdf2 	bl	8001038 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d902      	bls.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	74fb      	strb	r3, [r7, #19]
        break;
 8002462:	e005      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002464:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ef      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d155      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002476:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002480:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01e      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	429a      	cmp	r2, r3
 8002490:	d019      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ae:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	4a6a      	ldr	r2, [pc, #424]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024be:	4a68      	ldr	r2, [pc, #416]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fdb2 	bl	8001038 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d6:	e00b      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fe fdae 	bl	8001038 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d902      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	74fb      	strb	r3, [r7, #19]
            break;
 80024ee:	e006      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f0:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ec      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002512:	4953      	ldr	r1, [pc, #332]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800251a:	e004      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
 8002520:	e001      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002526:	7c7b      	ldrb	r3, [r7, #17]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d105      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252c:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4943      	ldr	r1, [pc, #268]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f023 020c 	bic.w	r2, r3, #12
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	493a      	ldr	r1, [pc, #232]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	4932      	ldr	r1, [pc, #200]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	4929      	ldr	r1, [pc, #164]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	4921      	ldr	r1, [pc, #132]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4910      	ldr	r1, [pc, #64]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d02c      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002650:	d10a      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002652:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a02      	ldr	r2, [pc, #8]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265c:	60d3      	str	r3, [r2, #12]
 800265e:	e015      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002670:	d10c      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f881 	bl	8002780 <RCCEx_PLLSAI1_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d028      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	492d      	ldr	r1, [pc, #180]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b8:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a27      	ldr	r2, [pc, #156]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c2:	60d3      	str	r3, [r2, #12]
 80026c4:	e011      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ce:	d10c      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	2101      	movs	r1, #1
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f852 	bl	8002780 <RCCEx_PLLSAI1_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01c      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002704:	4915      	ldr	r1, [pc, #84]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002714:	d10c      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f82f 	bl	8002780 <RCCEx_PLLSAI1_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	4904      	ldr	r1, [pc, #16]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002752:	7cbb      	ldrb	r3, [r7, #18]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800278e:	4b74      	ldr	r3, [pc, #464]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d018      	beq.n	80027cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800279a:	4b71      	ldr	r3, [pc, #452]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0203 	and.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d10d      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
       ||
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027b2:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
       ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d047      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e044      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d018      	beq.n	8002806 <RCCEx_PLLSAI1_Config+0x86>
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d825      	bhi.n	8002824 <RCCEx_PLLSAI1_Config+0xa4>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d002      	beq.n	80027e2 <RCCEx_PLLSAI1_Config+0x62>
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d009      	beq.n	80027f4 <RCCEx_PLLSAI1_Config+0x74>
 80027e0:	e020      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11d      	bne.n	800282a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f2:	e01a      	b.n	800282a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f4:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002804:	e013      	b.n	800282e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002806:	4b56      	ldr	r3, [pc, #344]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002812:	4b53      	ldr	r3, [pc, #332]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002822:	e006      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	e004      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002832:	bf00      	nop
    }

    if(status == HAL_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800283a:	4b49      	ldr	r3, [pc, #292]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	430b      	orrs	r3, r1
 8002850:	4943      	ldr	r1, [pc, #268]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d17c      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe fbe6 	bl	8001038 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800286e:	e009      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002870:	f7fe fbe2 	bl	8001038 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	73fb      	strb	r3, [r7, #15]
        break;
 8002882:	e005      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ef      	bne.n	8002870 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d15f      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d110      	bne.n	80028be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	0211      	lsls	r1, r2, #8
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68d2      	ldr	r2, [r2, #12]
 80028b2:	06d2      	lsls	r2, r2, #27
 80028b4:	430a      	orrs	r2, r1
 80028b6:	492a      	ldr	r1, [pc, #168]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	610b      	str	r3, [r1, #16]
 80028bc:	e027      	b.n	800290e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d112      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6912      	ldr	r2, [r2, #16]
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0552      	lsls	r2, r2, #21
 80028e0:	430a      	orrs	r2, r1
 80028e2:	491f      	ldr	r1, [pc, #124]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	610b      	str	r3, [r1, #16]
 80028e8:	e011      	b.n	800290e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	0211      	lsls	r1, r2, #8
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6952      	ldr	r2, [r2, #20]
 8002900:	0852      	lsrs	r2, r2, #1
 8002902:	3a01      	subs	r2, #1
 8002904:	0652      	lsls	r2, r2, #25
 8002906:	430a      	orrs	r2, r1
 8002908:	4915      	ldr	r1, [pc, #84]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002918:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe fb8d 	bl	8001038 <HAL_GetTick>
 800291e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002920:	e009      	b.n	8002936 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002922:	f7fe fb89 	bl	8001038 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d902      	bls.n	8002936 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	73fb      	strb	r3, [r7, #15]
          break;
 8002934:	e005      	b.n	8002942 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ef      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002952:	4313      	orrs	r3, r2
 8002954:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e040      	b.n	80029f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe f9ec 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	; 0x24
 8002990:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fae2 	bl	8002f6c <UART_SetConfig>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e022      	b.n	80029f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fce2 	bl	8003384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fd69 	bl	80034c8 <UART_CheckIdleState>
 80029f6:	4603      	mov	r3, r0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	f040 8082 	bne.w	8002b1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_UART_Transmit+0x26>
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07a      	b.n	8002b20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_UART_Transmit+0x38>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e073      	b.n	8002b20 <HAL_UART_Transmit+0x120>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2221      	movs	r2, #33	; 0x21
 8002a4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe faf3 	bl	8001038 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6c:	d108      	bne.n	8002a80 <HAL_UART_Transmit+0x80>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e003      	b.n	8002a88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a90:	e02d      	b.n	8002aee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fd5c 	bl	800355a <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e039      	b.n	8002b20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	881a      	ldrh	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	e008      	b.n	8002adc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1cb      	bne.n	8002a92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fd28 	bl	800355a <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e005      	b.n	8002b20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d113      	bne.n	8002b80 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 81ce 	beq.w	8002f12 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
      }
      return;
 8002b7e:	e1c8      	b.n	8002f12 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80e3 	beq.w	8002d4e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4ba6      	ldr	r3, [pc, #664]	; (8002e30 <HAL_UART_IRQHandler+0x308>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80d8 	beq.w	8002d4e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_UART_IRQHandler+0xa2>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xce>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_UART_IRQHandler+0xfa>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c18:	f043 0202 	orr.w	r2, r3, #2
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d015      	beq.n	8002c58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2208      	movs	r2, #8
 8002c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d011      	beq.n	8002c86 <HAL_UART_IRQHandler+0x15e>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8142 	beq.w	8002f16 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d004      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d031      	beq.n	8002d3a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fcbb 	bl	8003652 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d123      	bne.n	8002d32 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d013      	beq.n	8002d2a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a4b      	ldr	r2, [pc, #300]	; (8002e34 <HAL_UART_IRQHandler+0x30c>)
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe faed 	bl	80012ee <HAL_DMA_Abort_IT>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d017      	beq.n	8002d4a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002d24:	4610      	mov	r0, r2
 8002d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	e00f      	b.n	8002d4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f908 	bl	8002f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	e00b      	b.n	8002d4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f904 	bl	8002f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d38:	e007      	b.n	8002d4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f900 	bl	8002f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d48:	e0e5      	b.n	8002f16 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4a:	bf00      	nop
    return;
 8002d4c:	e0e3      	b.n	8002f16 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f040 80a9 	bne.w	8002eaa <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80a3 	beq.w	8002eaa <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 809d 	beq.w	8002eaa <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2210      	movs	r2, #16
 8002d76:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d158      	bne.n	8002e38 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80c1 	beq.w	8002f1a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d9e:	893a      	ldrh	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f080 80ba 	bcs.w	8002f1a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d12a      	bne.n	8002e14 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dcc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0210 	bic.w	r2, r2, #16
 8002e08:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fa2f 	bl	8001272 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f893 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e2e:	e074      	b.n	8002f1a <HAL_UART_IRQHandler+0x3f2>
 8002e30:	04000120 	.word	0x04000120
 8002e34:	080036b1 	.word	0x080036b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d060      	beq.n	8002f1e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0210 	bic.w	r2, r2, #16
 8002e9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f856 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ea8:	e039      	b.n	8002f1e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x3a8>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ec6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fc20 	bl	800370e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ece:	e029      	b.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01a      	beq.n	8002f22 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
    }
    return;
 8002ef4:	e015      	b.n	8002f22 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d011      	beq.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00c      	beq.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fbe6 	bl	80036dc <UART_EndTransmit_IT>
    return;
 8002f10:	e008      	b.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8002f12:	bf00      	nop
 8002f14:	e006      	b.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
    return;
 8002f16:	bf00      	nop
 8002f18:	e004      	b.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8002f1a:	bf00      	nop
 8002f1c:	e002      	b.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <HAL_UART_IRQHandler+0x3fc>
    return;
 8002f22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop

08002f2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4baf      	ldr	r3, [pc, #700]	; (8003254 <UART_SetConfig+0x2e8>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	69f9      	ldr	r1, [r7, #28]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4aa4      	ldr	r2, [pc, #656]	; (8003258 <UART_SetConfig+0x2ec>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a9b      	ldr	r2, [pc, #620]	; (800325c <UART_SetConfig+0x2f0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d121      	bne.n	8003036 <UART_SetConfig+0xca>
 8002ff2:	4b9b      	ldr	r3, [pc, #620]	; (8003260 <UART_SetConfig+0x2f4>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d817      	bhi.n	8003030 <UART_SetConfig+0xc4>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <UART_SetConfig+0x9c>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	08003019 	.word	0x08003019
 800300c:	08003025 	.word	0x08003025
 8003010:	0800301f 	.word	0x0800301f
 8003014:	0800302b 	.word	0x0800302b
 8003018:	2301      	movs	r3, #1
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e070      	b.n	8003100 <UART_SetConfig+0x194>
 800301e:	2302      	movs	r3, #2
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e06d      	b.n	8003100 <UART_SetConfig+0x194>
 8003024:	2304      	movs	r3, #4
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e06a      	b.n	8003100 <UART_SetConfig+0x194>
 800302a:	2308      	movs	r3, #8
 800302c:	76fb      	strb	r3, [r7, #27]
 800302e:	e067      	b.n	8003100 <UART_SetConfig+0x194>
 8003030:	2310      	movs	r3, #16
 8003032:	76fb      	strb	r3, [r7, #27]
 8003034:	e064      	b.n	8003100 <UART_SetConfig+0x194>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a8a      	ldr	r2, [pc, #552]	; (8003264 <UART_SetConfig+0x2f8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d132      	bne.n	80030a6 <UART_SetConfig+0x13a>
 8003040:	4b87      	ldr	r3, [pc, #540]	; (8003260 <UART_SetConfig+0x2f4>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d828      	bhi.n	80030a0 <UART_SetConfig+0x134>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0xe8>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003089 	.word	0x08003089
 8003058:	080030a1 	.word	0x080030a1
 800305c:	080030a1 	.word	0x080030a1
 8003060:	080030a1 	.word	0x080030a1
 8003064:	08003095 	.word	0x08003095
 8003068:	080030a1 	.word	0x080030a1
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030a1 	.word	0x080030a1
 8003074:	0800308f 	.word	0x0800308f
 8003078:	080030a1 	.word	0x080030a1
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030a1 	.word	0x080030a1
 8003084:	0800309b 	.word	0x0800309b
 8003088:	2300      	movs	r3, #0
 800308a:	76fb      	strb	r3, [r7, #27]
 800308c:	e038      	b.n	8003100 <UART_SetConfig+0x194>
 800308e:	2302      	movs	r3, #2
 8003090:	76fb      	strb	r3, [r7, #27]
 8003092:	e035      	b.n	8003100 <UART_SetConfig+0x194>
 8003094:	2304      	movs	r3, #4
 8003096:	76fb      	strb	r3, [r7, #27]
 8003098:	e032      	b.n	8003100 <UART_SetConfig+0x194>
 800309a:	2308      	movs	r3, #8
 800309c:	76fb      	strb	r3, [r7, #27]
 800309e:	e02f      	b.n	8003100 <UART_SetConfig+0x194>
 80030a0:	2310      	movs	r3, #16
 80030a2:	76fb      	strb	r3, [r7, #27]
 80030a4:	e02c      	b.n	8003100 <UART_SetConfig+0x194>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6b      	ldr	r2, [pc, #428]	; (8003258 <UART_SetConfig+0x2ec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d125      	bne.n	80030fc <UART_SetConfig+0x190>
 80030b0:	4b6b      	ldr	r3, [pc, #428]	; (8003260 <UART_SetConfig+0x2f4>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030be:	d017      	beq.n	80030f0 <UART_SetConfig+0x184>
 80030c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c4:	d817      	bhi.n	80030f6 <UART_SetConfig+0x18a>
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ca:	d00b      	beq.n	80030e4 <UART_SetConfig+0x178>
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d0:	d811      	bhi.n	80030f6 <UART_SetConfig+0x18a>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <UART_SetConfig+0x172>
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030da:	d006      	beq.n	80030ea <UART_SetConfig+0x17e>
 80030dc:	e00b      	b.n	80030f6 <UART_SetConfig+0x18a>
 80030de:	2300      	movs	r3, #0
 80030e0:	76fb      	strb	r3, [r7, #27]
 80030e2:	e00d      	b.n	8003100 <UART_SetConfig+0x194>
 80030e4:	2302      	movs	r3, #2
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e00a      	b.n	8003100 <UART_SetConfig+0x194>
 80030ea:	2304      	movs	r3, #4
 80030ec:	76fb      	strb	r3, [r7, #27]
 80030ee:	e007      	b.n	8003100 <UART_SetConfig+0x194>
 80030f0:	2308      	movs	r3, #8
 80030f2:	76fb      	strb	r3, [r7, #27]
 80030f4:	e004      	b.n	8003100 <UART_SetConfig+0x194>
 80030f6:	2310      	movs	r3, #16
 80030f8:	76fb      	strb	r3, [r7, #27]
 80030fa:	e001      	b.n	8003100 <UART_SetConfig+0x194>
 80030fc:	2310      	movs	r3, #16
 80030fe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a54      	ldr	r2, [pc, #336]	; (8003258 <UART_SetConfig+0x2ec>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d173      	bne.n	80031f2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800310a:	7efb      	ldrb	r3, [r7, #27]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d824      	bhi.n	800315a <UART_SetConfig+0x1ee>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0x1ac>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800313d 	.word	0x0800313d
 800311c:	0800315b 	.word	0x0800315b
 8003120:	08003145 	.word	0x08003145
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800314b 	.word	0x0800314b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	0800315b 	.word	0x0800315b
 8003134:	0800315b 	.word	0x0800315b
 8003138:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff f890 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003140:	6178      	str	r0, [r7, #20]
        break;
 8003142:	e00f      	b.n	8003164 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003144:	4b48      	ldr	r3, [pc, #288]	; (8003268 <UART_SetConfig+0x2fc>)
 8003146:	617b      	str	r3, [r7, #20]
        break;
 8003148:	e00c      	b.n	8003164 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7fe fff1 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800314e:	6178      	str	r0, [r7, #20]
        break;
 8003150:	e008      	b.n	8003164 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003156:	617b      	str	r3, [r7, #20]
        break;
 8003158:	e004      	b.n	8003164 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	76bb      	strb	r3, [r7, #26]
        break;
 8003162:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80fe 	beq.w	8003368 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	429a      	cmp	r2, r3
 800317a:	d305      	bcc.n	8003188 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	429a      	cmp	r2, r3
 8003186:	d902      	bls.n	800318e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	76bb      	strb	r3, [r7, #26]
 800318c:	e0ec      	b.n	8003368 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	4618      	mov	r0, r3
 8003192:	f04f 0100 	mov.w	r1, #0
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	020b      	lsls	r3, r1, #8
 80031a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031a4:	0202      	lsls	r2, r0, #8
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	6849      	ldr	r1, [r1, #4]
 80031aa:	0849      	lsrs	r1, r1, #1
 80031ac:	4608      	mov	r0, r1
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	1814      	adds	r4, r2, r0
 80031b4:	eb43 0501 	adc.w	r5, r3, r1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	461a      	mov	r2, r3
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd f809 	bl	80001dc <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4613      	mov	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d8:	d308      	bcc.n	80031ec <UART_SetConfig+0x280>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e0:	d204      	bcs.n	80031ec <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e0bd      	b.n	8003368 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	76bb      	strb	r3, [r7, #26]
 80031f0:	e0ba      	b.n	8003368 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031fa:	d168      	bne.n	80032ce <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80031fc:	7efb      	ldrb	r3, [r7, #27]
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d834      	bhi.n	800326c <UART_SetConfig+0x300>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <UART_SetConfig+0x29c>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800322d 	.word	0x0800322d
 800320c:	08003235 	.word	0x08003235
 8003210:	0800323d 	.word	0x0800323d
 8003214:	0800326d 	.word	0x0800326d
 8003218:	08003243 	.word	0x08003243
 800321c:	0800326d 	.word	0x0800326d
 8003220:	0800326d 	.word	0x0800326d
 8003224:	0800326d 	.word	0x0800326d
 8003228:	0800324b 	.word	0x0800324b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7ff f818 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003230:	6178      	str	r0, [r7, #20]
        break;
 8003232:	e020      	b.n	8003276 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003234:	f7ff f82a 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8003238:	6178      	str	r0, [r7, #20]
        break;
 800323a:	e01c      	b.n	8003276 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <UART_SetConfig+0x2fc>)
 800323e:	617b      	str	r3, [r7, #20]
        break;
 8003240:	e019      	b.n	8003276 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7fe ff75 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003246:	6178      	str	r0, [r7, #20]
        break;
 8003248:	e015      	b.n	8003276 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324e:	617b      	str	r3, [r7, #20]
        break;
 8003250:	e011      	b.n	8003276 <UART_SetConfig+0x30a>
 8003252:	bf00      	nop
 8003254:	efff69f3 	.word	0xefff69f3
 8003258:	40008000 	.word	0x40008000
 800325c:	40013800 	.word	0x40013800
 8003260:	40021000 	.word	0x40021000
 8003264:	40004400 	.word	0x40004400
 8003268:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	76bb      	strb	r3, [r7, #26]
        break;
 8003274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d075      	beq.n	8003368 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005a      	lsls	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	441a      	add	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	b29b      	uxth	r3, r3
 8003292:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d916      	bls.n	80032c8 <UART_SetConfig+0x35c>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d212      	bcs.n	80032c8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f023 030f 	bic.w	r3, r3, #15
 80032aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	89fa      	ldrh	r2, [r7, #14]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	e04f      	b.n	8003368 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	76bb      	strb	r3, [r7, #26]
 80032cc:	e04c      	b.n	8003368 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ce:	7efb      	ldrb	r3, [r7, #27]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d828      	bhi.n	8003326 <UART_SetConfig+0x3ba>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <UART_SetConfig+0x370>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003301 	.word	0x08003301
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003311 	.word	0x08003311
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003317 	.word	0x08003317
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003327 	.word	0x08003327
 80032f8:	08003327 	.word	0x08003327
 80032fc:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7fe ffae 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003304:	6178      	str	r0, [r7, #20]
        break;
 8003306:	e013      	b.n	8003330 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7fe ffc0 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 800330c:	6178      	str	r0, [r7, #20]
        break;
 800330e:	e00f      	b.n	8003330 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <UART_SetConfig+0x414>)
 8003312:	617b      	str	r3, [r7, #20]
        break;
 8003314:	e00c      	b.n	8003330 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7fe ff0b 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800331a:	6178      	str	r0, [r7, #20]
        break;
 800331c:	e008      	b.n	8003330 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	617b      	str	r3, [r7, #20]
        break;
 8003324:	e004      	b.n	8003330 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	76bb      	strb	r3, [r7, #26]
        break;
 800332e:	bf00      	nop
    }

    if (pclk != 0U)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d018      	beq.n	8003368 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	085a      	lsrs	r2, r3, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	b29b      	uxth	r3, r3
 800334a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d908      	bls.n	8003364 <UART_SetConfig+0x3f8>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d204      	bcs.n	8003364 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e001      	b.n	8003368 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003374:	7ebb      	ldrb	r3, [r7, #26]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bdb0      	pop	{r4, r5, r7, pc}
 800337e:	bf00      	nop
 8003380:	00f42400 	.word	0x00f42400

08003384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01a      	beq.n	800349a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003482:	d10a      	bne.n	800349a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d8:	f7fd fdae 	bl	8001038 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d10e      	bne.n	800350a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f82d 	bl	800355a <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e023      	b.n	8003552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d10e      	bne.n	8003536 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f817 	bl	800355a <UART_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e00d      	b.n	8003552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	e05e      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d05a      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003574:	f7fd fd60 	bl	8001038 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <UART_WaitOnFlagUntilTimeout+0x30>
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11b      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003598:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e043      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02c      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035de:	d124      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e00f      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d091      	beq.n	800356c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003668:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0210 	bic.w	r2, r2, #16
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff fc36 	bl	8002f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fc13 	bl	8002f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <adpflual_setState>:
#include "sm_adp-flual.h"

adpflual_State_t adpflual_State = SHUTDOWN;

#ifdef DEBUG
void adpflual_setState (adpflual_State_t value) {
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
	adpflual_State = value;
 800372e:	4a04      	ldr	r2, [pc, #16]	; (8003740 <adpflual_setState+0x1c>)
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	7013      	strb	r3, [r2, #0]
};
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	20000038 	.word	0x20000038

08003744 <adpflual_getState>:

adpflual_State_t adpflual_getState (void) {
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
	return adpflual_State;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <adpflual_getState+0x14>)
 800374a:	781b      	ldrb	r3, [r3, #0]
};
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000038 	.word	0x20000038

0800375c <adpflual_State_Machine>:

};

#endif

void adpflual_State_Machine(void) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
	switch(adpflual_State) {
 8003762:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <adpflual_State_Machine+0x198>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b07      	cmp	r3, #7
 8003768:	f200 80bf 	bhi.w	80038ea <adpflual_State_Machine+0x18e>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <adpflual_State_Machine+0x18>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003795 	.word	0x08003795
 8003778:	080037a1 	.word	0x080037a1
 800377c:	0800380d 	.word	0x0800380d
 8003780:	0800382d 	.word	0x0800382d
 8003784:	080038d1 	.word	0x080038d1
 8003788:	0800384d 	.word	0x0800384d
 800378c:	0800387f 	.word	0x0800387f
 8003790:	080038b1 	.word	0x080038b1

	case SHUTDOWN:
		ADPFLUAL_SETUP();
 8003794:	f7fc feb4 	bl	8000500 <setup>
		adpflual_State = SM_READY;
 8003798:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <adpflual_State_Machine+0x198>)
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
		break;
 800379e:	e0a4      	b.n	80038ea <adpflual_State_Machine+0x18e>

	case SM_READY:{
		ADPFLUAL_VC_LIST_TYPEDEF temp;
		if(ADPFLUIAL_GET_VOICECOMMAND(&temp)){
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc ff6e 	bl	8000684 <getVoiceCommandEvent>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d023      	beq.n	80037f6 <adpflual_State_Machine+0x9a>
			if(temp == VC_RECORD_ID){
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <adpflual_State_Machine+0x64>
				ADPFLUAL_NEWFILE();
 80037b4:	f7fc feb4 	bl	8000520 <newFileExecuted>
				adpflual_State = SM_RECORD_ID;
 80037b8:	4b4e      	ldr	r3, [pc, #312]	; (80038f4 <adpflual_State_Machine+0x198>)
 80037ba:	2202      	movs	r2, #2
 80037bc:	701a      	strb	r2, [r3, #0]
		} else if(ADPFLUAL_TIMEROUT()){
			ADPFLUAL_BLINK_RED_LED();
			adpflual_State = SM_HARD_FAULT;
		}
	}
	break;
 80037be:	e089      	b.n	80038d4 <adpflual_State_Machine+0x178>
			}else if(temp == VC_RECORD_FLUENCY){
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <adpflual_State_Machine+0x76>
				ADPFLUAL_NEWFILE();
 80037c6:	f7fc feab 	bl	8000520 <newFileExecuted>
				adpflual_State = SM_RECORD_FLUENCY;
 80037ca:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <adpflual_State_Machine+0x198>)
 80037cc:	2203      	movs	r2, #3
 80037ce:	701a      	strb	r2, [r3, #0]
	break;
 80037d0:	e080      	b.n	80038d4 <adpflual_State_Machine+0x178>
			}else if(temp == VC_SEND){
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d105      	bne.n	80037e4 <adpflual_State_Machine+0x88>
				ADPFLUAL_SEEK_WIFI_NETWORK();
 80037d8:	f7fc fec2 	bl	8000560 <seekWifiNetwork>
				adpflual_State = SM_CONNECT;
 80037dc:	4b45      	ldr	r3, [pc, #276]	; (80038f4 <adpflual_State_Machine+0x198>)
 80037de:	2205      	movs	r2, #5
 80037e0:	701a      	strb	r2, [r3, #0]
	break;
 80037e2:	e077      	b.n	80038d4 <adpflual_State_Machine+0x178>
			}else if(temp == VC_PLAY_RECORDED){
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d174      	bne.n	80038d4 <adpflual_State_Machine+0x178>
				ADPFLUAL_PLAY_LAST_SOUND();
 80037ea:	f7fc fec9 	bl	8000580 <playLastSound>
				adpflual_State = SM_PLAY;
 80037ee:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <adpflual_State_Machine+0x198>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	701a      	strb	r2, [r3, #0]
	break;
 80037f4:	e06e      	b.n	80038d4 <adpflual_State_Machine+0x178>
		} else if(ADPFLUAL_TIMEROUT()){
 80037f6:	f7fc ff6d 	bl	80006d4 <getTimerOutEvent>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d069      	beq.n	80038d4 <adpflual_State_Machine+0x178>
			ADPFLUAL_BLINK_RED_LED();
 8003800:	f7fc fe9e 	bl	8000540 <blinkRedLed>
			adpflual_State = SM_HARD_FAULT;
 8003804:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <adpflual_State_Machine+0x198>)
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
	break;
 800380a:	e063      	b.n	80038d4 <adpflual_State_Machine+0x178>

	case SM_RECORD_ID:{
		ADPFLUAL_VC_LIST_TYPEDEF temp;
		if(ADPFLUIAL_GET_VOICECOMMAND(&temp)){
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	4618      	mov	r0, r3
 8003810:	f7fc ff38 	bl	8000684 <getVoiceCommandEvent>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d05e      	beq.n	80038d8 <adpflual_State_Machine+0x17c>
			if(temp == VC_STOP_RECORD){
 800381a:	79bb      	ldrb	r3, [r7, #6]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d15b      	bne.n	80038d8 <adpflual_State_Machine+0x17c>
				ADPFLUAL_STOP_RECORD();
 8003820:	f7fc febe 	bl	80005a0 <stopRecord>
				adpflual_State = SM_READY;
 8003824:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <adpflual_State_Machine+0x198>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	break;
 800382a:	e055      	b.n	80038d8 <adpflual_State_Machine+0x17c>

	case SM_RECORD_FLUENCY:{
		ADPFLUAL_VC_LIST_TYPEDEF temp;
		if(ADPFLUIAL_GET_VOICECOMMAND(&temp)){
 800382c:	1d7b      	adds	r3, r7, #5
 800382e:	4618      	mov	r0, r3
 8003830:	f7fc ff28 	bl	8000684 <getVoiceCommandEvent>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d050      	beq.n	80038dc <adpflual_State_Machine+0x180>
			if(temp == VC_STOP_RECORD){
 800383a:	797b      	ldrb	r3, [r7, #5]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d14d      	bne.n	80038dc <adpflual_State_Machine+0x180>
				ADPFLUAL_STOP_RECORD();
 8003840:	f7fc feae 	bl	80005a0 <stopRecord>
				adpflual_State = SM_READY;
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <adpflual_State_Machine+0x198>)
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	break;
 800384a:	e047      	b.n	80038dc <adpflual_State_Machine+0x180>
	case SM_HARD_FAULT:
		break;

	case SM_CONNECT:{
		ADPFLUAL_CONNECTION_LIST_TYPEDEF temp;
		if(ADPFLUAL_GET_CONNECTION_STATUS(&temp)){
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc ff68 	bl	8000724 <getConnectionEvent>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d042      	beq.n	80038e0 <adpflual_State_Machine+0x184>
			if(temp == CONNECTION_STATUS_SUCCESS){
 800385a:	793b      	ldrb	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <adpflual_State_Machine+0x110>
				ADPFLUAL_START_SEND();
 8003860:	f7fc feae 	bl	80005c0 <startSend>
				adpflual_State = SM_SEND;
 8003864:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <adpflual_State_Machine+0x198>)
 8003866:	2206      	movs	r2, #6
 8003868:	701a      	strb	r2, [r3, #0]
				adpflual_State = SM_READY;
			}
		}

	}
	break;
 800386a:	e039      	b.n	80038e0 <adpflual_State_Machine+0x184>
			}else if(temp == CONNECTION_STATUS_FAIL){
 800386c:	793b      	ldrb	r3, [r7, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d136      	bne.n	80038e0 <adpflual_State_Machine+0x184>
				ADPFLUAL_CONNECTION_FAIL();
 8003872:	f7fc feb5 	bl	80005e0 <connectionFailAlert>
				adpflual_State = SM_READY;
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <adpflual_State_Machine+0x198>)
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
	break;
 800387c:	e030      	b.n	80038e0 <adpflual_State_Machine+0x184>
	case SM_SEND:{
		ADPFLUAL_SEND_STATUS_LIST_TYPEDEF temp;
		if(ADPFLUAL_GET_SEND_STATUS(&temp)){
 800387e:	1cfb      	adds	r3, r7, #3
 8003880:	4618      	mov	r0, r3
 8003882:	f7fc ff81 	bl	8000788 <getSendStatusEvent>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02b      	beq.n	80038e4 <adpflual_State_Machine+0x188>
			if(temp == SEND_SUCCESS){
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <adpflual_State_Machine+0x142>
				ADPFLUAL_SEND_MESSAGE();
 8003892:	f7fc feb5 	bl	8000600 <sendMessageAlert>
				adpflual_State = SM_READY;
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <adpflual_State_Machine+0x198>)
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
				adpflual_State = SM_READY;
			}
		}

	}
	break;
 800389c:	e022      	b.n	80038e4 <adpflual_State_Machine+0x188>
			}else if(temp == SEND_FAIL){
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d11f      	bne.n	80038e4 <adpflual_State_Machine+0x188>
				ADPFLUAL_SEND_MESSAGE();
 80038a4:	f7fc feac 	bl	8000600 <sendMessageAlert>
				adpflual_State = SM_READY;
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <adpflual_State_Machine+0x198>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
	break;
 80038ae:	e019      	b.n	80038e4 <adpflual_State_Machine+0x188>
	case SM_PLAY:{
		ADPFLUAL_PLAY_STATUS_LIST_TYPEDEF temp;
		if(ADPFLUAL_GET_PLAY_STATUS(&temp)){
 80038b0:	1cbb      	adds	r3, r7, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc ff9a 	bl	80007ec <getPlayStatusEvent>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d014      	beq.n	80038e8 <adpflual_State_Machine+0x18c>
			if(temp == STOP_PLAY){
 80038be:	78bb      	ldrb	r3, [r7, #2]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d111      	bne.n	80038e8 <adpflual_State_Machine+0x18c>
				ADPFLUAL_REBOOT_CAPTURE_FUNCTION();
 80038c4:	f7fc feac 	bl	8000620 <rebootCaptureFunction>
				adpflual_State = SM_READY;
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <adpflual_State_Machine+0x198>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
			}
		}

	}
	break;
 80038ce:	e00b      	b.n	80038e8 <adpflual_State_Machine+0x18c>
		break;
 80038d0:	bf00      	nop
 80038d2:	e00a      	b.n	80038ea <adpflual_State_Machine+0x18e>
	break;
 80038d4:	bf00      	nop
 80038d6:	e008      	b.n	80038ea <adpflual_State_Machine+0x18e>
	break;
 80038d8:	bf00      	nop
 80038da:	e006      	b.n	80038ea <adpflual_State_Machine+0x18e>
	break;
 80038dc:	bf00      	nop
 80038de:	e004      	b.n	80038ea <adpflual_State_Machine+0x18e>
	break;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <adpflual_State_Machine+0x18e>
	break;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <adpflual_State_Machine+0x18e>
	break;
 80038e8:	bf00      	nop
	}
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000038 	.word	0x20000038

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1b64      	subs	r4, r4, r5
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2600      	movs	r6, #0
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4d0b      	ldr	r5, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f000 f820 	bl	8003950 <_init>
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2600      	movs	r6, #0
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08003b08 	.word	0x08003b08
 8003934:	08003b08 	.word	0x08003b08
 8003938:	08003b08 	.word	0x08003b08
 800393c:	08003b0c 	.word	0x08003b0c

08003940 <memset>:
 8003940:	4402      	add	r2, r0
 8003942:	4603      	mov	r3, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
